#+TITLE: clojure/clojurescript 與 left-pad
#+DATE: <2016-03-27 Sun 00:07>
#+UPDATED: <2016-03-27 Sun 00:07>
#+ABBRLINK: 7c811780
#+AUTHOR: coldnew
#+EMAIL: coldnew.tw@gmail.com
#+OPTIONS: num:nil ^:nil
#+TAGS: clojure, clojurescript
#+LANGUAGE: zh-tw
#+ALIAS: blog/2016/03-27_leftpad/index.html

最近鬧得沸沸揚揚的事情，大概就是 [[https://github.com/azer][Azer Koçulu]] 在 npm 上[[https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.eww19oprb][下架 left-pad]]這件事，導致許許多多依賴他的 Node.js 專案 [[https://github.com/azer/left-pad/issues/4][不能使用]]。

就讓我們趁這個機會，看一下我們在 clojure/clojurescript 下到底有沒有需要這個函式庫，或是是否已經有內建可替代的函式可以處理這個功能。

#+HTML: <!--more-->

* leftpad 做了哪些事?

在我們開始前，讓我們來看看 [[https://github.com/azer/left-pad][left-pad]] 這個函式庫到底多好用，為什麼一堆套件都依賴他。實際上 [[https://github.com/azer/left-pad][left-pad]] 只有短短的幾行，內容如下:

#+BEGIN_SRC javascript
  function leftpad (str, len, ch) {
      str = String(str);
  
      var i = -1;
  
      if (!ch && ch !== 0) ch = ' ';
  
      len = len - str.length;
  
      while (++i < len) {
          str = ch + str;
      }
  
      return str;
  }
#+END_SRC

而他的功能也很單純，就是將輸入的東西依據設定，進行 padding 的動作

#+BEGIN_SRC javascript
  var leftpad = require('left-pad')
  
  leftpad('foo', 5)
  // => "  foo"
  
  leftpad('foobar', 6)
  // => "foobar"
  
  leftpad(1, 2, 0)
  // => "01"
#+END_SRC

* 如何在 clojure 上實作

那我們在 clojure 下要怎樣實作 leftpad 這函式的功能呢？實際上我們使用 [[https://clojuredocs.org/clojure.core/format][clojure.core/format]] 搭配一些字串的替代就可以辦到 (註: 參考自 [[http://beginnersbook.com/2014/07/java-left-padding-a-string-with-spaces-and-zeros/][java – Left padding a String with Spaces and Zeros]] 一文)

#+BEGIN_SRC clojure
  (defn leftpad
    "If S is shorter than LEN, pad it with CH on the left."
    ([s len] (leftpad s len " "))
    ([s len ch]
     (-> (format (str "%" len "s") (str s))
         (clojure.string/replace #"\s" (str ch)))))
  
  (leftpad 1 2 0)
  ;; => "01"
#+END_SRC

當然像這樣用字串查找替代的方式很容易打死自己，此外，[[https://clojuredocs.org/clojure.core/format][clojure.core/format]] 因為 [[http://dev.clojure.org/jira/browse/CLJS-324][CLJS-324 ISSUE]] 的關係，目前是無法在 clojurescript 上使用的，因此我們應該考慮看看 clojure/clojurescript 都可以共用的 [[https://clojuredocs.org/clojure.pprint/cl-format][cl-format]] 。

* 如何在 clojurescript 上實作

[[https://clojuredocs.org/clojure.pprint/cl-format][cl-format]] 是移植自 common lisp 的 [[http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000%2529][format]] 函式，是一種非常強大的字串格式化方式。具體範例在 [[http://www.gigamonkeys.com/book/a-few-format-recipes.html][Praticle Common Lisp]] 一書內文有提到，我們在這邊只注重如何透過 [[https://clojuredocs.org/clojure.pprint/cl-format][cl-format]] 進行 padding:

#+BEGIN_SRC clojure
  (cl-format nil "~5,'qd" "hi")
  ;; => "qqqhi"
  
  (cl-format nil "~6,'0d" 1)
  ;; => "000001"
  
  (cl-format nil "~7d" 1)
  ;; => "      1"
#+END_SRC

了解了 [[https://clojuredocs.org/clojure.pprint/cl-format][cl-format]] 在 padding 功能上的使用，我們就可以透過它來製作 clojure/clojurescript 皆能使用的 =leftpad= 函式:

#+BEGIN_SRC clojure
  (ns coldnew.left-pad
    (:require #?(:clj  [clojure.pprint :refer [cl-format]]
                 :cljs [cljs.pprint    :refer [cl-format]])))
  
  (defn leftpad
    "If S is shorter than LEN, pad it with CH on the left."
    ([s len] (leftpad s len " "))
    ([s len ch]
     (cl-format nil (str "~" len ",'" ch "d") (str s))))
#+END_SRC

* 後記

本文只是我看到了 [[http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/][NPM & left-pad: Have We Forgotten How To Program?]] 這篇文章後，來確認一下我到底會不會寫程式之用，文內實作的 clojure/clojurescript 版本你可以在 [[https://github.com/coldnew/left-pad.clj][coldnew/left-pad.clj]] 這個專案看到。

如果你想看看 emacs-lisp 下要怎樣實作 leftpad 函式，則可以在 [[https://github.com/coldnew/left-pad.el][coldnew/left-pad.el]] 看到我實作的範例。

實際上 leftpad 的事件還衍生了另外一個問題: =套件是否可以這麼容易被下架?=

在 Clojure 的世界中，我們會把我們的專案放置到 [[http://clojars.org/][Clojars]] 去，而在 [[http://clojars.org/][Clojars]] 則是這樣規定 [[https://github.com/clojars/clojars-web/wiki/About#how-do-i-delete-a-jar][How do I delete a jar?]]

#+BEGIN_QUOTE
Deletion of entire projects or particular versions is discouraged as you will break anyone's build that depends on the project or version. There is also a cost associated with deletion, as it requires an admin's time. If you're sure nobody is using your jar or absolutely must remove it open an issue against the Clojars GitHub project. If you need it done privately contact the server caretakers. Before doing so, push a new revision with "Delete me" in the description in order to prove you're the owner of the project.
#+END_QUOTE

#+HTML: <br>

[[http://clojars.org/][Clojars]] 的維護者是不太贊同開發者移除自己的套件的，我曾經要求 clojar 幫我移除一個以前誤上傳的套件 (請見 [[https://github.com/clojars/clojars-web/issues/391][issue/391]])，也是花了好一段時間這個套件才真的被刪除，因此在 Clojure 世界中我們應該不太需要擔心有使用者下架套件這件事 :S。

* 延伸閱讀

~[1]~ [[http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/][NPM & left-pad: Have We Forgotten How To Program?]]

~[2]~ [[http://www.gigamonkeys.com/book/a-few-format-recipes.html][Praticle Common Lisp - A Few FORMAT Recipes]]
