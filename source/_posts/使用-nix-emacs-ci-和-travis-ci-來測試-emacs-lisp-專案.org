#+TITLE: 使用 nix-emacs-ci 和 travis-ci 來測試 emacs-lisp 專案
#+OPTIONS: num:nil ^:nil
#+ABBRLINK: 35b9d15a
#+TAGS: emacs, nix, travis-ci
#+LANGUAGE: zh-tw

最近剛好在 [[https://www.reddit.com][reddit]] 看到了這篇: [[https://www.reddit.com/r/emacs/comments/d4g4di/a_new_set_of_installable_emacs_versions_for_your/][A new set of installable Emacs versions for your CI builds]]，於是就來順手試用一下。

[[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] 是由 emacs 社群知名的開發者 [[https://github.com/purcell/][purcell]] 所建立的專案，主要目標是用來替代 [[https://github.com/rejeep/evm][evm]] 以及讓開發者在 [[https://travis-ci.org/][travis-ci]] 可以方便根據不同版本的 emacs 進行測試而設計。

本文將順便說明如何透過 [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] 來讓你的 emacs 套件可以在 [[https://travis-ci.org/][travis-ci]] 進行不同版本 Emacs 的測試。

#+HTML: <!-- more -->

* 關於 nix-emacs-ci

就如 [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] 這個專案名一樣，這專案是透過 [[https://nixos.org/nix/][nix]] 這個套件管理程式建立，並將預先編譯好的 Emacs Binary 上傳到 [[https://cachix.org/][Cachix]] 這個以 [[https://nixos.org/nix/][nix]] 套件為主的服務。

截至本文撰寫時間為止，[[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] 共支援 =emacs 24.2 ~ emcas 26.3= 以及 =emacs-snapshot= 這些版本，你只要像這樣將以下內容填到你的 =.travis.yml= 即可讓  [[https://travis-ci.org/][travis-ci]] 根據設定對你的 emacs 套件進行測試。

#+BEGIN_SRC yaml
  language: nix

  os:
    - linux
    - osx

  env:
    - EMACS_CI=emacs-snapshot

  install:
    # The default "emacs" executable on the $PATH will now be the version named by $EMACS_CI
    - bash <(curl https://raw.githubusercontent.com/purcell/nix-emacs-ci/master/travis-install)

  script:
    - ... your commands go here ...
#+END_SRC

實際上的範例請見以下文章。

* 建立專案

為了方便說明，這邊我建立一個名為 [[https://github.com/coldnew-examples/nix-emacs-ci-test][nix-emacs-ci-test]] 的專案來進行說明，首先先初始化專案

#+BEGIN_EXAMPLE
  coldnew@gentoo ~ $ mkdir -p nix-emacs-ci-test && cd $_
#+END_EXAMPLE

接下來，建立我們要測試的 emacs lib, 這邊我將其命名為 =mylib.el= ，並加入以下內容

#+BEGIN_SRC emacs-lisp
  (defun mylib-add-1 (num)
    "Increment NUM by 1."
    (+ 1 num))

  (provide 'mylib)
#+END_SRC

這個 =mylib.el= 就只有一個名為 =mylib-add-1= 的函式，功能也很簡單，就是把傳入的參數 =num= 加 1 後回傳，也就是說

#+BEGIN_SRC emacs-lisp
  (mylib-add-1 1) ; => 2
  (mylib-add-1 5) ; => 6
  (mylib-add-1 9) ; => 10
#+END_SRC

* 加入 Makefile

完成 =mylib.el= 後，我們建立 =Makefile= 來方便測試

#+BEGIN_SRC makefile
  EMACS ?= emacs
  BATCH := $(EMACS) $(EFLAGS) -batch -q -no-site-file -L .

  all: mylib.elc

  clean:
          $(RM) *.elc

  %.elc: %.el
          $(BATCH) --eval '(byte-compile-file "$<")'

  test: clean
          $(BATCH) -L . -l test/mylib-test.el -f ert-run-tests-batch-and-exit

  .PHONY: clean test
#+END_SRC

在這邊，我們讓 Makefile 在執行 =make test= 命令的時候，會去跑 =test/mylib-test.el= 的程式，這就是我們接下來要寫的測試程式。

* mylib-test.el

先建立 =test= 資料夾

#+BEGIN_EXAMPLE
  coldnew@gentoo ~/nix-emacs-ci-test $ mkdir test && cd $_
#+END_EXAMPLE

完成後編輯 =test/mylib-test.el= 這個檔案，加入以下內容

#+BEGIN_SRC emacs-lisp
  ;;; mylib-test.el --- Tests for mylib

  (require 'ert)
  (require 'mylib)

  (ert-deftest mylib-test/mylib-add-1 ()
    "Test if mylib-add-1 works"
    (should (=  2 (mylib-add-1 1)))
    (should (= 10 (mylib-add-1 9))))
#+END_SRC

在這邊，我們透過 [[https://www.gnu.org/software/emacs/manual/html_node/ert/index.html][ert]] 這個 Emacs 內建的函式庫來進行測試，完成後就可以跑看看 =make test= 命令

#+BEGIN_EXAMPLE
  coldnew@gentoo ~/nix-emacs-ci-test $ make test
  rm -f *.elc
  emacs  -batch -q -no-site-file -L . -L . -l test/mylib-test.el -f ert-run-tests-batch-and-exit
  Running 1 tests (2019-09-21 12:39:40+0800, selector ‘t’)
     passed  1/1  mylib-test/mylib-add-1 (0.000178 sec)

  Ran 1 tests, 1 results as expected, 0 unexpected (2019-09-21 12:39:40+0800, 0.000564 sec)
#+END_EXAMPLE

可以看到測試有過，可以來加入 =.travis.yml= 來讓 [[https://travis-ci.org/][travis-ci]] 知道怎樣透過 [[https://github.com/purcell/nix-emacs-ci][nix-emacs-ci]] 對我們這個專案進行測試。

* .travis.yml

要讓 [[https://travis-ci.org/][travis-ci]] 測試，需要編輯 =.travis.yml= 這個檔案，這邊我們加入以下內容，指定我們測試用的 Emacs 版本從 =24.4 ~ 26.3= ，並且也拿最新版本的 emacs-snapshot 來測試 (不過允許 emacs-snaoshot 可以失敗就是~)

#+BEGIN_SRC yaml
  language: nix

  os:
    - linux
    - osx

  env:
    - EMACS_CI=emacs-24-4
    - EMACS_CI=emacs-24-5
    - EMACS_CI=emacs-25-1
    - EMACS_CI=emacs-25-2
    - EMACS_CI=emacs-25-3
    - EMACS_CI=emacs-26-1
    - EMACS_CI=emacs-26-2
    - EMACS_CI=emacs-26-3
    - EMACS_CI=emacs-snapshot

  matrix:
    allow_failures:
      - env: EMACS_CI=emacs-snapshot

  # The default "emacs" executable on the $PATH will now be the version named by $EMACS_CI
  install:
    - bash <(curl https://raw.githubusercontent.com/purcell/nix-emacs-ci/master/travis-install)

  script:
    - emacs --version
    - make clean
    - make
    - make test
#+END_SRC

都完成後，就可以在 GitHub 上面建立你的 repo, 並把這先程式 push 到 GitHub 上

* 設定 travis-ci

到 [[https://travis-ci.org/][travis-ci]] 去設定，讓它可以對你的 repo 進行讀取，這樣就可以讓 [[https://travis-ci.org/][travis-ci]] 抓到剛剛我們放的 =.travis.yml= 囉

[[file:使用-nix-emacs-ci-和-travis-ci-來測試-emacs-lisp-專案/travis-setting.png]]

一切都順利的話就會看到在 [[https://travis-ci.org/][travis-ci]] 上的測試結果

[[file:使用-nix-emacs-ci-和-travis-ci-來測試-emacs-lisp-專案/travis.png]]

這樣以後對你的專案有任何新的改動，都可以讓 [[https://travis-ci.org/][travis-ci]] 幫忙確認程式都有符合測試需求囉~

* 本文的範例

本文的範例已經上傳到 [[https://github.com/coldnew-examples/nix-emacs-ci-test][GitHub]]，你可以透過以下命令下載

: git clone https://github.com/coldnew-examples/nix-emacs-ci-test.git

或是直接到 [[https://github.com/coldnew-examples/nix-emacs-ci-test][coldnew-examples/nix-emacs-ci-test]] 直接查看。

* 延伸閱讀

- https://github.com/purcell/nix-emacs-ci

- [[https://www.reddit.com/r/emacs/comments/d4g4di/a_new_set_of_installable_emacs_versions_for_your/][reddit: A new set of installable Emacs versions for your CI builds]]

- https://github.com/coldnew-examples/nix-emacs-ci-test

* 其他                                                             :noexport:
