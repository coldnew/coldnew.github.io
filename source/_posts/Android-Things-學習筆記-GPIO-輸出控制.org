#+TITLE: Android Things 學習筆記: GPIO 的輸出控制
#+TAGS: android, android things, iot, raspberry pi 3
#+DATE: <2017-05-11 Thu 23:43>
#+UPDATED: <2017-05-12 Fri 00:29>
#+ABBRLINK: 468144f4
#+CATEGORIES: Android Things 學習筆記 (Raspberry Pi 3)
#+AUTHOR: coldnew
#+EMAIL: coldnew.tw@gmail.com


#+LINK: ats https://developer.android.com/things/index.html

在 [[http://coldnew.github.io/8e801cc4/][Android Things 學習筆記: Raspberry Pi 3 安裝 OS]] 一文中我們搞定了 [[ats][Android Things]] 在 Raspberry Pi 3 上的安裝，終於可以開始來寫我們的程式了。

這邊文章讓我們來小試身手，透過 GPIO 的輸出來控制外接於 Raspberry Pi 3 上的 LED 燈。

#+HTML: <!--more-->

* 使用設備

要完成本篇文章所描述的部份，你需要以下幾種器材

- Raspberry Pi 3

- LED (紅)

- 電阻 (150 Ω, 1/4W)

- 麵包板

- 單蕊線或跳線

* 硬體線路

下面的硬體線路使用 [[http://fritzing.org/][Fritzing]] 軟體來繪製，我選用 =GPIO21= 來當作提供給 LED 的電源端，由於 Raspberry Pi 3 的 GPIO 輸出為 =3.3V DC= 的電壓，稍微再加個 =150 Ω= 的電阻來保護我們的 LED 以及 Raspberry Pi 3。
([[file:Android-Things-學習筆記-GPIO-輸出控制/rpi3_schematics.fzz][下載設計檔案]])

#+BEGIN_QUOTE
*注意到電阻值可能會依據你的 LED 不同而改變*
#+END_QUOTE
#+HTML: <br>

#+HTML: <div class="row "><div class="col-md-6 ">

*麵包板連線*

[[file:Android-Things-學習筆記-GPIO-輸出控制/rpi3_schematics_bb.png]]


#+HTML: </div><div class="col-md-5">

*電路連接*

[[file:Android-Things-學習筆記-GPIO-輸出控制/rpi3_schematics.png]]

#+HTML: </div> </div>

Raspberry Pi 3 與 GPIO 編號的對應關係，可以參考 [[https://www.element14.com/community/docs/DOC-73950/l/raspberry-pi-3-model-b-gpio-40-pin-block-pinout][Element14]] 所提供的圖表，這邊我將我用到的用紅線框出

#+ATTR_HTML: :width 40%
[[file:Android-Things-學習筆記-GPIO-輸出控制/pi3_gpio.png]]

* 建立專案

  由於這是我們的第一個專案，就不透過 [[https://github.com/androidthings/new-project-template][androidthings/new-project-template]] 這個範例樣板來建立我們的專案，讓我們透過 [[https://developer.android.com/studio/index.html][Android Studio]] 來一步一步開始吧。

  不過建立新專案之前，記得先透過 [[https://developer.android.com/tools/help/adb.html][adb]] 連上你的 Raspberry Pi 3

  #+BEGIN_EXAMPLE
    coldnew@osx ~ $ adb connect Android.local
  #+END_EXAMPLE

  首先先打開 [[https://developer.android.com/studio/index.html][Android Studio]]

  [[file:Android-Things-學習筆記-GPIO-輸出控制/a1.png]]

  接下來命名我們的專案叫做 =Hello Things=

  [[file:Android-Things-學習筆記-GPIO-輸出控制/a2.png]]

  在選擇 =Minimum SDK= 的時候，記得要選擇 =API 24= 或是以上的版本

  [[file:Android-Things-學習筆記-GPIO-輸出控制/a3.png]]

  選擇 =Empty Activity=

  [[file:Android-Things-學習筆記-GPIO-輸出控制/a4.png]]

  好了後，按下 =Finish= 即可

  [[file:Android-Things-學習筆記-GPIO-輸出控制/a5.png]]

* 修改專案

** build.gradle

  建立好專案後，我們首先要修改 =build.gradle= 並加入 Android Things 的依賴

  #+BEGIN_SRC java
    dependencies {
        //  ...
        provided 'com.google.android.things:androidthings:0.3-devpreview'
    }
  #+END_SRC

  如果你不知道要放在哪裡，請參考下圖

  [[file:Android-Things-學習筆記-GPIO-輸出控制/b1.png]]

** AndroidManifest.xml

   接下來在你的 =AndroidManifest.xml= 加入以下東西，我們要讓這個程式可以一開機就啟動

   #+BEGIN_SRC diff
     --- a/AndroidManifest.xml  2017-05-11 22:13:00.000000000 +0800
     +++ b/AndroidManifest.xml  2017-05-11 22:13:34.000000000 +0800
     @@ -5,6 +5,9 @@
          <application android:allowBackup="true" android:icon="@mipmap/ic_launcher"
              android:label="@string/app_name" android:roundIcon="@mipmap/ic_launcher_round"
              android:supportsRtl="true" android:theme="@style/AppTheme">
     +
     +      <uses-library android:name="com.google.android.things"/>
     +
              <activity android:name=".MainActivity">
                  <intent-filter>
                      <action android:name="android.intent.action.MAIN" />
     @@ -12,6 +15,14 @@
                      <category android:name="android.intent.category.LAUNCHER" />
                  </intent-filter>
              </activity>
     +
     +        <!-- Launch activity automatically on boot -->
     +        <intent-filter>
     +            <action android:name="android.intent.action.MAIN"/>
     +            <category android:name="android.intent.category.IOT_LAUNCHER"/>
     +            <category android:name="android.intent.category.DEFAULT"/>
     +        </intent-filter>
     +
          </application>

      </manifest>
   #+END_SRC

   如果你不知道要放在哪裡，請參考下圖

   [[file:Android-Things-學習筆記-GPIO-輸出控制/b2.png]]

* 點亮 LED 燈

  是時候來撰寫我們的程式了，讓我們來打開 =hellothings/MainActivity.java= 檔案吧!!

  首先回顧前面的定義，我們希望可以控制 =GPIO21= 來點亮 LED 燈，因此首先在 =MainActivity= 這個 class 加入我們的一些設定

  #+BEGIN_SRC java
    private static final String TAG = "HelloThings";
    private static final String LED = "BCM21";

    private Gpio mLedGpio;          // com.google.android.things.pio.Gpio;
  #+END_SRC

  接下來將 =onCreate= 修改成以下，我們讓他打開 =GPIO21= 並將其設定成 =輸出為 1= 的接腳

  #+BEGIN_SRC java
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // com.google.android.things.pio.PeripheralManagerService;
        PeripheralManagerService service = new PeripheralManagerService();
        Log.d(TAG, "Available GPIOs: " + service.getGpioList()); // android.util.Log;

        try {
            mLedGpio = service.openGpio(LED);
            mLedGpio.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);
            mLedGpio.setValue(true);
            Log.i(TAG, "Start blinking LED by GPIO21");
        } catch (IOException e) {
            Log.e(TAG, "Error on PeripheralIO API", e);
        }
    }
  #+END_SRC

  由於我們在 =onCreate= 時打開了 =GPIO21= ，因此要記得在 =onDestroy= 將他關閉

  #+BEGIN_SRC java
    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.i(TAG, "Closing LED GPIO21 pin");
        try {
            mLedGpio.close();
        } catch (IOException e) {
            Log.e(TAG, "Error on PeripheralIO API", e);
        } finally {
            mLedGpio = null;
        }
    }
  #+END_SRC

  嘗試執行當前的程式看看，你應該會看到你接在麵包板的 LED 亮了起來，接下來讓我們修改一下程式，讓他變成閃爍燈吧~

  [[file:Android-Things-學習筆記-GPIO-輸出控制/c1.png]]

* 閃爍吧 LED

  成功點亮 LED 後，我們接下來要讓他進行閃爍囉。

  延續上面的專案，首先在  =MainActivity= 這個 class 加入我們要閃爍多久，以及 Handler 的宣告

  #+BEGIN_SRC java
    private static final int INTERVAL_BETWEEN_BLINKS_MS = 1000;

    private Handler mHandler = new Handler(); // android.os.Handler
  #+END_SRC

  接著在剛剛設定 GPIO 輸出值的後面，設定我們的 Handler 函式

  #+BEGIN_SRC java
    try {
         mLedGpio = service.openGpio(LED);
         mLedGpio.setDirection(Gpio.DIRECTION_OUT_INITIALLY_LOW);
         mLedGpio.setValue(true);
         Log.i(TAG, "Start blinking LED by GPIO21");
         mHandler.post(mBlinkRunnable); // <------  Add this
         } catch (IOException e) {
             Log.e(TAG, "Error on PeripheralIO API", e);
    }
  #+END_SRC

  並在後面完成我們的 =mBlinkRunnable= 實作

  #+BEGIN_SRC java
    private Runnable mBlinkRunnable = new Runnable() {
        @Override
        public void run() {
            if (mLedGpio == null) {
                return;
            }
            try {
                mLedGpio.setValue(!mLedGpio.getValue());  // Toggle the GPIO state
                Log.d(TAG, "GPIO21 set to " + mLedGpio.getValue());
                mHandler.postDelayed(mBlinkRunnable, INTERVAL_BETWEEN_BLINKS_MS);
            } catch (IOException e) {
                Log.e(TAG, "Error on PeripheralIO API", e);
            }
        }
    };
  #+END_SRC

  在這邊，我們透過了 [[https://developer.android.com/reference/java/lang/Runnable.html][java.lang.Runnable]] 去建立我們的執行緒，而在裡面則透過取得當前的 GPIO 數值將其反向，從而另 LED 閃爍。如果你想要閃爍快一點，可以修改前面宣告的 =INTERVAL_BETWEEN_BLINKS_MS= 變數。

  由於我們使用了 [[https://developer.android.com/reference/android/os/Handler.html][android.os.Handler]] ，記得要在 =onDestroy= 時候幹掉他

  #+BEGIN_SRC java
    @Override
    protected void onDestroy() {
        super.onDestroy();
        mHandler.removeCallbacks(mBlinkRunnable); // <---- Add this
        Log.i(TAG, "Closing LED GPIO21 pin");
        try {
            mLedGpio.close();
        } catch (IOException e) {
            Log.e(TAG, "Error on PeripheralIO API", e);
        } finally {
            mLedGpio = null;
        }
    }
  #+END_SRC

* 結果

  如果你有照著本文接線並執行程式的話，你應該會得到以下這樣的結果 ~

  [[file:Android-Things-學習筆記-GPIO-輸出控制/blink.gif]]

* 取得程式碼

本文的範例已經放置於 [[https://github.com/coldnew/HelloThings][GitHub]] 上，你可以直接透過 git 去取得完整專案原始碼

#+BEGIN_EXPORT HTML
<div class="github-card" data-github="coldnew/HelloThings" data-width="400" data-height="" data-theme="default"></div>
<script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>
#+END_EXPORT

* 參考資料

- [[http://www.survivingwithandroid.com/2016/03/arduino-led-control-android-app.html][Arduino Led: Control RGB Led remotely using Arduino and Android app]]

- [[https://androidthings.rocks/2017/01/08/your-first-blinking-led/][Your first blinking LED with Android Things]]

* 完整資訊                                                         :noexport:

- [[https://developer.android.com/things/hardware/raspberrypi.html][Android Things: Raspberry Pi 3 Getting Started]]

- [[https://medium.com/@abhi007tyagi/android-things-led-control-via-mqtt-b7509576c135][Android Things — LED control via MQTT – Abhinav Tyagi – Medium]]
  - [[https://android.jlelse.eu/getting-started-with-android-things-b73be3295b42][Getting started with Android Things – AndroidPub]]

  - [[https://www.twilio.com/blog/2017/01/getting-started-with-android-things.html][Getting started with Android Things]]

  - [[https://medium.com/@lolevsky/android-things-firebase-and-a-little-more-9891e8ad88ce][Android things, Firebase and a little more – Leonid Olevsky – Medium]]

  - [[http://events.linuxfoundation.org/sites/events/files/slides/android-things-internals-170223.pdf][android-things-internals-170223.pdf]]

  - [[https://makerdiary.co/android-things-at-raspberry-pi-3/][Android Things 開發體驗 @ Raspberry Pi 3]]

  - [[https://github.com/amitshekhariitbhu/awesome-android-things][amitshekhariitbhu/awesome-android-things: A curated list of awesome android things tutorials, libraries and much more at one place]]

  - [[http://www.codedata.com.tw/java/att01/][Android Things Tutorial（一）Hello! Android Things! by Michael | CodeData]]

* 補充: 本文的截圖方式                                             :noexport:

: adb root

: adb pull /dev/graphics/fb0 screenshot

: ffmpeg -f rawvideo -pix_fmt rgb565 -s 1280x800 -i screenshot screenshot.png

[[http://stackoverflow.com/questions/41534666/android-things-take-a-screenshot][adb - Android Things: take a screenshot - Stack Overflow]]