#+TITLE: Project Euler 練習
#+ABBRLINK: e71fca4a
#+DATE: <2015-10-15 Thu 15:55>
#+UPDATED: <2015-10-15 Thu 15:55>
#+CATEGORIES: 程式練習
#+ALIAS:  pratice/project_euler_clojure/index.html
#+TAGS: clojure
#+LANGUAGE: zh-tw
#+OPTIONS: num:nil feed:nil ^:t
#+STARTUP: logdone

[[https://projecteuler.net/][Project Euler]] 是一個很不錯的程式練習網站，和 [[https://leetcode.com/][LeetCode]] 相比起來，Project Euler 的
題目比較偏向數學，也就是只要你數學不錯，用紙筆也是可以進行解題。對於工程師來說，
數學的磨練是不可以停止的，因此我重新紀錄我解 Project Euler 題目的經過。

在這邊我使用 Clojure 來進行解題，你可以在 [[https://github.com/coldnew/project-euler-clojure][這裡]] 找到完整程式碼，大部分的程式都盡
可能用 =函數式= 的方式來解決。

#+HTML: <!--more-->

* 001: Multiples of 3 and 5

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get
3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

#+HTML: <br><br> <div class="text-center">
#+ATTR_HTML: :class btn btn-default :onclick blog.cmds.toggle_visible('p001')
點我顯示/隱藏內容
#+HTML: </div><br><br>

#+HTML: <div id="p001" style="display:none">

#+BEGIN_QUOTE
233168
#+END_QUOTE
#+HTML: <br>

題目要求的是找出 0 ~ 1000 中所有 3 或是 5 的倍數的總和，因此我們需要一個函式去判
斷輸入數值是否為 3 或 5 的倍數。

接下來產生 1 ~ 1000 的序列 (sequence)，並透過 map reduce 的方式即可取得相加結果。

#+BEGIN_SRC clojure
  (defn is-multiples-of-3-or-5?
    [x]
    (if (or (zero? (mod x 3))
            (zero? (mod x 5)))
      x 0))

  (reduce + (map is-multiples-of-3-or-5? (range 1 1000)))
  ;; => 233168
#+END_SRC

另外一種解法則是，我們找出所有 3 的倍數進行相加並加上所有 5 的倍數，由於這個過程
中會多加上一組 (3 * 5) 的倍數，因此把剛剛的結果減掉 15 的倍數們即是答案了。

也就是如下公式這樣的計算:

#+BEGIN_SRC latex :results raw :file Project-Euler-練習/p001.png
  \begin{equation*}
  sum(n) = \sum_{i=1}^{\left [ \frac{n}{3} \right ]}3i + \sum_{i=1}^{\left [ \frac{n}{5} \right ]}5i - \sum_{i=1}^{\left [ \frac{n}{15} \right ]}15i
  \end{equation*}
#+END_SRC

#+RESULTS:
[[file:Project-Euler-練習/p001.png]]

所以我們就可以用這種方式獲得答案

#+BEGIN_SRC clojure
  (-
   (+ (reduce + (range 3 1000 3))
      (reduce + (range 5 1000 5)))
   (reduce + (range 15 1000 15)))
  ;; => 233168
#+END_SRC

#+HTML: </div><br><br><br><br><br><br><br><br><br><br><br>

* 002: Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.


#+HTML: <br><br> <div class="text-center">
#+ATTR_HTML: :class btn btn-default :onclick blog.cmds.toggle_visible('p002')
點我顯示/隱藏內容
#+HTML: </div><br><br>

#+HTML: <div id="p002" style="display:none">

#+BEGIN_QUOTE
4613732
#+END_QUOTE
#+HTML: <br>

題目要求我們計算 Fibonacci 數列數值小於 4,000,000 裡面的偶數總和，因此我們需要有
一個方式去計算 Fibonacci 數列，這裡使用一個 fib-1 去產生 lazy sequence:

#+BEGIN_SRC clojure
  (def fib-1
    (->> [0 1]
         (iterate (fn [[a b]] [b (+ a b)]))
         (map first)))

  (take 10 fib-1) ; => (0 1 1 2 3 5 8 13 21 34)
#+END_SRC

既然有了 lazy sequence, 接著我們就可以使用 MapReduce 的方式去查找這整個序列
(sequence) 裡面為偶數並小於 4,000,000 的數值，然後相加。

#+BEGIN_SRC clojure
  (reduce + (map (fn [x]
                   (if (and (> 4000000 x) (even? x))
                     x 0))
                 (take 1000000 fib-1))) ; => 4613732
#+END_SRC

另外一種更強大的 Fibonacci 數列的寫法則是參照 [[http://squirrel.pl/blog/2010/07/26/corecursion-in-clojure/][Corecursion in Clojure]] 一文的作法，
使用 [[https://clojuredocs.org/clojure.core/lazy-cat][lazy-cat]] 去產生 lazy sequence

#+BEGIN_SRC clojure
  (def fib-2
    (lazy-cat [0 1] (map + fib-2 (rest fib-2))))

  (take 10 fib-2) ; => (0 1 1 2 3 5 8 13 21 34)
#+END_SRC

接著換個方式，使用 [[https://clojuredocs.org/clojure.core/reduce][reduce]] 搭配 [[https://clojuredocs.org/clojure.core/filter][filter]] 以及 [[https://clojuredocs.org/clojure.core/take-while][take-while]] 去取得題目要求的結果:

#+BEGIN_SRC clojure
  (reduce +
          (filter even?
                  (take-while #(< % 4000000) fib-2))) ; => 4613732
#+END_SRC

#+HTML: </div><br><br><br><br><br><br><br><br><br><br><br>

* TODO 003: Largest prime factor                                   :noexport:

#+BEGIN_QUOTE
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
#+END_QUOTE


#+HTML: <br><br> <div class="text-center">
#+ATTR_HTML: :class btn btn-default :onclick blog.cmds.toggle_visible('p003')
點我顯示/隱藏內容
#+HTML: </div><br><br>

#+HTML: <div id="p003" style="display:none">

#+BEGIN_SRC clojure
  (defn find-prime-factor
    [x]
    (remove zero?
            (map (fn [a]
                   (if (zero? (mod x a))
                     a 0))
                 (range 2 x))))
#+END_SRC

#+HTML: </div><br><br><br><br><br><br><br><br><br><br><br>

* 013: Large sum

Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

#+BEGIN_EXAMPLE
   37107287533902102798797998220837590246510135740250
   46376937677490009712648124896970078050417018260538
   74324986199524741059474233309513058123726617309629
   91942213363574161572522430563301811072406154908250
   23067588207539346171171980310421047513778063246676
   89261670696623633820136378418383684178734361726757
   28112879812849979408065481931592621691275889832738
   44274228917432520321923589422876796487670272189318
   47451445736001306439091167216856844588711603153276
   70386486105843025439939619828917593665686757934951
   62176457141856560629502157223196586755079324193331
   64906352462741904929101432445813822663347944758178
   92575867718337217661963751590579239728245598838407
   58203565325359399008402633568948830189458628227828
   80181199384826282014278194139940567587151170094390
   35398664372827112653829987240784473053190104293586
   86515506006295864861532075273371959191420517255829
   71693888707715466499115593487603532921714970056938
   54370070576826684624621495650076471787294438377604
   53282654108756828443191190634694037855217779295145
   36123272525000296071075082563815656710885258350721
   45876576172410976447339110607218265236877223636045
   17423706905851860660448207621209813287860733969412
   81142660418086830619328460811191061556940512689692
   51934325451728388641918047049293215058642563049483
   62467221648435076201727918039944693004732956340691
   15732444386908125794514089057706229429197107928209
   55037687525678773091862540744969844508330393682126
   18336384825330154686196124348767681297534375946515
   80386287592878490201521685554828717201219257766954
   78182833757993103614740356856449095527097864797581
   16726320100436897842553539920931837441497806860984
   48403098129077791799088218795327364475675590848030
   87086987551392711854517078544161852424320693150332
   59959406895756536782107074926966537676326235447210
   69793950679652694742597709739166693763042633987085
   41052684708299085211399427365734116182760315001271
   65378607361501080857009149939512557028198746004375
   35829035317434717326932123578154982629742552737307
   94953759765105305946966067683156574377167401875275
   88902802571733229619176668713819931811048770190271
   25267680276078003013678680992525463401061632866526
   36270218540497705585629946580636237993140746255962
   24074486908231174977792365466257246923322810917141
   91430288197103288597806669760892938638285025333403
   34413065578016127815921815005561868836468420090470
   23053081172816430487623791969842487255036638784583
   11487696932154902810424020138335124462181441773470
   63783299490636259666498587618221225225512486764533
   67720186971698544312419572409913959008952310058822
   95548255300263520781532296796249481641953868218774
   76085327132285723110424803456124867697064507995236
   37774242535411291684276865538926205024910326572967
   23701913275725675285653248258265463092207058596522
   29798860272258331913126375147341994889534765745501
   18495701454879288984856827726077713721403798879715
   38298203783031473527721580348144513491373226651381
   34829543829199918180278916522431027392251122869539
   40957953066405232632538044100059654939159879593635
   29746152185502371307642255121183693803580388584903
   41698116222072977186158236678424689157993532961922
   62467957194401269043877107275048102390895523597457
   23189706772547915061505504953922979530901129967519
   86188088225875314529584099251203829009407770775672
   11306739708304724483816533873502340845647058077308
   82959174767140363198008187129011875491310547126581
   97623331044818386269515456334926366572897563400500
   42846280183517070527831839425882145521227251250327
   55121603546981200581762165212827652751691296897789
   32238195734329339946437501907836945765883352399886
   75506164965184775180738168837861091527357929701337
   62177842752192623401942399639168044983993173312731
   32924185707147349566916674687634660915035914677504
   99518671430235219628894890102423325116913619626622
   73267460800591547471830798392868535206946944540724
   76841822524674417161514036427982273348055556214818
   97142617910342598647204516893989422179826088076852
   87783646182799346313767754307809363333018982642090
   10848802521674670883215120185883543223812876952786
   71329612474782464538636993009049310363619763878039
   62184073572399794223406235393808339651327408011116
   66627891981488087797941876876144230030984490851411
   60661826293682836764744779239180335110989069790714
   85786944089552990653640447425576083659976645795096
   66024396409905389607120198219976047599490197230297
   64913982680032973156037120041377903785566085089252
   16730939319872750275468906903707539413042652315011
   94809377245048795150954100921645863754710598436791
   78639167021187492431995700641917969777599028300699
   15368713711936614952811305876380278410754449733078
   40789923115535562561142322423255033685442488917353
   44889911501440648020369068063960672322193204149535
   41503128880339536053299340368006977710650566631954
   81234880673210146739058568557934581403627822703280
   82616570773948327592232845941706525094512325230608
   22918802058777319719839450180888072429661980811197
   77158542502016545090413245809786882778948721859617
   72107838435069186155435662884062257473692284509516
   20849603980134001723930671666823555245252804609722
   53503534226472524250874054075591789781264330331690

#+END_EXAMPLE

#+HTML: <br><br> <div class="text-center">
#+ATTR_HTML: :class btn btn-default :onclick blog.cmds.toggle_visible('p013')
點我顯示/隱藏內容
#+HTML: </div><br><br>

#+HTML: <div id="p013" style="display:none">

#+BEGIN_QUOTE
5537376230
#+END_QUOTE
#+HTML: <br>

這一題其實就是在這一大串數字前面加上 =+= 然後補上括號以後，這些數字就相加完畢了，
我們只要傷腦筋要怎要取得前面 10 個數字，這裡使用偷懶的方式: 將數值轉換成字串，取
得字串的前 10 個字元，這樣這一題就解決了！

#+BEGIN_SRC clojure
  (defn first-10-digits
    [x]
    (subs (str x) 0 10))

  (first-10-digits 123456789012345) ; => 1234567890
#+END_SRC

因此就可以這樣計算:

#+BEGIN_SRC clojure
(first-10-digits
 (+
  37107287533902102798797998220837590246510135740250
  46376937677490009712648124896970078050417018260538
  74324986199524741059474233309513058123726617309629
  91942213363574161572522430563301811072406154908250
  23067588207539346171171980310421047513778063246676
  89261670696623633820136378418383684178734361726757
  28112879812849979408065481931592621691275889832738
  44274228917432520321923589422876796487670272189318
  47451445736001306439091167216856844588711603153276
  70386486105843025439939619828917593665686757934951
  62176457141856560629502157223196586755079324193331
  64906352462741904929101432445813822663347944758178
  92575867718337217661963751590579239728245598838407
  58203565325359399008402633568948830189458628227828
  80181199384826282014278194139940567587151170094390
  35398664372827112653829987240784473053190104293586
  86515506006295864861532075273371959191420517255829
  71693888707715466499115593487603532921714970056938
  54370070576826684624621495650076471787294438377604
  53282654108756828443191190634694037855217779295145
  36123272525000296071075082563815656710885258350721
  45876576172410976447339110607218265236877223636045
  17423706905851860660448207621209813287860733969412
  81142660418086830619328460811191061556940512689692
  51934325451728388641918047049293215058642563049483
  62467221648435076201727918039944693004732956340691
  15732444386908125794514089057706229429197107928209
  55037687525678773091862540744969844508330393682126
  18336384825330154686196124348767681297534375946515
  80386287592878490201521685554828717201219257766954
  78182833757993103614740356856449095527097864797581
  16726320100436897842553539920931837441497806860984
  48403098129077791799088218795327364475675590848030
  87086987551392711854517078544161852424320693150332
  59959406895756536782107074926966537676326235447210
  69793950679652694742597709739166693763042633987085
  41052684708299085211399427365734116182760315001271
  65378607361501080857009149939512557028198746004375
  35829035317434717326932123578154982629742552737307
  94953759765105305946966067683156574377167401875275
  88902802571733229619176668713819931811048770190271
  25267680276078003013678680992525463401061632866526
  36270218540497705585629946580636237993140746255962
  24074486908231174977792365466257246923322810917141
  91430288197103288597806669760892938638285025333403
  34413065578016127815921815005561868836468420090470
  23053081172816430487623791969842487255036638784583
  11487696932154902810424020138335124462181441773470
  63783299490636259666498587618221225225512486764533
  67720186971698544312419572409913959008952310058822
  95548255300263520781532296796249481641953868218774
  76085327132285723110424803456124867697064507995236
  37774242535411291684276865538926205024910326572967
  23701913275725675285653248258265463092207058596522
  29798860272258331913126375147341994889534765745501
  18495701454879288984856827726077713721403798879715
  38298203783031473527721580348144513491373226651381
  34829543829199918180278916522431027392251122869539
  40957953066405232632538044100059654939159879593635
  29746152185502371307642255121183693803580388584903
  41698116222072977186158236678424689157993532961922
  62467957194401269043877107275048102390895523597457
  23189706772547915061505504953922979530901129967519
  86188088225875314529584099251203829009407770775672
  11306739708304724483816533873502340845647058077308
  82959174767140363198008187129011875491310547126581
  97623331044818386269515456334926366572897563400500
  42846280183517070527831839425882145521227251250327
  55121603546981200581762165212827652751691296897789
  32238195734329339946437501907836945765883352399886
  75506164965184775180738168837861091527357929701337
  62177842752192623401942399639168044983993173312731
  32924185707147349566916674687634660915035914677504
  99518671430235219628894890102423325116913619626622
  73267460800591547471830798392868535206946944540724
  76841822524674417161514036427982273348055556214818
  97142617910342598647204516893989422179826088076852
  87783646182799346313767754307809363333018982642090
  10848802521674670883215120185883543223812876952786
  71329612474782464538636993009049310363619763878039
  62184073572399794223406235393808339651327408011116
  66627891981488087797941876876144230030984490851411
  60661826293682836764744779239180335110989069790714
  85786944089552990653640447425576083659976645795096
  66024396409905389607120198219976047599490197230297
  64913982680032973156037120041377903785566085089252
  16730939319872750275468906903707539413042652315011
  94809377245048795150954100921645863754710598436791
  78639167021187492431995700641917969777599028300699
  15368713711936614952811305876380278410754449733078
  40789923115535562561142322423255033685442488917353
  44889911501440648020369068063960672322193204149535
  41503128880339536053299340368006977710650566631954
  81234880673210146739058568557934581403627822703280
  82616570773948327592232845941706525094512325230608
  22918802058777319719839450180888072429661980811197
  77158542502016545090413245809786882778948721859617
  72107838435069186155435662884062257473692284509516
  20849603980134001723930671666823555245252804609722
  53503534226472524250874054075591789781264330331690)) ; => 5537376230
#+END_SRC

#+HTML: </div><br><br><br><br><br><br><br><br><br><br><br>

* TODO 048: Self powers                                            :noexport:

#+BEGIN_VERSE
The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.

Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
#+END_VERSE

#+HTML: <br><br> <div class="text-center">
#+ATTR_HTML: :class btn btn-default :onclick blog.cmds.toggle_visible('p000')
點我顯示/隱藏內容
#+HTML: </div><br><br>

#+HTML: <div id="p000" style="display:none">

#+BEGIN_QUOTE

#+END_QUOTE
#+HTML: <br>


#+HTML: </div><br><br><br><br><br><br><br><br><br><br><br>

* TEMPLATE                                                         :noexport:

#+BEGIN_QUOTE
#+END_QUOTE


#+HTML: <br><br> <div class="text-center">
#+ATTR_HTML: :class btn btn-default :onclick blog.cmds.toggle_visible('p000')
點我顯示/隱藏內容
#+HTML: </div><br><br>

#+HTML: <div id="p000" style="display:none">

#+BEGIN_QUOTE
answer
#+END_QUOTE
#+HTML: <br>


#+HTML: </div><br><br><br><br><br><br><br><br><br><br><br>
