<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>coldnew&amp;#39;s blog</title>
    <link>https://coldnew.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 08 Dec 2018 10:47:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>UltraZed-EG PCIe Carrier Card 開發紀錄: 使用 PetaLinux 建立系統</title>
      <link>https://coldnew.github.io/b394a9ce/</link>
      <guid>https://coldnew.github.io/b394a9ce/</guid>
      <pubDate>Thu, 06 Dec 2018 05:20:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在了解了如何透過 Vivado 搭配 Xilinx SDK 來控制 Cortex-A53 和 Cortex-R5 後，是時候把 Linux 裝上來啦。
&lt;/p&gt;

&lt;p&gt;
針對不同嵌入式環境的需求，Xlinux 針對他們自己的平台，提供了基於 &lt;a href=&quot;http://www.yoctoproject.org/&quot;&gt;Yocto Project&lt;/a&gt; 製作的發行板製作工具，並命名為 &lt;a href=&quot;https://www.xilinx.com/products/design-tools/embedded-software/petalinux-sdk.html&quot;&gt;PetaLinux&lt;/a&gt; 。這篇文章將介紹如何使用基本的 &lt;a href=&quot;https://www.xilinx.com/products/design-tools/embedded-software/petalinux-sdk.html&quot;&gt;PetaLinux&lt;/a&gt; 功能，並建立一個可開機的映像檔 (Image) 讓 &lt;a href=&quot;http://ultrazed.org/product/ultrazed-eg-pcie-carrier-card&quot;&gt;UltraZed-EG PCIe Carrier Card&lt;/a&gt; 開機並進入到 Linux 系統。
&lt;/p&gt;

&lt;p&gt;
(本文以 &lt;code&gt;Vivado 2018.2&lt;/code&gt; 以及 &lt;code&gt;PetaLinux 2018.2&lt;/code&gt; 進行開發)
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/b394a9ce/#disqus_thread</comments>
    </item>
    
    <item>
      <title>UltraZed-EG PCIe Carrier Card 開發紀錄: Hello Cortex-R5</title>
      <link>https://coldnew.github.io/7006a3f7/</link>
      <guid>https://coldnew.github.io/7006a3f7/</guid>
      <pubDate>Wed, 05 Dec 2018 02:37:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/501bf2ae/&quot;&gt;UltraZed-EG PCIe Carrier Card 開發紀錄: Hello Cortex-A53&lt;/a&gt; 中我們題到了如何透過 Vivado 去建立我們的專案，讓 &lt;a href=&quot;http://ultrazed.org/product/ultrazed-eg-pcie-carrier-card&quot;&gt;UltraZed-EG PCIe Carrier Card&lt;/a&gt; 上的處理器系統 (Processing Syste, PS) 裡面的 Cortex-A53 可以透過 &lt;code&gt;AXI_GPIO&lt;/code&gt; 去對可程式邏輯區 (Programmable Logic, PL) 端的 LEDs D12 ~ D19 進行輸出的控制。
&lt;/p&gt;

&lt;p&gt;
在這篇文章，我們要講的則是如何透過 &lt;code&gt;AXI_GPIO&lt;/code&gt; 來處理 &lt;code&gt;輸入&lt;/code&gt; 的控制，並讓 Cortex-R5 根據不同的輸入，在 &lt;code&gt;ps_uart1&lt;/code&gt; 輸出不同的訊息，以及控制不同的 LED 亮暗。
&lt;/p&gt;

&lt;p&gt;
(本文以 &lt;code&gt;Vivado 2018.2&lt;/code&gt; 進行開發)
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/7006a3f7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>UltraZed-EG PCIe Carrier Card 開發紀錄: Hello Cortex-A53</title>
      <link>https://coldnew.github.io/501bf2ae/</link>
      <guid>https://coldnew.github.io/501bf2ae/</guid>
      <pubDate>Wed, 21 Nov 2018 08:27:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/d1be86fb/&quot;&gt;UltraZed-EG PCIe Carrier Card 開發紀錄: 硬體認識&lt;/a&gt; 一文中我們了解了 &lt;a href=&quot;http://ultrazed.org/product/ultrazed-eg-pcie-carrier-card&quot;&gt;UltraZed-EG PCIe Carrier Card&lt;/a&gt; 這一塊開發板的一些資訊後，是時候來開發點專案啦~
&lt;/p&gt;

&lt;p&gt;
在這篇文章中，我們將讓這塊開發板的 Cortex-A53 透過 &lt;code&gt;AXIO_GPIO&lt;/code&gt; 模組，點亮板子上的 LED 燈，並且透過 &lt;code&gt;ps_uart0&lt;/code&gt; 輸出一些訊息。
&lt;/p&gt;

&lt;p&gt;
(本文以 &lt;code&gt;Vivado 2018.2&lt;/code&gt; 進行開發)
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/501bf2ae/#disqus_thread</comments>
    </item>
    
    <item>
      <title>STM32F746 Discovery 開發紀錄: ST-LINK/V2 韌體更新</title>
      <link>https://coldnew.github.io/1864ad14/</link>
      <guid>https://coldnew.github.io/1864ad14/</guid>
      <pubDate>Fri, 16 Nov 2018 01:49:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
由於我們很久沒有使用這一片  &lt;a href=&quot;https://www.st.com/content/st_com/en/products/evaluation-tools/product-evaluation-tools/mcu-eval-tools/stm32-mcu-eval-tools/stm32-mcu-discovery-kits/32f746gdiscovery.html#design-scroll&quot;&gt;STM32F746 Discovery&lt;/a&gt; 開發板，因此最好先更新一下他的 ST-LINK/V2 的驅動。
&lt;/p&gt;

&lt;p&gt;
本文紀錄如何在 Linux 下更新 ST-LINK/V2 驅動的方式。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/1864ad14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>UltraZed-EG PCIe Carrier Card 開發紀錄: 讓 Vivado 有 UltraZed-EG PCIe Carrier Card 的設定檔</title>
      <link>https://coldnew.github.io/2c97574c/</link>
      <guid>https://coldnew.github.io/2c97574c/</guid>
      <pubDate>Mon, 05 Nov 2018 06:06:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在透過 &lt;a href=&quot;http://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt; 去建立新的專案的時候，開發板沒有 &lt;a href=&quot;http://ultrazed.org/product/ultrazed-eg-pcie-carrier-card&quot;&gt;UltraZed-EG PCIe Carrier Card&lt;/a&gt; 的選項可以選，因此我們就必須自己去設定關於其開發板的資訊。
&lt;/p&gt;

&lt;p&gt;
幸好，&lt;a href=&quot;http://ultrazed.org/product/ultrazed-eg-pcie-carrier-card&quot;&gt;UltraZed-EG PCIe Carrier Card&lt;/a&gt; 的開發商 &lt;a href=&quot;https://www.avnet.com&quot;&gt;AVNET&lt;/a&gt; 已經做好這塊開發板的設定檔，並放置到 &lt;a href=&quot;https://github.com/Avnet/bdf&quot;&gt;Avnet/bdf&lt;/a&gt; 這個 repo 中，就讓我們來將它安裝到我們的 Vivado 吧！
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/2c97574c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>UltraZed-EG PCIe Carrier Card 開發紀錄: 硬體認識</title>
      <link>https://coldnew.github.io/d1be86fb/</link>
      <guid>https://coldnew.github.io/d1be86fb/</guid>
      <pubDate>Sun, 26 Aug 2018 05:51:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近入手了 &lt;a href=&quot;http://ultrazed.org/product/ultrazed-eg-pcie-carrier-card&quot;&gt;UltraZed-EG PCIe Carrier Card&lt;/a&gt; ，這是一款基於 &lt;a href=&quot;http://zedboard.org/product/ultrazed-EG&quot;&gt;UltraZed-EG&lt;/a&gt; 核心板進行延伸的開發板，和 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot;&gt;Zybo Board&lt;/a&gt; 類似，是一款同時具有 Xilinx FPGA 並且包含了 ARM CPU 的開發平台。
&lt;/p&gt;

&lt;p&gt;
但是不同的是，此開發板主板採用的核心為 &lt;a href=&quot;https://www.xilinx.com/products/silicon-devices/soc/zynq-ultrascale-mpsoc.html&quot;&gt;Xilinx UltraScale+ MPSoC&lt;/a&gt; ，這一款具有 Cortex-A53 以及 Mali-400 的 FPGA 晶片，補足了 Zynq-7000 缺少 GPU 的不足。
&lt;/p&gt;

&lt;p&gt;
為了了解這塊開發板，我做了一些整理，讓我們一樣從硬體以及週邊開始吧～
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/d1be86fb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 Linux 下掛載 SD 卡映像檔</title>
      <link>https://coldnew.github.io/ff159f7c/</link>
      <guid>https://coldnew.github.io/ff159f7c/</guid>
      <pubDate>Sat, 25 Aug 2018 01:56:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近有需求是要將 Raspbian 之類提供的 SD 卡映像檔 (.img) 裡面的 rootfs 給提出來，因此找了一下不需要將該映像檔燒到實體 SD 卡，而是將其掛載到目錄後再將需要的檔案複製出來的方法。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/ff159f7c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DE2-115 開發紀錄: 在 Linux 下使用 ModelSim</title>
      <link>https://coldnew.github.io/ce6f7a0a/</link>
      <guid>https://coldnew.github.io/ce6f7a0a/</guid>
      <pubDate>Wed, 06 Jun 2018 15:56:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
撰寫完 Verilog 程式後，除了下載到 FPGA 開發板上，我們也可以透過 &lt;a href=&quot;https://www.altera.com/products/design-software/model---simulation/modelsim-altera-software.html&quot;&gt;ModelSim&lt;/a&gt; 來對我們的程式進行波型的模擬。
&lt;/p&gt;

&lt;p&gt;
由於 Altera 的 ModelSim 在 Linux 下運作可能會遇到一些問題導致不能執行，本篇將整理我自己遇到的情況。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/ce6f7a0a/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DE2-115 開發紀錄: 使用樣板建立專案</title>
      <link>https://coldnew.github.io/d70f742b/</link>
      <guid>https://coldnew.github.io/d70f742b/</guid>
      <pubDate>Mon, 04 Jun 2018 15:54:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/4d1ad2ce&quot;&gt;DE2-115 開發紀錄: 透過可程式邏輯控制 LED 閃爍&lt;/a&gt; 一文中我們透過指定 FPGA 型號等資訊來建立我們的專案，那是否可以像是選開發板這樣的方式來建立專案呢?
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/d70f742b/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DE2-115 開發紀錄: 透過可程式邏輯控制 LED 閃爍</title>
      <link>https://coldnew.github.io/4d1ad2ce/</link>
      <guid>https://coldnew.github.io/4d1ad2ce/</guid>
      <pubDate>Mon, 28 May 2018 15:31:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/7a67f04e/&quot;&gt;DE2-115 開發紀錄: 硬體認識&lt;/a&gt; 一文中，我們發現了 DE2-115 上面有一堆 LED 燈可以使用，就讓我們來建立最簡單的專案，並透過撰寫程式來控制這些 LED 燈吧 !
&lt;/p&gt;

&lt;p&gt;
本文將採用業界比較常用的 Verilog 進行示範，在參照這篇文章之前，需要自行安裝好 &lt;a href=&quot;https://www.altera.com/downloads/download-center.html&quot;&gt;Intel® Quartus® Lite Edition&lt;/a&gt; 或是進階版本。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/4d1ad2ce/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DE2-115 開發紀錄: 硬體認識</title>
      <link>https://coldnew.github.io/7a67f04e/</link>
      <guid>https://coldnew.github.io/7a67f04e/</guid>
      <pubDate>Sun, 27 May 2018 13:14:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
手邊有一台早期獲得的 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; ，一直放著積灰塵也不是辦法，再加上最近想多玩玩 FGPA，所以就來重新玩一次吧 :)
&lt;/p&gt;

&lt;p&gt;
和 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot;&gt;Xilinx Zybo Board&lt;/a&gt; 不同，&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; 是只有 FPGA 的開發板，並未包含 ARM Cortex-A9 來作為輔助用的 CPU，對於只想學 FPGA 的人而言，這算是不錯的平台，想要 CPU 的話，就自己寫個 CPU 上去或是用 NIOS-II 軟核 CPU 就好了。
&lt;/p&gt;

&lt;p&gt;
總之，就讓我們來玩玩這一片早期的 FPGA 開發板吧 (想當年這一片可是要台幣 3W 的呢!)
&lt;/p&gt;

&lt;p&gt;
不過在我們開始這一切之前，我們需要稍微了解一下這片開發板以及他的週邊等資訊。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/7a67f04e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>i.MX6SoloX SabreSD 學習筆記: 使用 Yocto 製作開機卡</title>
      <link>https://coldnew.github.io/9cbf4b94/</link>
      <guid>https://coldnew.github.io/9cbf4b94/</guid>
      <pubDate>Fri, 23 Feb 2018 02:33:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近稍微有些時間可以玩玩手邊的 &lt;a href=&quot;https://www.nxp.com/support/developer-resources/hardware-development-tools/sabre-development-system/sabre-board-for-smart-devices-based-on-the-i.mx-6solox-applications-processors:RD-IMX6SX-SABRE&quot;&gt;i.MX6 SabreSD SoloX&lt;/a&gt; 開發板，這是一套採用 i.MX6 Cortex-A9 搭配 Cortex-M4 的 HMP (Heterogeneous multi-processing) 架構的板子。
&lt;/p&gt;

&lt;p&gt;
既然要玩玩看，那就從官方的 &lt;a href=&quot;i.MX_Yocto_Project_User&#39;s_Guide.pdf&quot;&gt;i.MX_Yocto_Project_User&#39;s_Guide.pdf&lt;/a&gt; 開始吧，我們使用 &lt;a href=&quot;https://github.com/Freescale&quot;&gt;Freescale 社群&lt;/a&gt;所提供的開發環境來構件我們自己的 &lt;a href=&quot;https://www.yoctoproject.org/&quot;&gt;Yocto&lt;/a&gt; 系統。
&lt;/p&gt;

&lt;p&gt;
注意到 &lt;a href=&quot;https://github.com/Freescale&quot;&gt;Freescale 社群&lt;/a&gt; 的 Yocto 環境和 Yocto 官方的不太一樣，因此一開始最好還是照著 &lt;a href=&quot;i.MX_Yocto_Project_User&#39;s_Guide.pdf&quot;&gt;i.MX_Yocto_Project_User&#39;s_Guide.pdf&lt;/a&gt;   上的教學走。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/9cbf4b94/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我用來編譯 Yocto 的 Docker 環境</title>
      <link>https://coldnew.github.io/135d6bd2/</link>
      <guid>https://coldnew.github.io/135d6bd2/</guid>
      <pubDate>Thu, 22 Feb 2018 02:23:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近重新整理一下我用來編譯 &lt;a href=&quot;https://www.yocto project&quot;&gt;Yocto Project&lt;/a&gt; 用的 Docker 環境，決定把它拉成獨立的腳本放出，你可以到 &lt;a href=&quot;https://github.com/coldnew/docker-yocto&quot;&gt;coldnew/docker-yocto&lt;/a&gt; 找到 。
&lt;/p&gt;

&lt;p&gt;
為什麼要用 Docker 建立環境來編譯呢?在我這幾年使用 &lt;a href=&quot;https://www.yoctoproject.org/&quot;&gt;Yocto&lt;/a&gt; 的經驗，就是它對於 Host Machine 的依賴性太強。
我自己習慣使用 Gentoo Linux 也因為套件比較新，常常遇到 舊版本的 Yocto 在編譯 Host 端工具之類的，因為找到系統端的依賴然後編譯不過，也因此最省麻煩的方式，還是依照 &lt;a href=&quot;http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html&quot;&gt;Yocto Project Reference Manual&lt;/a&gt; 上面所說的，使用指定的 Linux 發行板。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/135d6bd2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 GnuPG 的時候在 minibuffer 顯示密碼輸入</title>
      <link>https://coldnew.github.io/e7fdea95/</link>
      <guid>https://coldnew.github.io/e7fdea95/</guid>
      <pubDate>Fri, 09 Feb 2018 08:15:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/d3f33ddb/&quot;&gt;在 emacs 中使用 EasyPG 加密文章&lt;/a&gt; 一文中談到了如何在 emacs 裡面對於文章使用 &lt;a href=&quot;https://www.gnupg.org/&quot;&gt;GnuPG&lt;/a&gt; 進行加密。隨著 emacs 已經到了 emacs 25，有些早期的東西可能有些變化，讓我們來談談如何在 emacs 的 mini-buffer 直接輸入 GnuPG 要的密碼，而不需要彈出系統的圖形界面視窗。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/e7fdea95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SPS IPC Drives 2017 紀錄: 工作篇</title>
      <link>https://coldnew.github.io/5eec3a81/</link>
      <guid>https://coldnew.github.io/5eec3a81/</guid>
      <pubDate>Tue, 28 Nov 2017 03:39:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
今年有機會到德國參加 &lt;a href=&quot;https://www.mesago.de/en/SPS&quot;&gt;SPS IPC Drives 2017&lt;/a&gt; 這個歐洲自動化工業展，在逛的過程中剛好看到一些工作徵求資訊，所以就拍一下整理在這邊。
&lt;/p&gt;

&lt;p&gt;
由於這個展覽偏向工業電腦、自動化控制等產業，因此我拍下來的工作資訊基本上大部分都是嵌入式系統相關工作，或是一些純軟的工作。
&lt;/p&gt;

&lt;p&gt;
也因為這個展覽在德國，所以大部分描述都是用德文寫的，適合想要到德國工作的人看看。
&lt;/p&gt;

&lt;p&gt;
以下就是這次拍到的 JD (Job Description), 共 53 張圖片原始檔，所以請讓瀏覽器慢慢下載:
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/5eec3a81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>從 GitHub 直接下載 Clojure 函式庫</title>
      <link>https://coldnew.github.io/f421b76a/</link>
      <guid>https://coldnew.github.io/f421b76a/</guid>
      <pubDate>Wed, 17 May 2017 16:46:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
Clojure 的用戶多半都是透過 &lt;a href=&quot;https://clojars.org/&quot;&gt;Clojars&lt;/a&gt; 去下載需要用的函式庫，但有些時候你需要的函式庫可能作者還沒將該版本放到 &lt;a href=&quot;https://clojars.org/&quot;&gt;Clojars&lt;/a&gt; 上，這種時候該怎麼辦呢？
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/f421b76a/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android Things 學習筆記: GPIO 的輸出控制</title>
      <link>https://coldnew.github.io/468144f4/</link>
      <guid>https://coldnew.github.io/468144f4/</guid>
      <pubDate>Thu, 11 May 2017 15:43:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/8e801cc4/&quot;&gt;Android Things 學習筆記: Raspberry Pi 3 安裝 OS&lt;/a&gt; 一文中我們搞定了 &lt;a href=&quot;https://developer.android.com/things/index.html&quot;&gt;Android Things&lt;/a&gt; 在 Raspberry Pi 3 上的安裝，終於可以開始來寫我們的程式了。
&lt;/p&gt;

&lt;p&gt;
這邊文章讓我們來小試身手，透過 GPIO 的輸出來控制外接於 Raspberry Pi 3 上的 LED 燈。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/468144f4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android Things 學習筆記: Raspberry Pi 3 安裝 OS</title>
      <link>https://coldnew.github.io/8e801cc4/</link>
      <guid>https://coldnew.github.io/8e801cc4/</guid>
      <pubDate>Wed, 10 May 2017 03:42:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/399f19c/&quot;&gt;Android Things 學習筆記: 介紹&lt;/a&gt; 一文我們介紹了 &lt;a href=&quot;https://developer.android.com/things/index.html&quot;&gt;Android Things&lt;/a&gt; ，在我們正式開始開發我們的程式之前，我們先將手邊的 &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 裝上可以用 &lt;a href=&quot;https://developer.android.com/things/index.html&quot;&gt;Android Things&lt;/a&gt; 的映像檔案吧。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/8e801cc4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android Things 學習筆記: 介紹</title>
      <link>https://coldnew.github.io/399f19c/</link>
      <guid>https://coldnew.github.io/399f19c/</guid>
      <pubDate>Tue, 09 May 2017 23:52:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近打算稍微了解一下 Google 在推的 &lt;a href=&quot;https://developer.android.com/things&quot;&gt;Android Things&lt;/a&gt; ，這是一套以 Android 為基礎改製而成的作業系統，目的在於用於現在很夯的物聯網(Internet of Things, IoT) 上。
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/399f19c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 yasnippet 自動插入程式碼樣板</title>
      <link>https://coldnew.github.io/7e10e07e/</link>
      <guid>https://coldnew.github.io/7e10e07e/</guid>
      <pubDate>Wed, 03 May 2017 02:19:00 GMT</pubDate>
      <description>
      
        &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/e10a343/&quot;&gt;用 insert-shebang 自動插入直譯器指令&lt;/a&gt; 一文中我們提到了如何自動對腳本檔案插入 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot;&gt;shebang&lt;/a&gt; ，這次來談談如何透過 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot;&gt;yasnippet&lt;/a&gt; 自動對你的檔案插入你想要的樣板，比如授權資訊 (copyright)、預設標頭檔等等。
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot;&gt;Emacs&lt;/a&gt; 下雖然有其他套件可以完成這種 &lt;code&gt;插入樣板&lt;/code&gt; 的功能，但是既然我們可以透過 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot;&gt;yasnippet&lt;/a&gt; 來辦到，就不需要多學新的樣板標記語言了 :)
&lt;/p&gt;
      
      </description>
      
      <comments>https://coldnew.github.io/7e10e07e/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
