<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>coldnew&amp;#39;s blog</title>
    <link>https://coldnew.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 28 May 2018 07:09:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>DE2-115 開發紀錄: 硬體認識</title>
      <link>https://coldnew.github.io/7a67f04e/</link>
      <guid>https://coldnew.github.io/7a67f04e/</guid>
      <pubDate>Sun, 27 May 2018 13:14:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
手邊有一台早期獲得的 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; ，一直放著積灰塵也不是辦法，再加上最近想多玩玩 FGPA，所以就來重新玩一次吧 :)
&lt;/p&gt;

&lt;p&gt;
和 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx Zybo Board&lt;/a&gt; 不同，&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; 是只有 FPGA 的開發板，並未包含 ARM Cortex-A9 來作為輔助用的 CPU，對於只想學 FPGA 的人而言，這算是不錯的平台，想要 CPU 的話，就自己寫個 CPU 上去或是用 NIOS-II 軟核 CPU 就好了。
&lt;/p&gt;

&lt;p&gt;
總之，就讓我們來玩玩這一片早期的 FPGA 開發板吧 (想當年這一片可是要台幣 3W 的呢!)
&lt;/p&gt;

&lt;p&gt;
不過在我們開始這一切之前，我們需要稍微了解一下這片開發板以及他的週邊等資訊。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
要了解 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; 的相關資訊，我們首先先到他的開發商 &lt;a href=&quot;https://www.terasic.com.tw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;友晶科技&lt;/a&gt; 網站去下載 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt; ，這本手冊會帶領我們了解這平台相關的週邊。
&lt;/p&gt;

&lt;p&gt;
注意到這邊會刻意忽略掉 High Speed Mezzanine Card (HSMC) 接口，因為這個接口除非去買擴展板，不然對一般人而言不會有用到的機會。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org51ebfd1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org51ebfd1&quot;&gt;基本硬體認識&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org51ebfd1&quot;&gt;
&lt;p&gt;
拿到手的 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115&lt;/a&gt; 就像這個樣子，從正面來看:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_144839.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
哇，這片板子週邊有夠多的，難怪不便宜，不過細節我們待會在說吧，先來看看背面還有什麼?
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_145013.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
背後偷偷藏了一顆 EEPROM，未來我們有資料要存放的時候就需要他了！
&lt;/p&gt;

&lt;p&gt;
了解了基本板子週邊後，接下來要來一個一個的研究吧~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6cccb1e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6cccb1e&quot;&gt;方塊圖&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6cccb1e&quot;&gt;
&lt;p&gt;
上面的週邊資訊太複雜了，好在  &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt; 有提供方塊圖 (Block Diagram) 可以讓我們對這平台用的 IC 以及有的功能再進一步的了解
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_152307.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org78fddb1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org78fddb1&quot;&gt;FGPA 核心&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org78fddb1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115&lt;/a&gt; 使用的 FPGA 核心是 &lt;code&gt;Cyclone IV EP4CE115F29&lt;/code&gt; ，是屬於 &lt;a href=&quot;https://www.altera.com/products/fpga/cyclone-series/cyclone-iv/overview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyclone IV&lt;/a&gt; 系列的，當然在一開始玩的時候只需要知道這個是哪個系列，可以裝下多少邏輯閘就夠了。
&lt;/p&gt;

&lt;p&gt;
因此，就讓我們列一下這顆 FPGA 到底有多少能耐:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;114,480 LEs (邏輯單元)&lt;/li&gt;
&lt;li&gt;432 M9K 記憶體模塊&lt;/li&gt;
&lt;li&gt;3,888 K bits 嵌入式存儲器&lt;/li&gt;
&lt;li&gt;4 PLLs (鎖相迴路)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
嗯&amp;#x2026; 看不懂，就只好引用一下 &lt;a href=&quot;https://www.mouser.tw/new/altera/altera-cycloneiv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mouser&lt;/a&gt; 上的圖啦 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_153653.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這邊跳過部份資訊，如果想搞懂關於這顆 FPGA 的描述，包含 LE 是啥啦之類的，推薦看一下 &lt;a href=&quot;http://www.cnblogs.com/logic3/p/5466866.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FPGA 芯片内部硬件介绍&lt;/a&gt; 的說明。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbec215c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbec215c&quot;&gt;JTAG&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbec215c&quot;&gt;
&lt;p&gt;
JTAG 是 DE2-115 上用來下載程式到 FPGA 用的界面，根據設定的不同，我們可以將其分成 JTAG Mode 和 AS-mode，下面就來講解這兩種模式的不同。
&lt;/p&gt;

&lt;p&gt;
簡單的說:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;JTAG mode: 一般下載用，斷電後資料消失。&lt;/li&gt;
&lt;li&gt;AS mode: 下載後，即使斷電資料也會保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd3d402c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgd3d402c&quot;&gt;JTAG mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgd3d402c&quot;&gt;
&lt;p&gt;
JTAG mode 是一般下載用的方式，缺點是斷電後資料不會保存在板子上。如果你想要下載後重新上電可以執行上一次下載的程式的話，請使用 AS mode。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_215436.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
使用 JTAG Mode 的時候，請注意以下步驟:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;接上電源&lt;/li&gt;
&lt;li&gt;設定 SW19 在 &lt;code&gt;RUN&lt;/code&gt; 的位置&lt;/li&gt;
&lt;li&gt;接上 USB type B 線到 USB Blaster 的位置&lt;/li&gt;
&lt;li&gt;透過 QUartus II 選擇適合的位元流 (.sof) 檔案進行下載&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org78936b7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org78936b7&quot;&gt;JTAG AS mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org78936b7&quot;&gt;
&lt;p&gt;
當我們想要斷電再上電後，還可以執行上一次下載的程式的話，這時候就需要透過 AS Mode 來進行。
&lt;/p&gt;

&lt;p&gt;
AS Mode (Active Serial Programming) 會將位元流下載到 &lt;a href=&quot;https://www.altera.com/en_US/pdfs/literature/hb/cfg/cyc_c51014.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EPCS64&lt;/a&gt; 這顆串口 IC，該晶片除了可以透過串口 (Serial) 下載外，同時也是一個儲存裝置，可以存放共 64MB 大小的資料。當電源啟動的時候，DE2-115 會從 &lt;a href=&quot;https://www.altera.com/en_US/pdfs/literature/hb/cfg/cyc_c51014.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EPCS64&lt;/a&gt; 拉取資料，完成 FPGA 的設定，這也是為何 AS Mode 可以在斷電的情況下保持資料的原因。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_215741.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
使用 AS Mode 的時候，請注意以下步驟:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;接上電源&lt;/li&gt;
&lt;li&gt;接上 USB type B 線到 USB Blaster 的位置&lt;/li&gt;
&lt;li&gt;設定 SW19 在 &lt;code&gt;PROG&lt;/code&gt; 的位置&lt;/li&gt;
&lt;li&gt;透過 QUartus II 選擇適合的位元流 (.pof) 檔案下載到 EPCS64&lt;/li&gt;
&lt;li&gt;下載完成後，將 SW19 切換回 &lt;code&gt;RUN&lt;/code&gt; 的位置，這樣會讓 DE2-115 在開機的時候抓取 EPCS64 上的資訊。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0999f52&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0999f52&quot;&gt;JTAG Chain&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org0999f52&quot;&gt;
&lt;p&gt;
除了 JTAG mode 和 AS mode 外，如果我們想要透過 DE2-115 將資訊下載到別的 Altera FPGA 開發板的話，這時候就是使用 JTAG Chain 的時機。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_214634.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
參照上圖，當我們要使用 JTAG Chain 的時候，需要將 JP3 的 pin2 和 pin3 短路，讓 JTAG 訊號可以透過 HSMC 接口出去。
&lt;/p&gt;

&lt;p&gt;
如果 JP3 的 pin1 和 pin2 短路 (預設) ，此時形成一個封閉的迴路，這時候 JTAG 在下載的時候只會偵測到 DE2-115 上的 FPGA 晶片。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbb543ad&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbb543ad&quot;&gt;按鈕&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbb543ad&quot;&gt;
&lt;p&gt;
DE2-115 共有四個按鈕 (Push Button)，這些按鈕都接上了&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%BD%E5%AF%86%E7%89%B9%E8%A7%A6%E5%8F%91%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;施密特觸發器(Schmitt trigger)&lt;/a&gt;來對按鈕去除彈跳 &lt;a href=&quot;http://while-true-loop.blogspot.tw/2009/04/de-bounce.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(debounce)&lt;/a&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_170619.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
也因為已經在電路上做了&lt;a href=&quot;http://while-true-loop.blogspot.tw/2009/04/de-bounce.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;防彈跳功能 (debounce)&lt;/a&gt;，因此在使用這些按鈕的時候我們就不需要透過軟體去濾掉按下按鈕後產生的那些雜訊。
&lt;/p&gt;

&lt;p&gt;
我們可以透過以下的表格，找出 FPGA 對應按鈕的腳位:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_174808.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgce62675&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgce62675&quot;&gt;指撥開關&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgce62675&quot;&gt;
&lt;p&gt;
DE2-115 有 18 個指撥開關 (slide switches)，和按鈕不同的地方在於這些指撥開關並未接上施密特觸發器(Schmitt trigger) ，也因此不具有防彈跳的功能。
&lt;/p&gt;

&lt;p&gt;
當指撥開關並未往上撥的時候，其為低電位，也就是邏輯 0。當往上撥的時候，則會變成高電位，也就是邏輯 1。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_170916.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當如果需要使用指撥開關的時候，我們可能會需要下面這張表來進行 I/O mapping:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_172531.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org20fe6f0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org20fe6f0&quot;&gt;LED&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org20fe6f0&quot;&gt;
&lt;p&gt;
DE2-115 上面共有 27 個 LED, 其中紅色 LED 佔了 18 個，綠色的則是有 9 個
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_171021.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當輸出腳為高電位的時候，會觸發 LED 亮，低電位則是讓 LED 暗。
&lt;/p&gt;

&lt;p&gt;
下面則是 LED 與 I/O 的對應表:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_171538.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org170dfa8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org170dfa8&quot;&gt;七段顯示器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org170dfa8&quot;&gt;
&lt;p&gt;
DE2-115 共有 8 個 &lt;a href=&quot;https://en.wikipedia.org/wiki/Seven-segment_display&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七段顯示器 (7-segment)&lt;/a&gt;，每一個七段顯示器和 Cyclone IV 的連接就像這個樣子:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_172709.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這塊板子上的七段顯示器是採用 &lt;code&gt;共陽極 (Common Anode)&lt;/code&gt; 的形式接上的 (&lt;a href=&quot;http://www.cypress.com/file/132516/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;圖片來源)&lt;/a&gt; ，也因此當我們指定接腳為低電位 (邏輯 0) 的時候，可以將該位置點亮，指定為高電位則是關掉顯示。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_223953.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
具體的 I/O mapping 如下表：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_172858.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org018c090&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org018c090&quot;&gt;時脈源 (Clock Sources)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org018c090&quot;&gt;
&lt;p&gt;
DE2-115 上面掛載了一顆 &lt;code&gt;50MHz&lt;/code&gt; 的有源石英振盪器，而這顆振盪器會經由 &lt;a href=&quot;https://www.diodes.com/assets/Datasheets/PI49FCT3802.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PI49FCT3803 (單端時鐘緩衝器)&lt;/a&gt; 將訊號變成 3 組 50MHz 輸入到 Cyclone IV 的三個輸入源來提供使用者使用。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_224245.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然，如果想要輸入外部的時脈或是將當前的時脈輸出，則可以使用 SMA 連接器來進行輸入/輸出。
&lt;/p&gt;

&lt;p&gt;
另外要注意的是，這邊提到的時脈訊號會接到 FGPA 內的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%94%81%E7%9B%B8%E7%8E%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鎖相迴路 (Phase-locked loops, PLL)&lt;/a&gt; , 因此我們可以透過 Altera 的 IP-Core &lt;a href=&quot;https://www.altera.com/en_US/pdfs/literature/ug/ug_altpll.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ALTPLL&lt;/a&gt; 模組來對輸入時脈進行倍頻或是除頻等運作，產生我們需要的時脈。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_224553.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org34096f5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org34096f5&quot;&gt;LCD&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org34096f5&quot;&gt;
&lt;p&gt;
DE2-115 除了七段顯示器外，板子上也接上了 LCD 模組 &lt;a href=&quot;https://www.sparkfun.com/datasheets/LCD/HD44780.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HD44780&lt;/a&gt; ，我們可以透過 LCD 模組來進行一些文字訊息的顯示。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_230222.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然，要控制這個 LCD 模組，知道接腳在哪也是必要的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_230304.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3fc9c7f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3fc9c7f&quot;&gt;GPIO&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3fc9c7f&quot;&gt;
&lt;p&gt;
前面說到我們不會提到 HSMC (High Speed Mezzanine Card)，但是 GPIO 就必須特別題一下了。一般來說，大多數位訊號都可以透過 GPIO 來模擬達到，這種方式稱為 &lt;a href=&quot;https://en.wikipedia.org/wiki/Bit_banging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bit baning&lt;/a&gt; 。也因此，假設我們要自己實做 UART、I2C、SPI 等訊號輸入輸出，都可以透過這些 GPIO 接腳來達到。
&lt;/p&gt;

&lt;p&gt;
當然對初學者而言，GPIO 大概就是拿來點亮 LED 用的 :P
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_232246.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
DE2-115 上的 GPIO 設計有保護電路，可以避免輸入的電壓過高 (當然還是不可以太超過~)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_232307.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
那如何控制這些 GPIO 的電壓階度呢？我們可以透過調整 JP6 的短路座 (Jumper) 來將其設定成 3.3V (預設), 2.5V, 1.8V, 1.5V 的電壓位準。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_232706.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然這些位準要怎樣調整，就需要看這些 GPIO 的使用方式囉 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_231124.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org460e084&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org460e084&quot;&gt;VGA&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org460e084&quot;&gt;
&lt;p&gt;
和 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx Zybo Board&lt;/a&gt; 的作法不同，&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115&lt;/a&gt; 採用了 &lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7123-EP.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ADV7123&lt;/a&gt; 來將數位訊號轉換成 VGA 使用的類比訊號
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_234205.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然如果想要控制 VGA 輸出的話，需要知道時序的控制，讓其符合規格，但老實說這邊有點難一次講完，具體請參考: &lt;a href=&quot;http://www.cnblogs.com/oomusou/archive/2008/08/11/de2_vga_timing_table.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(筆記) D-Sub VGA timing table (SOC) (DE2) (DE2-70)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
而  &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt; 也提供了我們參考用的時序資訊 (Timing Specification)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_234426.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然，要控制 &lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7123-EP.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ADV7123&lt;/a&gt; 的話，我們也必須要知道 FGPA 拉出來的接腳才行
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_234841.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga56c17d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga56c17d&quot;&gt;Audio&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga56c17d&quot;&gt;
&lt;p&gt;
DE2-115 上面採用了 &lt;a href=&quot;https://www.cirrus.com/products/wm8731/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WM8731&lt;/a&gt; 作為音頻的解決方案，這顆晶片可以支援麥克風輸入、類比音源轉換輸入/輸出 (line-in/out)，而 Cyclone IV 和這顆晶片的溝通界面則是 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_235721.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
相關接腳如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_235740.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb8db343&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb8db343&quot;&gt;RS232&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb8db343&quot;&gt;
&lt;p&gt;
在嵌入式系統開發的時候，&lt;a href=&quot;https://zh.wikipedia.org/wiki/RS-232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RS232&lt;/a&gt; 串列埠是非常常用的接口，我們常常使用其作為最基本的除錯訊息輸出來源，而 DE2-115 已經幫我們把相關的電路處理好了。在這邊，DE2-115 使用 &lt;a href=&quot;https://www.ineltro.ch/media/downloads/SAAItem/45/45377/a4536d49-dc82-4904-8a34-c4f51beb59e9.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZT3232LEEY&lt;/a&gt; 這顆電壓轉換電路，將 FPGA 輸出的電壓 (3.3V) 轉換成 RS232 標準的最低許可電壓 ±5V。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180525_000107.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
假設我們要透過 Verilog 撰寫 UART 模組，我們可以採用以下接腳:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180525_000121.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd27c3a0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd27c3a0&quot;&gt;PS2 串列埠&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd27c3a0&quot;&gt;
&lt;p&gt;
現在的人已經很難接觸到 &lt;a href=&quot;https://en.wikipedia.org/wiki/PS/2_port&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PS/2 序列埠&lt;/a&gt; 了，以前的滑鼠和鍵盤都是透過這接口和主機溝通的，現在都已經被 USB 取代。我手邊的這片 DE2-115 畢竟是早期的板子，還留有這樣的接口。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/ps2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_181700.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbd858b6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbd858b6&quot;&gt;Gigabit 乙太網路收發器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbd858b6&quot;&gt;
&lt;p&gt;
DE2-115 內建兩個 Gigabit 乙太網路收發器，可以支援 10/100/1000M bps 的網路速度，並支援 GMII/MII/RGMII Mac 接口。
&lt;/p&gt;

&lt;p&gt;
預設的網路設定如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/eth.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
和 FPGA 的接線方式則是如下圖:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_210108.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
我們可以透過調整 JP1 和 JP2 的接法，設定網路設備的工作模式:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/ux.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/uui.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb3fff73&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb3fff73&quot;&gt;TV Decoder&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb3fff73&quot;&gt;
&lt;p&gt;
DE2-115 採用 &lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7181.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analog Device ADV7180&lt;/a&gt; 作為影像串流解碼器，此顆晶片可以自動解碼 &lt;a href=&quot;https://zh.wikipedia.org/wiki/NTSC%E5%88%B6%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NTSC&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/PAL%E5%88%B6%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PAL&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/wiki/SECAM%E5%88%B6%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SECAM&lt;/a&gt; 等影像規格成 &lt;a href=&quot;https://en.wikipedia.org/wiki/ITU-R_BT.656&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;8-bit ITU-R BT.656&lt;/a&gt; 格式。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7181.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analog Device ADV7180&lt;/a&gt; 和 FPGA 採用 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; 接口進行通訊。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_205349.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_205911.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3eb6a59&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3eb6a59&quot;&gt;USB&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3eb6a59&quot;&gt;
&lt;p&gt;
DE2-115 採用了 &lt;a href=&quot;http://www.cypress.com/file/122731/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cypress EZ-OTG (CY7C67200)&lt;/a&gt; 這款支援 &lt;a href=&quot;https://zh.wikipedia.org/wiki/USB_On-The-Go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;USB On-The-Go&lt;/a&gt; 功能的控制器，Host 和 Device 皆支援 USB 2.0 標準。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_204931.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_205257.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8ebcc96&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8ebcc96&quot;&gt;IR (紅外線)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8ebcc96&quot;&gt;
&lt;p&gt;
DE2-115 盒內附了一個紅外線遙控器，而板子上則有紅外線接收器 (&lt;a href=&quot;https://www.mouser.tw/ProductDetail/Everlight/IRM-V538N7-TR1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IRM-V538N7/TR1&lt;/a&gt;)，我們可以透過這個組合，實現像是冷氣遙控器、電視遙控器等控制界面。
&lt;/p&gt;

&lt;p&gt;
要注意的是，這個紅外線接收模組只相容 &lt;code&gt;38KHz 載波頻率&lt;/code&gt; ，最大的資料傳輸率是 &lt;code&gt;4kbps&lt;/code&gt; , 也就是說，不是你隨便拿一個家用的遙控器都可以和 DE2-115 上面的紅外線接收器溝通的。
&lt;/p&gt;

&lt;p&gt;
DE2-115 提供的遙控器採用了 &lt;a href=&quot;http://pdf.datasheet.live/3ca11ca1/necel.com/UPD6121G-001.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;uPD6121G&lt;/a&gt; 則有符合這個規格，因此記得不要把它搞丟呦^^
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183040.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_182048.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge0dc9a7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge0dc9a7&quot;&gt;SRAM&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge0dc9a7&quot;&gt;
&lt;p&gt;
DE2-115 內建了 2MB 的 SRAM, 這些 SRAM 的資料寬度是 16bit, 在 3.3V 的情況下，最高頻率為 125M Hz
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183324.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_202103.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0f18d90&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0f18d90&quot;&gt;SDRAM&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0f18d90&quot;&gt;
&lt;p&gt;
DE2-115 有 128 MB 的 SDRAM, 這個 SDRAM 實際上是由兩個 64MB 的 SDRAM 組成，每個 SDRAM 具有 16-bit 的資料寬度。
而由 FPGA 拉出來的位址控制訊號則是共用。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183612.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_202717.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbcc5506&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbcc5506&quot;&gt;FLASH&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbcc5506&quot;&gt;
&lt;p&gt;
DE2-115 具有 8MB FLASH, 這顆 FLASH 具有 8-bit 的資料寬度。基於 FLASH 的非揮發特性 (斷電後資料會保持)，我們常常使用這些 FLASH 存儲一些特定的資料。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183800.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_203443.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge1776f1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge1776f1&quot;&gt;EEPROM&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge1776f1&quot;&gt;
&lt;p&gt;
EEPROM 和 FLASH 一樣，也是斷電後資料可以保存的裝置。DE2-115 具有 32Kb 的 EEPROM, 由 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; 接口對其進行控制。
根據電路的接線方式，我們可以透過 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; Bus 上的 &lt;code&gt;0xA0&lt;/code&gt; 以及 &lt;code&gt;0xA1&lt;/code&gt; 位址來讀寫 EEPROM 的資料。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183954.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_203809.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0862ab1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0862ab1&quot;&gt;SD Card&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0862ab1&quot;&gt;
&lt;p&gt;
當我們需要大量的儲存空間的時候，就會有使用到 SD 卡的需求。DE2-115 已經連接好 SD 卡插槽，使用者可以透過 SPI 模式或是 SD 卡的 4-bit 或 1-bit 模式來和 SD 卡進行通訊。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_202029.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_203954.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org45ecaa7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org45ecaa7&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org45ecaa7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=156&amp;amp;No=686&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;邏輯電路設計 DE2-115 實戰寶典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
手邊有一台早期獲得的 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; ，一直放著積灰塵也不是辦法，再加上最近想多玩玩 FGPA，所以就來重新玩一次吧 :)
&lt;/p&gt;

&lt;p&gt;
和 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx Zybo Board&lt;/a&gt; 不同，&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; 是只有 FPGA 的開發板，並未包含 ARM Cortex-A9 來作為輔助用的 CPU，對於只想學 FPGA 的人而言，這算是不錯的平台，想要 CPU 的話，就自己寫個 CPU 上去或是用 NIOS-II 軟核 CPU 就好了。
&lt;/p&gt;

&lt;p&gt;
總之，就讓我們來玩玩這一片早期的 FPGA 開發板吧 (想當年這一片可是要台幣 3W 的呢!)
&lt;/p&gt;

&lt;p&gt;
不過在我們開始這一切之前，我們需要稍微了解一下這片開發板以及他的週邊等資訊。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
要了解 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115 開發平台&lt;/a&gt; 的相關資訊，我們首先先到他的開發商 &lt;a href=&quot;https://www.terasic.com.tw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;友晶科技&lt;/a&gt; 網站去下載 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt; ，這本手冊會帶領我們了解這平台相關的週邊。
&lt;/p&gt;

&lt;p&gt;
注意到這邊會刻意忽略掉 High Speed Mezzanine Card (HSMC) 接口，因為這個接口除非去買擴展板，不然對一般人而言不會有用到的機會。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org51ebfd1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org51ebfd1&quot;&gt;基本硬體認識&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org51ebfd1&quot;&gt;
&lt;p&gt;
拿到手的 &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115&lt;/a&gt; 就像這個樣子，從正面來看:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_144839.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
哇，這片板子週邊有夠多的，難怪不便宜，不過細節我們待會在說吧，先來看看背面還有什麼?
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_145013.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
背後偷偷藏了一顆 EEPROM，未來我們有資料要存放的時候就需要他了！
&lt;/p&gt;

&lt;p&gt;
了解了基本板子週邊後，接下來要來一個一個的研究吧~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6cccb1e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6cccb1e&quot;&gt;方塊圖&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6cccb1e&quot;&gt;
&lt;p&gt;
上面的週邊資訊太複雜了，好在  &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt; 有提供方塊圖 (Block Diagram) 可以讓我們對這平台用的 IC 以及有的功能再進一步的了解
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_152307.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org78fddb1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org78fddb1&quot;&gt;FGPA 核心&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org78fddb1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115&lt;/a&gt; 使用的 FPGA 核心是 &lt;code&gt;Cyclone IV EP4CE115F29&lt;/code&gt; ，是屬於 &lt;a href=&quot;https://www.altera.com/products/fpga/cyclone-series/cyclone-iv/overview.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cyclone IV&lt;/a&gt; 系列的，當然在一開始玩的時候只需要知道這個是哪個系列，可以裝下多少邏輯閘就夠了。
&lt;/p&gt;

&lt;p&gt;
因此，就讓我們列一下這顆 FPGA 到底有多少能耐:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;114,480 LEs (邏輯單元)&lt;/li&gt;
&lt;li&gt;432 M9K 記憶體模塊&lt;/li&gt;
&lt;li&gt;3,888 K bits 嵌入式存儲器&lt;/li&gt;
&lt;li&gt;4 PLLs (鎖相迴路)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
嗯&amp;#x2026; 看不懂，就只好引用一下 &lt;a href=&quot;https://www.mouser.tw/new/altera/altera-cycloneiv/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mouser&lt;/a&gt; 上的圖啦 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_153653.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這邊跳過部份資訊，如果想搞懂關於這顆 FPGA 的描述，包含 LE 是啥啦之類的，推薦看一下 &lt;a href=&quot;http://www.cnblogs.com/logic3/p/5466866.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FPGA 芯片内部硬件介绍&lt;/a&gt; 的說明。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbec215c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbec215c&quot;&gt;JTAG&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbec215c&quot;&gt;
&lt;p&gt;
JTAG 是 DE2-115 上用來下載程式到 FPGA 用的界面，根據設定的不同，我們可以將其分成 JTAG Mode 和 AS-mode，下面就來講解這兩種模式的不同。
&lt;/p&gt;

&lt;p&gt;
簡單的說:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;JTAG mode: 一般下載用，斷電後資料消失。&lt;/li&gt;
&lt;li&gt;AS mode: 下載後，即使斷電資料也會保存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd3d402c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgd3d402c&quot;&gt;JTAG mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgd3d402c&quot;&gt;
&lt;p&gt;
JTAG mode 是一般下載用的方式，缺點是斷電後資料不會保存在板子上。如果你想要下載後重新上電可以執行上一次下載的程式的話，請使用 AS mode。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_215436.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
使用 JTAG Mode 的時候，請注意以下步驟:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;接上電源&lt;/li&gt;
&lt;li&gt;設定 SW19 在 &lt;code&gt;RUN&lt;/code&gt; 的位置&lt;/li&gt;
&lt;li&gt;接上 USB type B 線到 USB Blaster 的位置&lt;/li&gt;
&lt;li&gt;透過 QUartus II 選擇適合的位元流 (.sof) 檔案進行下載&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org78936b7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org78936b7&quot;&gt;JTAG AS mode&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org78936b7&quot;&gt;
&lt;p&gt;
當我們想要斷電再上電後，還可以執行上一次下載的程式的話，這時候就需要透過 AS Mode 來進行。
&lt;/p&gt;

&lt;p&gt;
AS Mode (Active Serial Programming) 會將位元流下載到 &lt;a href=&quot;https://www.altera.com/en_US/pdfs/literature/hb/cfg/cyc_c51014.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EPCS64&lt;/a&gt; 這顆串口 IC，該晶片除了可以透過串口 (Serial) 下載外，同時也是一個儲存裝置，可以存放共 64MB 大小的資料。當電源啟動的時候，DE2-115 會從 &lt;a href=&quot;https://www.altera.com/en_US/pdfs/literature/hb/cfg/cyc_c51014.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;EPCS64&lt;/a&gt; 拉取資料，完成 FPGA 的設定，這也是為何 AS Mode 可以在斷電的情況下保持資料的原因。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_215741.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
使用 AS Mode 的時候，請注意以下步驟:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;接上電源&lt;/li&gt;
&lt;li&gt;接上 USB type B 線到 USB Blaster 的位置&lt;/li&gt;
&lt;li&gt;設定 SW19 在 &lt;code&gt;PROG&lt;/code&gt; 的位置&lt;/li&gt;
&lt;li&gt;透過 QUartus II 選擇適合的位元流 (.pof) 檔案下載到 EPCS64&lt;/li&gt;
&lt;li&gt;下載完成後，將 SW19 切換回 &lt;code&gt;RUN&lt;/code&gt; 的位置，這樣會讓 DE2-115 在開機的時候抓取 EPCS64 上的資訊。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0999f52&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0999f52&quot;&gt;JTAG Chain&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org0999f52&quot;&gt;
&lt;p&gt;
除了 JTAG mode 和 AS mode 外，如果我們想要透過 DE2-115 將資訊下載到別的 Altera FPGA 開發板的話，這時候就是使用 JTAG Chain 的時機。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_214634.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
參照上圖，當我們要使用 JTAG Chain 的時候，需要將 JP3 的 pin2 和 pin3 短路，讓 JTAG 訊號可以透過 HSMC 接口出去。
&lt;/p&gt;

&lt;p&gt;
如果 JP3 的 pin1 和 pin2 短路 (預設) ，此時形成一個封閉的迴路，這時候 JTAG 在下載的時候只會偵測到 DE2-115 上的 FPGA 晶片。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbb543ad&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbb543ad&quot;&gt;按鈕&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbb543ad&quot;&gt;
&lt;p&gt;
DE2-115 共有四個按鈕 (Push Button)，這些按鈕都接上了&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%96%BD%E5%AF%86%E7%89%B9%E8%A7%A6%E5%8F%91%E5%99%A8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;施密特觸發器(Schmitt trigger)&lt;/a&gt;來對按鈕去除彈跳 &lt;a href=&quot;http://while-true-loop.blogspot.tw/2009/04/de-bounce.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(debounce)&lt;/a&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_170619.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
也因為已經在電路上做了&lt;a href=&quot;http://while-true-loop.blogspot.tw/2009/04/de-bounce.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;防彈跳功能 (debounce)&lt;/a&gt;，因此在使用這些按鈕的時候我們就不需要透過軟體去濾掉按下按鈕後產生的那些雜訊。
&lt;/p&gt;

&lt;p&gt;
我們可以透過以下的表格，找出 FPGA 對應按鈕的腳位:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_174808.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgce62675&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgce62675&quot;&gt;指撥開關&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgce62675&quot;&gt;
&lt;p&gt;
DE2-115 有 18 個指撥開關 (slide switches)，和按鈕不同的地方在於這些指撥開關並未接上施密特觸發器(Schmitt trigger) ，也因此不具有防彈跳的功能。
&lt;/p&gt;

&lt;p&gt;
當指撥開關並未往上撥的時候，其為低電位，也就是邏輯 0。當往上撥的時候，則會變成高電位，也就是邏輯 1。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_170916.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當如果需要使用指撥開關的時候，我們可能會需要下面這張表來進行 I/O mapping:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_172531.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org20fe6f0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org20fe6f0&quot;&gt;LED&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org20fe6f0&quot;&gt;
&lt;p&gt;
DE2-115 上面共有 27 個 LED, 其中紅色 LED 佔了 18 個，綠色的則是有 9 個
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_171021.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當輸出腳為高電位的時候，會觸發 LED 亮，低電位則是讓 LED 暗。
&lt;/p&gt;

&lt;p&gt;
下面則是 LED 與 I/O 的對應表:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_171538.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org170dfa8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org170dfa8&quot;&gt;七段顯示器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org170dfa8&quot;&gt;
&lt;p&gt;
DE2-115 共有 8 個 &lt;a href=&quot;https://en.wikipedia.org/wiki/Seven-segment_display&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;七段顯示器 (7-segment)&lt;/a&gt;，每一個七段顯示器和 Cyclone IV 的連接就像這個樣子:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_172709.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這塊板子上的七段顯示器是採用 &lt;code&gt;共陽極 (Common Anode)&lt;/code&gt; 的形式接上的 (&lt;a href=&quot;http://www.cypress.com/file/132516/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;圖片來源)&lt;/a&gt; ，也因此當我們指定接腳為低電位 (邏輯 0) 的時候，可以將該位置點亮，指定為高電位則是關掉顯示。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_223953.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
具體的 I/O mapping 如下表：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180523_172858.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org018c090&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org018c090&quot;&gt;時脈源 (Clock Sources)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org018c090&quot;&gt;
&lt;p&gt;
DE2-115 上面掛載了一顆 &lt;code&gt;50MHz&lt;/code&gt; 的有源石英振盪器，而這顆振盪器會經由 &lt;a href=&quot;https://www.diodes.com/assets/Datasheets/PI49FCT3802.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PI49FCT3803 (單端時鐘緩衝器)&lt;/a&gt; 將訊號變成 3 組 50MHz 輸入到 Cyclone IV 的三個輸入源來提供使用者使用。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_224245.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然，如果想要輸入外部的時脈或是將當前的時脈輸出，則可以使用 SMA 連接器來進行輸入/輸出。
&lt;/p&gt;

&lt;p&gt;
另外要注意的是，這邊提到的時脈訊號會接到 FGPA 內的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%94%81%E7%9B%B8%E7%8E%AF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;鎖相迴路 (Phase-locked loops, PLL)&lt;/a&gt; , 因此我們可以透過 Altera 的 IP-Core &lt;a href=&quot;https://www.altera.com/en_US/pdfs/literature/ug/ug_altpll.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ALTPLL&lt;/a&gt; 模組來對輸入時脈進行倍頻或是除頻等運作，產生我們需要的時脈。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_224553.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org34096f5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org34096f5&quot;&gt;LCD&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org34096f5&quot;&gt;
&lt;p&gt;
DE2-115 除了七段顯示器外，板子上也接上了 LCD 模組 &lt;a href=&quot;https://www.sparkfun.com/datasheets/LCD/HD44780.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HD44780&lt;/a&gt; ，我們可以透過 LCD 模組來進行一些文字訊息的顯示。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_230222.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然，要控制這個 LCD 模組，知道接腳在哪也是必要的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_230304.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3fc9c7f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3fc9c7f&quot;&gt;GPIO&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3fc9c7f&quot;&gt;
&lt;p&gt;
前面說到我們不會提到 HSMC (High Speed Mezzanine Card)，但是 GPIO 就必須特別題一下了。一般來說，大多數位訊號都可以透過 GPIO 來模擬達到，這種方式稱為 &lt;a href=&quot;https://en.wikipedia.org/wiki/Bit_banging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bit baning&lt;/a&gt; 。也因此，假設我們要自己實做 UART、I2C、SPI 等訊號輸入輸出，都可以透過這些 GPIO 接腳來達到。
&lt;/p&gt;

&lt;p&gt;
當然對初學者而言，GPIO 大概就是拿來點亮 LED 用的 :P
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_232246.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
DE2-115 上的 GPIO 設計有保護電路，可以避免輸入的電壓過高 (當然還是不可以太超過~)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_232307.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
那如何控制這些 GPIO 的電壓階度呢？我們可以透過調整 JP6 的短路座 (Jumper) 來將其設定成 3.3V (預設), 2.5V, 1.8V, 1.5V 的電壓位準。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_232706.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然這些位準要怎樣調整，就需要看這些 GPIO 的使用方式囉 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_231124.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org460e084&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org460e084&quot;&gt;VGA&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org460e084&quot;&gt;
&lt;p&gt;
和 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx Zybo Board&lt;/a&gt; 的作法不同，&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=171&amp;amp;No=542&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Altera DE2-115&lt;/a&gt; 採用了 &lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7123-EP.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ADV7123&lt;/a&gt; 來將數位訊號轉換成 VGA 使用的類比訊號
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_234205.png&quot; width=&quot;80%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然如果想要控制 VGA 輸出的話，需要知道時序的控制，讓其符合規格，但老實說這邊有點難一次講完，具體請參考: &lt;a href=&quot;http://www.cnblogs.com/oomusou/archive/2008/08/11/de2_vga_timing_table.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(筆記) D-Sub VGA timing table (SOC) (DE2) (DE2-70)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
而  &lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt; 也提供了我們參考用的時序資訊 (Timing Specification)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_234426.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當然，要控制 &lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7123-EP.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ADV7123&lt;/a&gt; 的話，我們也必須要知道 FGPA 拉出來的接腳才行
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_234841.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga56c17d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga56c17d&quot;&gt;Audio&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga56c17d&quot;&gt;
&lt;p&gt;
DE2-115 上面採用了 &lt;a href=&quot;https://www.cirrus.com/products/wm8731/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WM8731&lt;/a&gt; 作為音頻的解決方案，這顆晶片可以支援麥克風輸入、類比音源轉換輸入/輸出 (line-in/out)，而 Cyclone IV 和這顆晶片的溝通界面則是 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_235721.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
相關接腳如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180524_235740.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb8db343&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb8db343&quot;&gt;RS232&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb8db343&quot;&gt;
&lt;p&gt;
在嵌入式系統開發的時候，&lt;a href=&quot;https://zh.wikipedia.org/wiki/RS-232&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RS232&lt;/a&gt; 串列埠是非常常用的接口，我們常常使用其作為最基本的除錯訊息輸出來源，而 DE2-115 已經幫我們把相關的電路處理好了。在這邊，DE2-115 使用 &lt;a href=&quot;https://www.ineltro.ch/media/downloads/SAAItem/45/45377/a4536d49-dc82-4904-8a34-c4f51beb59e9.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZT3232LEEY&lt;/a&gt; 這顆電壓轉換電路，將 FPGA 輸出的電壓 (3.3V) 轉換成 RS232 標準的最低許可電壓 ±5V。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180525_000107.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
假設我們要透過 Verilog 撰寫 UART 模組，我們可以採用以下接腳:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180525_000121.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd27c3a0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd27c3a0&quot;&gt;PS2 串列埠&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd27c3a0&quot;&gt;
&lt;p&gt;
現在的人已經很難接觸到 &lt;a href=&quot;https://en.wikipedia.org/wiki/PS/2_port&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PS/2 序列埠&lt;/a&gt; 了，以前的滑鼠和鍵盤都是透過這接口和主機溝通的，現在都已經被 USB 取代。我手邊的這片 DE2-115 畢竟是早期的板子，還留有這樣的接口。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/ps2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_181700.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbd858b6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbd858b6&quot;&gt;Gigabit 乙太網路收發器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbd858b6&quot;&gt;
&lt;p&gt;
DE2-115 內建兩個 Gigabit 乙太網路收發器，可以支援 10/100/1000M bps 的網路速度，並支援 GMII/MII/RGMII Mac 接口。
&lt;/p&gt;

&lt;p&gt;
預設的網路設定如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/eth.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
和 FPGA 的接線方式則是如下圖:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_210108.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
我們可以透過調整 JP1 和 JP2 的接法，設定網路設備的工作模式:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/ux.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/uui.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb3fff73&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb3fff73&quot;&gt;TV Decoder&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb3fff73&quot;&gt;
&lt;p&gt;
DE2-115 採用 &lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7181.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analog Device ADV7180&lt;/a&gt; 作為影像串流解碼器，此顆晶片可以自動解碼 &lt;a href=&quot;https://zh.wikipedia.org/wiki/NTSC%E5%88%B6%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NTSC&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/zh-tw/PAL%E5%88%B6%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PAL&lt;/a&gt;、&lt;a href=&quot;https://zh.wikipedia.org/wiki/SECAM%E5%88%B6%E5%BC%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SECAM&lt;/a&gt; 等影像規格成 &lt;a href=&quot;https://en.wikipedia.org/wiki/ITU-R_BT.656&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;8-bit ITU-R BT.656&lt;/a&gt; 格式。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.analog.com/media/en/technical-documentation/data-sheets/ADV7181.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Analog Device ADV7180&lt;/a&gt; 和 FPGA 採用 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; 接口進行通訊。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_205349.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_205911.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3eb6a59&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3eb6a59&quot;&gt;USB&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3eb6a59&quot;&gt;
&lt;p&gt;
DE2-115 採用了 &lt;a href=&quot;http://www.cypress.com/file/122731/download&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cypress EZ-OTG (CY7C67200)&lt;/a&gt; 這款支援 &lt;a href=&quot;https://zh.wikipedia.org/wiki/USB_On-The-Go&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;USB On-The-Go&lt;/a&gt; 功能的控制器，Host 和 Device 皆支援 USB 2.0 標準。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_204931.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_205257.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8ebcc96&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8ebcc96&quot;&gt;IR (紅外線)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8ebcc96&quot;&gt;
&lt;p&gt;
DE2-115 盒內附了一個紅外線遙控器，而板子上則有紅外線接收器 (&lt;a href=&quot;https://www.mouser.tw/ProductDetail/Everlight/IRM-V538N7-TR1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IRM-V538N7/TR1&lt;/a&gt;)，我們可以透過這個組合，實現像是冷氣遙控器、電視遙控器等控制界面。
&lt;/p&gt;

&lt;p&gt;
要注意的是，這個紅外線接收模組只相容 &lt;code&gt;38KHz 載波頻率&lt;/code&gt; ，最大的資料傳輸率是 &lt;code&gt;4kbps&lt;/code&gt; , 也就是說，不是你隨便拿一個家用的遙控器都可以和 DE2-115 上面的紅外線接收器溝通的。
&lt;/p&gt;

&lt;p&gt;
DE2-115 提供的遙控器採用了 &lt;a href=&quot;http://pdf.datasheet.live/3ca11ca1/necel.com/UPD6121G-001.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;uPD6121G&lt;/a&gt; 則有符合這個規格，因此記得不要把它搞丟呦^^
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183040.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_182048.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge0dc9a7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge0dc9a7&quot;&gt;SRAM&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge0dc9a7&quot;&gt;
&lt;p&gt;
DE2-115 內建了 2MB 的 SRAM, 這些 SRAM 的資料寬度是 16bit, 在 3.3V 的情況下，最高頻率為 125M Hz
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183324.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_202103.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0f18d90&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0f18d90&quot;&gt;SDRAM&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0f18d90&quot;&gt;
&lt;p&gt;
DE2-115 有 128 MB 的 SDRAM, 這個 SDRAM 實際上是由兩個 64MB 的 SDRAM 組成，每個 SDRAM 具有 16-bit 的資料寬度。
而由 FPGA 拉出來的位址控制訊號則是共用。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183612.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_202717.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbcc5506&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbcc5506&quot;&gt;FLASH&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbcc5506&quot;&gt;
&lt;p&gt;
DE2-115 具有 8MB FLASH, 這顆 FLASH 具有 8-bit 的資料寬度。基於 FLASH 的非揮發特性 (斷電後資料會保持)，我們常常使用這些 FLASH 存儲一些特定的資料。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183800.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_203443.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge1776f1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge1776f1&quot;&gt;EEPROM&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge1776f1&quot;&gt;
&lt;p&gt;
EEPROM 和 FLASH 一樣，也是斷電後資料可以保存的裝置。DE2-115 具有 32Kb 的 EEPROM, 由 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; 接口對其進行控制。
根據電路的接線方式，我們可以透過 &lt;a href=&quot;https://zh.wikipedia.org/wiki/I%C2%B2C&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I²C&lt;/a&gt; Bus 上的 &lt;code&gt;0xA0&lt;/code&gt; 以及 &lt;code&gt;0xA1&lt;/code&gt; 位址來讀寫 EEPROM 的資料。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_183954.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_203809.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0862ab1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0862ab1&quot;&gt;SD Card&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0862ab1&quot;&gt;
&lt;p&gt;
當我們需要大量的儲存空間的時候，就會有使用到 SD 卡的需求。DE2-115 已經連接好 SD 卡插槽，使用者可以透過 SPI 模式或是 SD 卡的 4-bit 或 1-bit 模式來和 SD 卡進行通訊。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_202029.png&quot; width=&quot;60%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a67f04e/Screenshot_20180527_203954.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org45ecaa7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org45ecaa7&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org45ecaa7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive_download.pl?Language=Taiwan&amp;amp;No=542&amp;amp;FID=eeba7202febfb39155fdac7b09ceada7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DE2-115 User Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=Taiwan&amp;amp;CategoryNo=156&amp;amp;No=686&amp;amp;PartNo=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;邏輯電路設計 DE2-115 實戰寶典&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/7a67f04e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>i.MX6SoloX SabreSD 學習筆記: 使用 Yocto 製作開機卡</title>
      <link>https://coldnew.github.io/9cbf4b94/</link>
      <guid>https://coldnew.github.io/9cbf4b94/</guid>
      <pubDate>Fri, 23 Feb 2018 02:33:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近稍微有些時間可以玩玩手邊的 &lt;a href=&quot;https://www.nxp.com/support/developer-resources/hardware-development-tools/sabre-development-system/sabre-board-for-smart-devices-based-on-the-i.mx-6solox-applications-processors:RD-IMX6SX-SABRE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;i.MX6 SabreSD SoloX&lt;/a&gt; 開發板，這是一套採用 i.MX6 Cortex-A9 搭配 Cortex-M4 的 HMP (Heterogeneous multi-processing) 架構的板子。
&lt;/p&gt;

&lt;p&gt;
既然要玩玩看，那就從官方的 &lt;a href=&quot;i.MX_Yocto_Project_User&#39;s_Guide.pdf&quot;&gt;i.MX_Yocto_Project_User&#39;s_Guide.pdf&lt;/a&gt; 開始吧，我們使用 &lt;a href=&quot;https://github.com/Freescale&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Freescale 社群&lt;/a&gt;所提供的開發環境來構件我們自己的 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto&lt;/a&gt; 系統。
&lt;/p&gt;

&lt;p&gt;
注意到 &lt;a href=&quot;https://github.com/Freescale&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Freescale 社群&lt;/a&gt; 的 Yocto 環境和 Yocto 官方的不太一樣，因此一開始最好還是照著 &lt;a href=&quot;i.MX_Yocto_Project_User&#39;s_Guide.pdf&quot;&gt;i.MX_Yocto_Project_User&#39;s_Guide.pdf&lt;/a&gt;   上的教學走。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div id=&quot;outline-container-orgac83c2f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgac83c2f&quot;&gt;電腦端的準備&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgac83c2f&quot;&gt;
&lt;p&gt;
推薦編譯用的環境為 &lt;code&gt;Ubuntu 14.04&lt;/code&gt; ，假設你的電腦剛好是 &lt;code&gt;Ubuntu 14.04&lt;/code&gt; 則需要安裝以下東西:
&lt;/p&gt;

&lt;p&gt;
(其他系統需要安裝軟體的資訊請參考: &lt;a href=&quot;http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt;)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo apt-get install -y &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     gawk wget git-core diffstat unzip &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     texinfo gcc-multilib build-essential chrpath socat libsdl1.2-dev &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     xterm sed cvs subversion coreutils texi2html &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     docbook-utils python-pysqlite2 help2man make gcc g++ &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     desktop-file-utils libgl1-mesa-dev libglu1-mesa-dev mercurial &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     autoconf automake groff curl lzop asciidoc u-boot-tools
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我自己編譯用的主機為 Gentoo Linux, 因此我另外做一個 docker image 來避免編譯出錯用，詳細資訊請參考 &lt;a href=&quot;https://coldnew.github.io/135d6bd2/&quot;&gt;我用來編譯 Yocto 的 Docker 環境&lt;/a&gt; 一文。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9d4f713&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9d4f713&quot;&gt;安裝 repo&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9d4f713&quot;&gt;
&lt;p&gt;
如果你系統上沒有編譯 Android 時需要用到的 &lt;a href=&quot;https://source.android.com/setup/developing#repo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;repo&lt;/a&gt; 工具，那在開始一切之前我們需要安裝一下，下面命令將其放到 &lt;code&gt;~/bin/repo&lt;/code&gt; 去
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;mkdir ~/bin
curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &amp;gt; ~/bin/repo
chmod a+x ~/bin/repo
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著在你的 &lt;code&gt;~/.bashrc&lt;/code&gt; 加上以下這一行，讓系統可以認到 &lt;code&gt;~/bin/repo&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;=~/bin:$&lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2dffe73&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2dffe73&quot;&gt;設定 Yocto 環境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2dffe73&quot;&gt;
&lt;p&gt;
安裝好了 &lt;a href=&quot;https://source.android.com/setup/developing#repo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;repo&lt;/a&gt; 後，接下來我們要來建立我們的開發用資料夾了，我們建立一個名為 &lt;code&gt;fsl-release-bsp&lt;/code&gt; 的資料夾，並切進去
&lt;/p&gt;

&lt;p&gt;
切進資料夾後，呼叫 repo 命令幫我們抓相關的 Yocto 程式碼下來
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;mkdir fsl-release-bsp &amp;amp;&amp;amp; &lt;span style=&quot;color: #ccaaff;&quot;&gt;cd&lt;/span&gt; $&lt;span style=&quot;color: #aaccff;&quot;&gt;_&lt;/span&gt;
repo init -u git://git.freescale.com/imx/fsl-arm-yocto-bsp.git -b imx-morty
repo sync -j9
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完成後，現在你的 &lt;code&gt;fsl-release-bsp&lt;/code&gt; 是這樣的結構的，其中 &lt;code&gt;sources&lt;/code&gt; 資料夾內就是一堆需要使用到的 &lt;a href=&quot;http://layers.openembedded.org/layerindex/branch/master/layers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Layers&lt;/a&gt;
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
.
├── fsl-setup-release.sh -&amp;gt; sources/meta-fsl-bsp-release/imx/tools/fsl-setup-release.sh
├── README -&amp;gt; sources/base/README
├── README-IMXBSP -&amp;gt; sources/meta-fsl-bsp-release/imx/README
├── setup-environment -&amp;gt; sources/base/setup-environment
└── sources

1 directory, 4 files
&lt;/pre&gt;

&lt;p&gt;
現在，讓我們透過 &lt;code&gt;fsl-setup-release.sh&lt;/code&gt; 這腳本建立我們實際上用來編譯用的資料夾吧 !
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org482a214&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org482a214&quot;&gt;建立編譯環境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org482a214&quot;&gt;
&lt;p&gt;
在建立編譯環境之前，我們有幾個基本的環境變數要設定:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
DISTRO
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;DISTRO&lt;/code&gt; 這個環境變數掌管了要編譯目標的類型，比如使用 X11 視窗、Wayland 視窗環境&amp;#x2026; 等，Freescale 共提供以下幾種:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;fsl-imx-x11: X11 圖形環境&lt;/li&gt;
&lt;li&gt;fsl-imx-wayland: Wayland 圖形環境&lt;/li&gt;
&lt;li&gt;fsl-imx-xwayland: XWayland 圖形環境，注意到此時 X11 的程式無法支援 EGL&lt;/li&gt;
&lt;li&gt;fsl-imx-fb: 使用 Framebuffer 作為界面，大多用於純文字或是不支援 X11, Wayland 的狀況&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
MACHINE
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;MACHINE&lt;/code&gt; 這個變數指定了要針對哪一種開發板進行編譯，比如這邊我使用的是 &lt;a href=&quot;https://www.nxp.com/support/developer-resources/hardware-development-tools/sabre-development-system/sabre-board-for-smart-devices-based-on-the-i.mx-6solox-applications-processors:RD-IMX6SX-SABRE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;i.MX6 SabreSD SoloX&lt;/a&gt; ，因此我的 &lt;code&gt;MACHINE&lt;/code&gt; 要選擇 &lt;code&gt;imx6sxsabresd&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
EULA
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;EULA&lt;/code&gt; 是告訴 Freescale 的編譯環境說你已經看過 NXP 的授權條款，如果你沒設定的話它就會要你看一長串的合約然後逼你輸入 yes
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
了解了以上幾個環境變數後，我們就可以透過 &lt;code&gt;fsl-setup-release.sh&lt;/code&gt; 來建立我們的編譯環境，建立的方式是這樣的:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;DISTRO&lt;/span&gt;=fsl-imx-x11 &lt;span style=&quot;color: #aaccff;&quot;&gt;MACHINE&lt;/span&gt;=imx6sxsabresd &lt;span style=&quot;color: #aaccff;&quot;&gt;EULA&lt;/span&gt;=1 source fsl-setup-release.sh -b &amp;lt;build dir&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
因此假如我們要編譯的資料夾名為 &lt;code&gt;build&lt;/code&gt; ，則使用以下命令建立資料夾並進入編譯環境
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;DISTRO&lt;/span&gt;=fsl-imx-x11 &lt;span style=&quot;color: #aaccff;&quot;&gt;MACHINE&lt;/span&gt;=imx6sxsabresd &lt;span style=&quot;color: #aaccff;&quot;&gt;EULA&lt;/span&gt;=1 source fsl-setup-release.sh -b build
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
一旦資料夾建立了以後，之後我們就可以使用以下命令直接切進編譯還進去
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/fsl-release-bsp $ source setup-environmet build
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
切進去後的資料夾結構其實都和 Yocto 是一樣的，這邊就不多加介紹。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdf05789&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdf05789&quot;&gt;選擇要編譯的 image&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdf05789&quot;&gt;
&lt;p&gt;
現在，我們的終端機已經在 &lt;code&gt;build&lt;/code&gt; 資料夾並準備編譯我們的 image 了，NXP 的環境預設提供了這些 image 可以編譯:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
core-image-minimal
&lt;/p&gt;

&lt;p&gt;
Yocto 原生的 image, 提供最簡單的 busybox 環境讓你測試是否能夠開機正常
&lt;/p&gt;

&lt;p&gt;
core-image-minimal.bb 可以在 poky 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
core-image-base
&lt;/p&gt;

&lt;p&gt;
終端機環境下的 image, 並提供硬體相關的支援。
&lt;/p&gt;

&lt;p&gt;
core-image-base.bb 可以在 poky 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
core-image-sato
&lt;/p&gt;

&lt;p&gt;
一套採用 X11 視窗並透過 GTK 製作的行動環境，老實說很丑但是堪用。
&lt;/p&gt;

&lt;p&gt;
core-image-sato.bb 可以在 poky 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
fsl-image-machine-test
&lt;/p&gt;

&lt;p&gt;
沒有圖形界面的終端環境下的 image
&lt;/p&gt;

&lt;p&gt;
fsl-image-machine-test.bb 可以在 meta-freescale-distro 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
fsl-image-validation-imx
&lt;/p&gt;

&lt;p&gt;
具有圖形界面的 i.MX image，但是不會有任何 Qt5 的函式庫。
&lt;/p&gt;

&lt;p&gt;
fsl-image-validation-imx.bb 可以在 meta-fsl-bsp-release 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
fsl-image-qt5-validation-imx
&lt;/p&gt;

&lt;p&gt;
具有圖形界面的 i.MX image，並包含 Qt5 的函式庫。注意到這個只支援具有 &lt;code&gt;GPU&lt;/code&gt; 的 i.MX SoC, 因此 &lt;code&gt;i.MX6UltraLite&lt;/code&gt;, &lt;code&gt;i.MX6 UltraLiteLite&lt;/code&gt;, &lt;code&gt;i.MX7 Dual&lt;/code&gt; 相關的開發板都不能用呦~
&lt;/p&gt;

&lt;p&gt;
fsl-image-qt5-validation-imx.bb 可以在 meta-fsl-bsp-release 目錄找到。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
上面就是大致上能用的 image 的介紹，不過一般我都是先用 &lt;code&gt;core-image-minimal&lt;/code&gt; 確認可以開機後，再來進行修改。
&lt;/p&gt;

&lt;p&gt;
讓我們開始編譯吧! 敲下以下命令後去休息一下等待編譯好吧~
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/fsl-release-bsp/build $ bitbake core-image-minimal
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org79ec047&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org79ec047&quot;&gt;製作 SD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org79ec047&quot;&gt;
&lt;p&gt;
編譯完成後，當前目錄會變成這樣的架構:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;.&lt;/span&gt; &amp;lt;b&amp;gt;
&amp;#9500;&amp;#9472;&amp;#9472; bitbake.lock
&amp;#9500;&amp;#9472;&amp;#9472; cache &amp;lt;b&amp;gt;
&amp;#9500;&amp;#9472;&amp;#9472; conf &amp;lt;b&amp;gt;
&amp;#9500;&amp;#9472;&amp;#9472; sstate-cache &amp;lt;b&amp;gt;
&amp;#9492;&amp;#9472;&amp;#9472; tmp &amp;lt;b&amp;gt;

4 directories, 1 file
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
其中編譯完成的 image 在 &lt;code&gt;tmp/deploy/images/imx6sxsabresd/&lt;/code&gt; 資料夾下，我們可以看到有這些檔案
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;core-image-minimal-imx6sxsabresd-20180223010741.rootfs.ext4      README_-_DO_NOT_DELETE_FILES_IN_THIS_DIRECTORY.txt      zImage--4.9.11-r0-imx6sx-sdb-emmc-20180222145816.dtb      zImage-imx6sx-sdb.dtb
core-image-minimal-imx6sxsabresd-20180223010741.rootfs.manifest  u-boot.imx                                              zImage--4.9.11-r0-imx6sx-sdb-lcdif1-20180222145816.dtb    zImage-imx6sx-sdb-emmc.dtb
core-image-minimal-imx6sxsabresd-20180223010741.rootfs.sdcard    u-boot-imx6sxsabresd.imx                                zImage--4.9.11-r0-imx6sx-sdb-ldo-20180222145816.dtb       zImage-imx6sx-sdb-lcdif1.dtb
core-image-minimal-imx6sxsabresd-20180223010741.rootfs.tar.bz2   u-boot-imx6sxsabresd.imx-sd                             zImage--4.9.11-r0-imx6sx-sdb-m4-20180222145816.dtb        zImage-imx6sx-sdb-ldo.dtb
core-image-minimal-imx6sxsabresd.ext4                            u-boot.imx-sd                                           zImage--4.9.11-r0-imx6sx-sdb-mqs-20180222145816.dtb       zImage-imx6sx-sdb-m4.dtb
core-image-minimal-imx6sxsabresd.manifest                        u-boot-sd-2017.03-r0.imx                                zImage--4.9.11-r0-imx6sx-sdb-reva-20180222145816.dtb      zImage-imx6sx-sdb-mqs.dtb
core-image-minimal-imx6sxsabresd.sdcard                          zImage                                                  zImage--4.9.11-r0-imx6sx-sdb-reva-ldo-20180222145816.dtb  zImage-imx6sx-sdb-reva.dtb
core-image-minimal-imx6sxsabresd.tar.bz2                         zImage--4.9.11-r0-imx6sxsabresd-20180222145816.bin      zImage--4.9.11-r0-imx6sx-sdb-sai-20180222145816.dtb       zImage-imx6sx-sdb-reva-ldo.dtb
modules--4.9.11-r0-imx6sxsabresd-20180222145816.tgz              zImage--4.9.11-r0-imx6sx-sdb-20180222145816.dtb         zImage-imx6sxsabresd.bin                                  zImage-imx6sx-sdb-sai.dtb
modules-imx6sxsabresd.tgz                                        zImage--4.9.11-r0-imx6sx-sdb-btwifi-20180222145816.dtb  zImage-imx6sx-sdb-btwifi.dtb
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
要怎樣製作 SD 卡呢? i.MX 的環境很好心的幫我們做了 &lt;code&gt;core-image-minimal-imx6sxsabresd.sdcard&lt;/code&gt; 這樣的檔案 7，我們只要用 &lt;code&gt;dd&lt;/code&gt; 將這個檔案抹到我們的 SD 卡就好囉 ~ (這邊假設 SD 卡是 &lt;code&gt;/dev/sdd*&lt;/code&gt;)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo dd &lt;span style=&quot;color: #aaccff;&quot;&gt;if&lt;/span&gt;=core-image-minimal-imx6sxsabresd.sdcard &lt;span style=&quot;color: #aaccff;&quot;&gt;of&lt;/span&gt;=/dev/sdd &lt;span style=&quot;color: #aaccff;&quot;&gt;bs&lt;/span&gt;=1M
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
等待完成後，我們就可以拿來測試開機囉~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3e04c45&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3e04c45&quot;&gt;測試開機&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3e04c45&quot;&gt;
&lt;p&gt;
開機用 SD 卡製作好了一後，接下來讓我們來測試開機看看。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/9cbf4b94/sabresd.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
按照上面的方式插入 SD 卡，開機並在電腦端連上 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; (假設電腦端沒有別的 USB RS232 設備的話，接上這張開發板會多出 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 和 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 兩個設備)
&lt;/p&gt;

&lt;p&gt;
我們就可以看到以下訊息，並成功登入系統 (預設帳號: &lt;code&gt;root&lt;/code&gt;, 無密碼)
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
U-Boot 2017.03-nxp/imx_v2017.03_4.9.11_1.0.0_ga+ga2fea67 (Feb 22 2018 - 22:58:30 +0800)

CPU:   Freescale i.MX6SX rev1.2 996 MHz (running at 792 MHz)
CPU:   Extended Commercial temperature grade (-20C to 105C) at 30C
Reset cause: POR
Model: Freescale i.MX6 SoloX SDB RevB Board
Board: MX6SX SABRE SDB
DRAM:  1 GiB
PMIC: PFUZE100! DEV_ID=0x11 REV_ID=0x21
MMC:   FSL_SDHC: 0, FSL_SDHC: 1, FSL_SDHC: 2
*** Warning - bad CRC, using default environment

Display: Hannstar-XGA (1024x768)
Video: 1024x768x18
In:    serial
Out:   serial
Err:   serial
switch to partitions #0, OK
mmc2 is current device

# skip ....

imx6sxsabresd login: root
root
root@imx6sxsabresd:~# uname -a
uname -a
Linux imx6sxsabresd 4.9.11-1.0.0+gc27010d #1 SMP PREEMPT Thu Feb 22 21:53:43 CST 2018 armv7l GNU/Linux
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近稍微有些時間可以玩玩手邊的 &lt;a href=&quot;https://www.nxp.com/support/developer-resources/hardware-development-tools/sabre-development-system/sabre-board-for-smart-devices-based-on-the-i.mx-6solox-applications-processors:RD-IMX6SX-SABRE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;i.MX6 SabreSD SoloX&lt;/a&gt; 開發板，這是一套採用 i.MX6 Cortex-A9 搭配 Cortex-M4 的 HMP (Heterogeneous multi-processing) 架構的板子。
&lt;/p&gt;

&lt;p&gt;
既然要玩玩看，那就從官方的 &lt;a href=&quot;i.MX_Yocto_Project_User&#39;s_Guide.pdf&quot;&gt;i.MX_Yocto_Project_User&#39;s_Guide.pdf&lt;/a&gt; 開始吧，我們使用 &lt;a href=&quot;https://github.com/Freescale&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Freescale 社群&lt;/a&gt;所提供的開發環境來構件我們自己的 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto&lt;/a&gt; 系統。
&lt;/p&gt;

&lt;p&gt;
注意到 &lt;a href=&quot;https://github.com/Freescale&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Freescale 社群&lt;/a&gt; 的 Yocto 環境和 Yocto 官方的不太一樣，因此一開始最好還是照著 &lt;a href=&quot;i.MX_Yocto_Project_User&#39;s_Guide.pdf&quot;&gt;i.MX_Yocto_Project_User&#39;s_Guide.pdf&lt;/a&gt;   上的教學走。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div id=&quot;outline-container-orgac83c2f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgac83c2f&quot;&gt;電腦端的準備&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgac83c2f&quot;&gt;
&lt;p&gt;
推薦編譯用的環境為 &lt;code&gt;Ubuntu 14.04&lt;/code&gt; ，假設你的電腦剛好是 &lt;code&gt;Ubuntu 14.04&lt;/code&gt; 則需要安裝以下東西:
&lt;/p&gt;

&lt;p&gt;
(其他系統需要安裝軟體的資訊請參考: &lt;a href=&quot;http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt;)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo apt-get install -y &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     gawk wget git-core diffstat unzip &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     texinfo gcc-multilib build-essential chrpath socat libsdl1.2-dev &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     xterm sed cvs subversion coreutils texi2html &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     docbook-utils python-pysqlite2 help2man make gcc g++ &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     desktop-file-utils libgl1-mesa-dev libglu1-mesa-dev mercurial &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
     autoconf automake groff curl lzop asciidoc u-boot-tools
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我自己編譯用的主機為 Gentoo Linux, 因此我另外做一個 docker image 來避免編譯出錯用，詳細資訊請參考 &lt;a href=&quot;https://coldnew.github.io/135d6bd2/&quot;&gt;我用來編譯 Yocto 的 Docker 環境&lt;/a&gt; 一文。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9d4f713&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9d4f713&quot;&gt;安裝 repo&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9d4f713&quot;&gt;
&lt;p&gt;
如果你系統上沒有編譯 Android 時需要用到的 &lt;a href=&quot;https://source.android.com/setup/developing#repo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;repo&lt;/a&gt; 工具，那在開始一切之前我們需要安裝一下，下面命令將其放到 &lt;code&gt;~/bin/repo&lt;/code&gt; 去
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;mkdir ~/bin
curl http://commondatastorage.googleapis.com/git-repo-downloads/repo &amp;gt; ~/bin/repo
chmod a+x ~/bin/repo
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著在你的 &lt;code&gt;~/.bashrc&lt;/code&gt; 加上以下這一行，讓系統可以認到 &lt;code&gt;~/bin/repo&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;=~/bin:$&lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2dffe73&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2dffe73&quot;&gt;設定 Yocto 環境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2dffe73&quot;&gt;
&lt;p&gt;
安裝好了 &lt;a href=&quot;https://source.android.com/setup/developing#repo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;repo&lt;/a&gt; 後，接下來我們要來建立我們的開發用資料夾了，我們建立一個名為 &lt;code&gt;fsl-release-bsp&lt;/code&gt; 的資料夾，並切進去
&lt;/p&gt;

&lt;p&gt;
切進資料夾後，呼叫 repo 命令幫我們抓相關的 Yocto 程式碼下來
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;mkdir fsl-release-bsp &amp;amp;&amp;amp; &lt;span style=&quot;color: #ccaaff;&quot;&gt;cd&lt;/span&gt; $&lt;span style=&quot;color: #aaccff;&quot;&gt;_&lt;/span&gt;
repo init -u git://git.freescale.com/imx/fsl-arm-yocto-bsp.git -b imx-morty
repo sync -j9
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完成後，現在你的 &lt;code&gt;fsl-release-bsp&lt;/code&gt; 是這樣的結構的，其中 &lt;code&gt;sources&lt;/code&gt; 資料夾內就是一堆需要使用到的 &lt;a href=&quot;http://layers.openembedded.org/layerindex/branch/master/layers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Layers&lt;/a&gt;
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
.
├── fsl-setup-release.sh -&amp;gt; sources/meta-fsl-bsp-release/imx/tools/fsl-setup-release.sh
├── README -&amp;gt; sources/base/README
├── README-IMXBSP -&amp;gt; sources/meta-fsl-bsp-release/imx/README
├── setup-environment -&amp;gt; sources/base/setup-environment
└── sources

1 directory, 4 files
&lt;/pre&gt;

&lt;p&gt;
現在，讓我們透過 &lt;code&gt;fsl-setup-release.sh&lt;/code&gt; 這腳本建立我們實際上用來編譯用的資料夾吧 !
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org482a214&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org482a214&quot;&gt;建立編譯環境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org482a214&quot;&gt;
&lt;p&gt;
在建立編譯環境之前，我們有幾個基本的環境變數要設定:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
DISTRO
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;DISTRO&lt;/code&gt; 這個環境變數掌管了要編譯目標的類型，比如使用 X11 視窗、Wayland 視窗環境&amp;#x2026; 等，Freescale 共提供以下幾種:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;fsl-imx-x11: X11 圖形環境&lt;/li&gt;
&lt;li&gt;fsl-imx-wayland: Wayland 圖形環境&lt;/li&gt;
&lt;li&gt;fsl-imx-xwayland: XWayland 圖形環境，注意到此時 X11 的程式無法支援 EGL&lt;/li&gt;
&lt;li&gt;fsl-imx-fb: 使用 Framebuffer 作為界面，大多用於純文字或是不支援 X11, Wayland 的狀況&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
MACHINE
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;MACHINE&lt;/code&gt; 這個變數指定了要針對哪一種開發板進行編譯，比如這邊我使用的是 &lt;a href=&quot;https://www.nxp.com/support/developer-resources/hardware-development-tools/sabre-development-system/sabre-board-for-smart-devices-based-on-the-i.mx-6solox-applications-processors:RD-IMX6SX-SABRE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;i.MX6 SabreSD SoloX&lt;/a&gt; ，因此我的 &lt;code&gt;MACHINE&lt;/code&gt; 要選擇 &lt;code&gt;imx6sxsabresd&lt;/code&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
EULA
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;EULA&lt;/code&gt; 是告訴 Freescale 的編譯環境說你已經看過 NXP 的授權條款，如果你沒設定的話它就會要你看一長串的合約然後逼你輸入 yes
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
了解了以上幾個環境變數後，我們就可以透過 &lt;code&gt;fsl-setup-release.sh&lt;/code&gt; 來建立我們的編譯環境，建立的方式是這樣的:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;DISTRO&lt;/span&gt;=fsl-imx-x11 &lt;span style=&quot;color: #aaccff;&quot;&gt;MACHINE&lt;/span&gt;=imx6sxsabresd &lt;span style=&quot;color: #aaccff;&quot;&gt;EULA&lt;/span&gt;=1 source fsl-setup-release.sh -b &amp;lt;build dir&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
因此假如我們要編譯的資料夾名為 &lt;code&gt;build&lt;/code&gt; ，則使用以下命令建立資料夾並進入編譯環境
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;DISTRO&lt;/span&gt;=fsl-imx-x11 &lt;span style=&quot;color: #aaccff;&quot;&gt;MACHINE&lt;/span&gt;=imx6sxsabresd &lt;span style=&quot;color: #aaccff;&quot;&gt;EULA&lt;/span&gt;=1 source fsl-setup-release.sh -b build
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
一旦資料夾建立了以後，之後我們就可以使用以下命令直接切進編譯還進去
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/fsl-release-bsp $ source setup-environmet build
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
切進去後的資料夾結構其實都和 Yocto 是一樣的，這邊就不多加介紹。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdf05789&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdf05789&quot;&gt;選擇要編譯的 image&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdf05789&quot;&gt;
&lt;p&gt;
現在，我們的終端機已經在 &lt;code&gt;build&lt;/code&gt; 資料夾並準備編譯我們的 image 了，NXP 的環境預設提供了這些 image 可以編譯:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
core-image-minimal
&lt;/p&gt;

&lt;p&gt;
Yocto 原生的 image, 提供最簡單的 busybox 環境讓你測試是否能夠開機正常
&lt;/p&gt;

&lt;p&gt;
core-image-minimal.bb 可以在 poky 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
core-image-base
&lt;/p&gt;

&lt;p&gt;
終端機環境下的 image, 並提供硬體相關的支援。
&lt;/p&gt;

&lt;p&gt;
core-image-base.bb 可以在 poky 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
core-image-sato
&lt;/p&gt;

&lt;p&gt;
一套採用 X11 視窗並透過 GTK 製作的行動環境，老實說很丑但是堪用。
&lt;/p&gt;

&lt;p&gt;
core-image-sato.bb 可以在 poky 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
fsl-image-machine-test
&lt;/p&gt;

&lt;p&gt;
沒有圖形界面的終端環境下的 image
&lt;/p&gt;

&lt;p&gt;
fsl-image-machine-test.bb 可以在 meta-freescale-distro 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
fsl-image-validation-imx
&lt;/p&gt;

&lt;p&gt;
具有圖形界面的 i.MX image，但是不會有任何 Qt5 的函式庫。
&lt;/p&gt;

&lt;p&gt;
fsl-image-validation-imx.bb 可以在 meta-fsl-bsp-release 目錄找到。
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
fsl-image-qt5-validation-imx
&lt;/p&gt;

&lt;p&gt;
具有圖形界面的 i.MX image，並包含 Qt5 的函式庫。注意到這個只支援具有 &lt;code&gt;GPU&lt;/code&gt; 的 i.MX SoC, 因此 &lt;code&gt;i.MX6UltraLite&lt;/code&gt;, &lt;code&gt;i.MX6 UltraLiteLite&lt;/code&gt;, &lt;code&gt;i.MX7 Dual&lt;/code&gt; 相關的開發板都不能用呦~
&lt;/p&gt;

&lt;p&gt;
fsl-image-qt5-validation-imx.bb 可以在 meta-fsl-bsp-release 目錄找到。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;
上面就是大致上能用的 image 的介紹，不過一般我都是先用 &lt;code&gt;core-image-minimal&lt;/code&gt; 確認可以開機後，再來進行修改。
&lt;/p&gt;

&lt;p&gt;
讓我們開始編譯吧! 敲下以下命令後去休息一下等待編譯好吧~
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/fsl-release-bsp/build $ bitbake core-image-minimal
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org79ec047&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org79ec047&quot;&gt;製作 SD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org79ec047&quot;&gt;
&lt;p&gt;
編譯完成後，當前目錄會變成這樣的架構:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;.&lt;/span&gt; &amp;lt;b&amp;gt;
&amp;#9500;&amp;#9472;&amp;#9472; bitbake.lock
&amp;#9500;&amp;#9472;&amp;#9472; cache &amp;lt;b&amp;gt;
&amp;#9500;&amp;#9472;&amp;#9472; conf &amp;lt;b&amp;gt;
&amp;#9500;&amp;#9472;&amp;#9472; sstate-cache &amp;lt;b&amp;gt;
&amp;#9492;&amp;#9472;&amp;#9472; tmp &amp;lt;b&amp;gt;

4 directories, 1 file
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
其中編譯完成的 image 在 &lt;code&gt;tmp/deploy/images/imx6sxsabresd/&lt;/code&gt; 資料夾下，我們可以看到有這些檔案
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;core-image-minimal-imx6sxsabresd-20180223010741.rootfs.ext4      README_-_DO_NOT_DELETE_FILES_IN_THIS_DIRECTORY.txt      zImage--4.9.11-r0-imx6sx-sdb-emmc-20180222145816.dtb      zImage-imx6sx-sdb.dtb
core-image-minimal-imx6sxsabresd-20180223010741.rootfs.manifest  u-boot.imx                                              zImage--4.9.11-r0-imx6sx-sdb-lcdif1-20180222145816.dtb    zImage-imx6sx-sdb-emmc.dtb
core-image-minimal-imx6sxsabresd-20180223010741.rootfs.sdcard    u-boot-imx6sxsabresd.imx                                zImage--4.9.11-r0-imx6sx-sdb-ldo-20180222145816.dtb       zImage-imx6sx-sdb-lcdif1.dtb
core-image-minimal-imx6sxsabresd-20180223010741.rootfs.tar.bz2   u-boot-imx6sxsabresd.imx-sd                             zImage--4.9.11-r0-imx6sx-sdb-m4-20180222145816.dtb        zImage-imx6sx-sdb-ldo.dtb
core-image-minimal-imx6sxsabresd.ext4                            u-boot.imx-sd                                           zImage--4.9.11-r0-imx6sx-sdb-mqs-20180222145816.dtb       zImage-imx6sx-sdb-m4.dtb
core-image-minimal-imx6sxsabresd.manifest                        u-boot-sd-2017.03-r0.imx                                zImage--4.9.11-r0-imx6sx-sdb-reva-20180222145816.dtb      zImage-imx6sx-sdb-mqs.dtb
core-image-minimal-imx6sxsabresd.sdcard                          zImage                                                  zImage--4.9.11-r0-imx6sx-sdb-reva-ldo-20180222145816.dtb  zImage-imx6sx-sdb-reva.dtb
core-image-minimal-imx6sxsabresd.tar.bz2                         zImage--4.9.11-r0-imx6sxsabresd-20180222145816.bin      zImage--4.9.11-r0-imx6sx-sdb-sai-20180222145816.dtb       zImage-imx6sx-sdb-reva-ldo.dtb
modules--4.9.11-r0-imx6sxsabresd-20180222145816.tgz              zImage--4.9.11-r0-imx6sx-sdb-20180222145816.dtb         zImage-imx6sxsabresd.bin                                  zImage-imx6sx-sdb-sai.dtb
modules-imx6sxsabresd.tgz                                        zImage--4.9.11-r0-imx6sx-sdb-btwifi-20180222145816.dtb  zImage-imx6sx-sdb-btwifi.dtb
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
要怎樣製作 SD 卡呢? i.MX 的環境很好心的幫我們做了 &lt;code&gt;core-image-minimal-imx6sxsabresd.sdcard&lt;/code&gt; 這樣的檔案 7，我們只要用 &lt;code&gt;dd&lt;/code&gt; 將這個檔案抹到我們的 SD 卡就好囉 ~ (這邊假設 SD 卡是 &lt;code&gt;/dev/sdd*&lt;/code&gt;)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo dd &lt;span style=&quot;color: #aaccff;&quot;&gt;if&lt;/span&gt;=core-image-minimal-imx6sxsabresd.sdcard &lt;span style=&quot;color: #aaccff;&quot;&gt;of&lt;/span&gt;=/dev/sdd &lt;span style=&quot;color: #aaccff;&quot;&gt;bs&lt;/span&gt;=1M
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
等待完成後，我們就可以拿來測試開機囉~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3e04c45&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3e04c45&quot;&gt;測試開機&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3e04c45&quot;&gt;
&lt;p&gt;
開機用 SD 卡製作好了一後，接下來讓我們來測試開機看看。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/9cbf4b94/sabresd.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
按照上面的方式插入 SD 卡，開機並在電腦端連上 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; (假設電腦端沒有別的 USB RS232 設備的話，接上這張開發板會多出 &lt;code&gt;/dev/ttyUSB0&lt;/code&gt; 和 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 兩個設備)
&lt;/p&gt;

&lt;p&gt;
我們就可以看到以下訊息，並成功登入系統 (預設帳號: &lt;code&gt;root&lt;/code&gt;, 無密碼)
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
U-Boot 2017.03-nxp/imx_v2017.03_4.9.11_1.0.0_ga+ga2fea67 (Feb 22 2018 - 22:58:30 +0800)

CPU:   Freescale i.MX6SX rev1.2 996 MHz (running at 792 MHz)
CPU:   Extended Commercial temperature grade (-20C to 105C) at 30C
Reset cause: POR
Model: Freescale i.MX6 SoloX SDB RevB Board
Board: MX6SX SABRE SDB
DRAM:  1 GiB
PMIC: PFUZE100! DEV_ID=0x11 REV_ID=0x21
MMC:   FSL_SDHC: 0, FSL_SDHC: 1, FSL_SDHC: 2
*** Warning - bad CRC, using default environment

Display: Hannstar-XGA (1024x768)
Video: 1024x768x18
In:    serial
Out:   serial
Err:   serial
switch to partitions #0, OK
mmc2 is current device

# skip ....

imx6sxsabresd login: root
root
root@imx6sxsabresd:~# uname -a
uname -a
Linux imx6sxsabresd 4.9.11-1.0.0+gc27010d #1 SMP PREEMPT Thu Feb 22 21:53:43 CST 2018 armv7l GNU/Linux
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/9cbf4b94/#disqus_thread</comments>
    </item>
    
    <item>
      <title>我用來編譯 Yocto 的 Docker 環境</title>
      <link>https://coldnew.github.io/135d6bd2/</link>
      <guid>https://coldnew.github.io/135d6bd2/</guid>
      <pubDate>Thu, 22 Feb 2018 02:23:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近重新整理一下我用來編譯 &lt;a href=&quot;https://www.yocto project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 用的 Docker 環境，決定把它拉成獨立的腳本放出，你可以到 &lt;a href=&quot;https://github.com/coldnew/docker-yocto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coldnew/docker-yocto&lt;/a&gt; 找到 。
&lt;/p&gt;

&lt;p&gt;
為什麼要用 Docker 建立環境來編譯呢?在我這幾年使用 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto&lt;/a&gt; 的經驗，就是它對於 Host Machine 的依賴性太強。
我自己習慣使用 Gentoo Linux 也因為套件比較新，常常遇到 舊版本的 Yocto 在編譯 Host 端工具之類的，因為找到系統端的依賴然後編譯不過，也因此最省麻煩的方式，還是依照 &lt;a href=&quot;http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt; 上面所說的，使用指定的 Linux 發行板。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
但是我就是不想用非 Gentoo Linux 外的發行板以及使用虛擬機呀 (笑)，所以就用 Docker 建立了自己的環境。
&lt;/p&gt;

&lt;p&gt;
整個專案的說明以及用法請往下看:
&lt;/p&gt;

&lt;div id=&quot;outline-container-org000875e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org000875e&quot;&gt;專案說明&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org000875e&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/coldnew/docker-yocto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coldnew/docker-yocto&lt;/a&gt; 裡面的檔案結構大致上如下:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
. &amp;lt;b&amp;gt;
├── Dockerfile
├── entrypoint.sh
├── Makefile
├── README.md
└── yocto-build.sh &amp;lt;g&amp;gt;

0 directories, 5 files
&lt;/pre&gt;

&lt;p&gt;
其中 Dockerfile, entrypoint.sh 以及 Makefile 是我用來建立 docker image 所使用的腳本，產生出來的 docker image 可以在 &lt;a href=&quot;https://hub.docker.com/r/coldnew/yocto-build/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DockerHub&lt;/a&gt; 找到。
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;yocto-build.sh&lt;/code&gt; 則是我用來下載新的 docker image 以及切換到 docker 環境用的腳本。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org500942a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org500942a&quot;&gt;安裝方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org500942a&quot;&gt;
&lt;p&gt;
要使用這套環境，首先需要下載 &lt;code&gt;yocto-build.sh&lt;/code&gt; 到電腦的 &lt;code&gt;~/bin&lt;/code&gt; 環境，這邊將其變成 &lt;code&gt;~/bin/yocto-build&lt;/code&gt; 這樣的執行檔案
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;mkdir -p ~/bin
curl https://raw.githubusercontent.com/coldnew/docker-yocto/master/yocto-build.sh &amp;gt; ~/bin/yocto-build
chmod +x ~/bin/yocto-build
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你的 &lt;code&gt;~/bin&lt;/code&gt; 沒有在系統的 &lt;code&gt;PATH&lt;/code&gt; 變數的話，則需要在你的 &lt;code&gt;~/.bashrc&lt;/code&gt; 加入以下這行，並開新的 shell
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;=~/bin:$&lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這會讓你的系統可以找到 &lt;code&gt;~/bin&lt;/code&gt; 裡面的執行檔。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org04efbe0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org04efbe0&quot;&gt;使用方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org04efbe0&quot;&gt;
&lt;p&gt;
下面就讓我來介紹我這個 repo 的使用方式吧，當然，如果要更完整的說明可以使用以下命令獲得:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --help
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3df538f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3df538f&quot;&gt;建立 workdir&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org3df538f&quot;&gt;
&lt;p&gt;
第一次使用的時候，需要告知 &lt;code&gt;yocto-build&lt;/code&gt; 你編譯 Yocto 用的資料夾，以我的範例為例則是 &lt;code&gt;/home/coldnew/poky&lt;/code&gt; ，因此要這樣使用
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --workdir /home/coldnew/poky
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
指定好編譯目錄後，當前的 shell 就會直接切入到 docker 環境並將 &lt;code&gt;/home/coldnew/poky&lt;/code&gt; 掛載到 &lt;code&gt;/yocto&lt;/code&gt; 去，就像這個樣子
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@8f58141dae3d:/yocto$
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這個環境就是符合 Yocto 編譯用的環境，所以可以直接在裡面放心的使用 bitbake。
&lt;/p&gt;

&lt;p&gt;
(在 docker 裡面的 UID 和 GID 會和原來的使用者相同)
&lt;/p&gt;

&lt;p&gt;
除此之外，如果你的 Host 電腦是 Linux，因為 yocto-build.sh 這腳本會自動掛載 &lt;code&gt;/tmp/.X11-unix&lt;/code&gt; 到 docker 去，因此也可以透過 &lt;code&gt;bitbake -c devshell&lt;/code&gt; 命令呼叫出圖形的終端機出來。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@8f58141dae3d:/yocto$ bitbake -c devshell busybox
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org7b5cb11&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org7b5cb11&quot;&gt;切新的 shell&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org7b5cb11&quot;&gt;
&lt;p&gt;
如果要切新的 shell 進到這個 container，則使用
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --shell
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這會建立新的 shell 連接到 container 去
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc96a94b&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc96a94b&quot;&gt;移除 container&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgc96a94b&quot;&gt;
&lt;p&gt;
如果你編譯完成了，不想要這個 container, 則可以透過以下命令去刪除它
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --rm
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org79cffc8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org79cffc8&quot;&gt;更新腳本&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org79cffc8&quot;&gt;
&lt;p&gt;
如果你需要更新 yocto-build.sh，使用以下命令即可達成
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --upgrade
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc311d44&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc311d44&quot;&gt;更新 Docker Image&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgc311d44&quot;&gt;
&lt;p&gt;
假設當前編譯 Yocto 用的 Docker Image 出現編譯不過的情況，則可以考慮更新 Docker Image
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --pull
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org21ba62b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org21ba62b&quot;&gt;後記&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org21ba62b&quot;&gt;
&lt;p&gt;
這個腳本理論上是跨平台，甚至是可以在 Mac OSX 下使用，不過之前在 Mac OSX 測試時出現一些 Docker 相關的錯誤，所以目前還只能用於 Linux 端的系統。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近重新整理一下我用來編譯 &lt;a href=&quot;https://www.yocto project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 用的 Docker 環境，決定把它拉成獨立的腳本放出，你可以到 &lt;a href=&quot;https://github.com/coldnew/docker-yocto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coldnew/docker-yocto&lt;/a&gt; 找到 。
&lt;/p&gt;

&lt;p&gt;
為什麼要用 Docker 建立環境來編譯呢?在我這幾年使用 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto&lt;/a&gt; 的經驗，就是它對於 Host Machine 的依賴性太強。
我自己習慣使用 Gentoo Linux 也因為套件比較新，常常遇到 舊版本的 Yocto 在編譯 Host 端工具之類的，因為找到系統端的依賴然後編譯不過，也因此最省麻煩的方式，還是依照 &lt;a href=&quot;http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt; 上面所說的，使用指定的 Linux 發行板。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
但是我就是不想用非 Gentoo Linux 外的發行板以及使用虛擬機呀 (笑)，所以就用 Docker 建立了自己的環境。
&lt;/p&gt;

&lt;p&gt;
整個專案的說明以及用法請往下看:
&lt;/p&gt;

&lt;div id=&quot;outline-container-org000875e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org000875e&quot;&gt;專案說明&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org000875e&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/coldnew/docker-yocto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;coldnew/docker-yocto&lt;/a&gt; 裡面的檔案結構大致上如下:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
. &amp;lt;b&amp;gt;
├── Dockerfile
├── entrypoint.sh
├── Makefile
├── README.md
└── yocto-build.sh &amp;lt;g&amp;gt;

0 directories, 5 files
&lt;/pre&gt;

&lt;p&gt;
其中 Dockerfile, entrypoint.sh 以及 Makefile 是我用來建立 docker image 所使用的腳本，產生出來的 docker image 可以在 &lt;a href=&quot;https://hub.docker.com/r/coldnew/yocto-build/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DockerHub&lt;/a&gt; 找到。
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;yocto-build.sh&lt;/code&gt; 則是我用來下載新的 docker image 以及切換到 docker 環境用的腳本。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org500942a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org500942a&quot;&gt;安裝方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org500942a&quot;&gt;
&lt;p&gt;
要使用這套環境，首先需要下載 &lt;code&gt;yocto-build.sh&lt;/code&gt; 到電腦的 &lt;code&gt;~/bin&lt;/code&gt; 環境，這邊將其變成 &lt;code&gt;~/bin/yocto-build&lt;/code&gt; 這樣的執行檔案
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;mkdir -p ~/bin
curl https://raw.githubusercontent.com/coldnew/docker-yocto/master/yocto-build.sh &amp;gt; ~/bin/yocto-build
chmod +x ~/bin/yocto-build
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你的 &lt;code&gt;~/bin&lt;/code&gt; 沒有在系統的 &lt;code&gt;PATH&lt;/code&gt; 變數的話，則需要在你的 &lt;code&gt;~/.bashrc&lt;/code&gt; 加入以下這行，並開新的 shell
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;=~/bin:$&lt;span style=&quot;color: #aaccff;&quot;&gt;PATH&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這會讓你的系統可以找到 &lt;code&gt;~/bin&lt;/code&gt; 裡面的執行檔。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org04efbe0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org04efbe0&quot;&gt;使用方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org04efbe0&quot;&gt;
&lt;p&gt;
下面就讓我來介紹我這個 repo 的使用方式吧，當然，如果要更完整的說明可以使用以下命令獲得:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --help
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3df538f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3df538f&quot;&gt;建立 workdir&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org3df538f&quot;&gt;
&lt;p&gt;
第一次使用的時候，需要告知 &lt;code&gt;yocto-build&lt;/code&gt; 你編譯 Yocto 用的資料夾，以我的範例為例則是 &lt;code&gt;/home/coldnew/poky&lt;/code&gt; ，因此要這樣使用
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --workdir /home/coldnew/poky
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
指定好編譯目錄後，當前的 shell 就會直接切入到 docker 環境並將 &lt;code&gt;/home/coldnew/poky&lt;/code&gt; 掛載到 &lt;code&gt;/yocto&lt;/code&gt; 去，就像這個樣子
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@8f58141dae3d:/yocto$
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這個環境就是符合 Yocto 編譯用的環境，所以可以直接在裡面放心的使用 bitbake。
&lt;/p&gt;

&lt;p&gt;
(在 docker 裡面的 UID 和 GID 會和原來的使用者相同)
&lt;/p&gt;

&lt;p&gt;
除此之外，如果你的 Host 電腦是 Linux，因為 yocto-build.sh 這腳本會自動掛載 &lt;code&gt;/tmp/.X11-unix&lt;/code&gt; 到 docker 去，因此也可以透過 &lt;code&gt;bitbake -c devshell&lt;/code&gt; 命令呼叫出圖形的終端機出來。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@8f58141dae3d:/yocto$ bitbake -c devshell busybox
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org7b5cb11&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org7b5cb11&quot;&gt;切新的 shell&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org7b5cb11&quot;&gt;
&lt;p&gt;
如果要切新的 shell 進到這個 container，則使用
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --shell
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這會建立新的 shell 連接到 container 去
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc96a94b&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc96a94b&quot;&gt;移除 container&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgc96a94b&quot;&gt;
&lt;p&gt;
如果你編譯完成了，不想要這個 container, 則可以透過以下命令去刪除它
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --rm
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org79cffc8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org79cffc8&quot;&gt;更新腳本&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org79cffc8&quot;&gt;
&lt;p&gt;
如果你需要更新 yocto-build.sh，使用以下命令即可達成
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --upgrade
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc311d44&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc311d44&quot;&gt;更新 Docker Image&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgc311d44&quot;&gt;
&lt;p&gt;
假設當前編譯 Yocto 用的 Docker Image 出現編譯不過的情況，則可以考慮更新 Docker Image
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ yocto-build --pull
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org21ba62b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org21ba62b&quot;&gt;後記&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org21ba62b&quot;&gt;
&lt;p&gt;
這個腳本理論上是跨平台，甚至是可以在 Mac OSX 下使用，不過之前在 Mac OSX 測試時出現一些 Docker 相關的錯誤，所以目前還只能用於 Linux 端的系統。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/135d6bd2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 GnuPG 的時候在 minibuffer 顯示密碼輸入</title>
      <link>https://coldnew.github.io/e7fdea95/</link>
      <guid>https://coldnew.github.io/e7fdea95/</guid>
      <pubDate>Fri, 09 Feb 2018 08:15:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/d3f33ddb/&quot;&gt;在 emacs 中使用 EasyPG 加密文章&lt;/a&gt; 一文中談到了如何在 emacs 裡面對於文章使用 &lt;a href=&quot;https://www.gnupg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GnuPG&lt;/a&gt; 進行加密。隨著 emacs 已經到了 emacs 25，有些早期的東西可能有些變化，讓我們來談談如何在 emacs 的 mini-buffer 直接輸入 GnuPG 要的密碼，而不需要彈出系統的圖形界面視窗。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
當我們在輸入 GnuPG 的密碼的時候，彈出的圖形視窗 (純終端機情況下可能是 curse 界面) 稱作為 &lt;code&gt;pinentry&lt;/code&gt;, 根據不同的實做以及平台有不同的版本，比如我的 Gentoo Linux 就至少有以下幾種版本:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ eselect pinentry list
Available pinentry binary implementations:
  [1]   pinentry-gnome3
  [2]   pinentry-qt *
  [3]   pinentry-gtk-2
  [4]   pinentry-qt4
  [5]   pinentry-curses
  [6]   pinentry-tty
&lt;/pre&gt;

&lt;p&gt;
而本文的目的，就是在使用 emacs 的時候，採用的是 &lt;code&gt;pinentry-emacs&lt;/code&gt; 而不是系統設定的版本。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgdda3bf0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdda3bf0&quot;&gt;設置 gpg-agent&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdda3bf0&quot;&gt;
&lt;p&gt;
首先我們要先設定 &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt; 這個檔案，並加入如下內容:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Emacs support&lt;/span&gt;
allow-emacs-pinentry
allow-loopback-pinentry

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;(optional) if you want to set timeout (second)&lt;/span&gt;
pinentry-timeout 3
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完成後，我們需要透過 &lt;code&gt;gpgconf&lt;/code&gt; 來告訴 &lt;code&gt;gpg-agent&lt;/code&gt; 設定檔案有變動
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ gpgconf --reload gpg-agent
&lt;/pre&gt;

&lt;p&gt;
當然你也可以透過 &lt;code&gt;kill&lt;/code&gt; 命令強制幹掉它
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $  kill -9 `pidof gpg-agent`
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3801a75&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3801a75&quot;&gt;設定 emacs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3801a75&quot;&gt;
&lt;p&gt;
設定完 `gpg-agent` 後，接下來就是設定 emacs 啦，首先我們先安裝 &lt;a href=&quot;https://elpa.gnu.org/packages/pinentry.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pinentry.el&lt;/a&gt; ，這個套件可以在 &lt;a href=&quot;https://elpa.gnu.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;elpa&lt;/a&gt; (emacs 預設的套件倉庫) 裡面找到:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x package-install RET pinentry RET
&lt;/pre&gt;

&lt;p&gt;
接下來在你的 &lt;code&gt;~/.emacs&lt;/code&gt; 加入:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;GnuPG 2.1 or later has an option to control the behavior of&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Pinentry invocation.  When set this to `&lt;/span&gt;&lt;span style=&quot;color: #ccaaff; font-style: italic;&quot;&gt;loopback&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&#39;, which redirects&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;all Pinentry queries to the caller, so Emacs can query passphrase&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;through the minibuffer instead of external Pinentry program.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;epa&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;setq&lt;/span&gt; epa-pinentry-mode &#39;loopback&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Start the Pinentry service&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;pinentry&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;pinentry-start&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
並對上面的設定進行 &lt;code&gt;eval&lt;/code&gt; ，就可以看到設定生效啦 ~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org710d9e8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org710d9e8&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org710d9e8&quot;&gt;
&lt;p&gt;
按照以上的設定，並確定有重起 &lt;code&gt;gpg-agent&lt;/code&gt; 的話，在編輯 &lt;code&gt;*.gpg&lt;/code&gt; 的檔案時，應該會看到密碼輸入欄是顯示在 mini-buffer 上的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/e7fdea95/gpg.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgedafab8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgedafab8&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgedafab8&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://emacs.stackexchange.com/questions/32881/enabling-minibuffer-pinentry-with-emacs-25-and-gnupg-2-1-on-ubuntu-xenial/32882&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Enabling minibuffer pinentry with Emacs 25 and GnuPG 2.1 on Ubuntu Xenial&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://emacs-china.org/t/topic/2294/7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 gnupg 来加密文件报错&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://blog.m157q.tw/posts/2017/01/20/make-gpg-agent-use-pinentry-curses-while-git-commit-gpg-sign/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;讓 gpg-agent 在 git commit gpg-sign 時使用 pinentry-curses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/d3f33ddb/&quot;&gt;在 emacs 中使用 EasyPG 加密文章&lt;/a&gt; 一文中談到了如何在 emacs 裡面對於文章使用 &lt;a href=&quot;https://www.gnupg.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GnuPG&lt;/a&gt; 進行加密。隨著 emacs 已經到了 emacs 25，有些早期的東西可能有些變化，讓我們來談談如何在 emacs 的 mini-buffer 直接輸入 GnuPG 要的密碼，而不需要彈出系統的圖形界面視窗。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
當我們在輸入 GnuPG 的密碼的時候，彈出的圖形視窗 (純終端機情況下可能是 curse 界面) 稱作為 &lt;code&gt;pinentry&lt;/code&gt;, 根據不同的實做以及平台有不同的版本，比如我的 Gentoo Linux 就至少有以下幾種版本:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ eselect pinentry list
Available pinentry binary implementations:
  [1]   pinentry-gnome3
  [2]   pinentry-qt *
  [3]   pinentry-gtk-2
  [4]   pinentry-qt4
  [5]   pinentry-curses
  [6]   pinentry-tty
&lt;/pre&gt;

&lt;p&gt;
而本文的目的，就是在使用 emacs 的時候，採用的是 &lt;code&gt;pinentry-emacs&lt;/code&gt; 而不是系統設定的版本。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgdda3bf0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdda3bf0&quot;&gt;設置 gpg-agent&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdda3bf0&quot;&gt;
&lt;p&gt;
首先我們要先設定 &lt;code&gt;~/.gnupg/gpg-agent.conf&lt;/code&gt; 這個檔案，並加入如下內容:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Emacs support&lt;/span&gt;
allow-emacs-pinentry
allow-loopback-pinentry

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;(optional) if you want to set timeout (second)&lt;/span&gt;
pinentry-timeout 3
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完成後，我們需要透過 &lt;code&gt;gpgconf&lt;/code&gt; 來告訴 &lt;code&gt;gpg-agent&lt;/code&gt; 設定檔案有變動
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ gpgconf --reload gpg-agent
&lt;/pre&gt;

&lt;p&gt;
當然你也可以透過 &lt;code&gt;kill&lt;/code&gt; 命令強制幹掉它
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $  kill -9 `pidof gpg-agent`
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3801a75&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3801a75&quot;&gt;設定 emacs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3801a75&quot;&gt;
&lt;p&gt;
設定完 `gpg-agent` 後，接下來就是設定 emacs 啦，首先我們先安裝 &lt;a href=&quot;https://elpa.gnu.org/packages/pinentry.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pinentry.el&lt;/a&gt; ，這個套件可以在 &lt;a href=&quot;https://elpa.gnu.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;elpa&lt;/a&gt; (emacs 預設的套件倉庫) 裡面找到:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x package-install RET pinentry RET
&lt;/pre&gt;

&lt;p&gt;
接下來在你的 &lt;code&gt;~/.emacs&lt;/code&gt; 加入:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;GnuPG 2.1 or later has an option to control the behavior of&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Pinentry invocation.  When set this to `&lt;/span&gt;&lt;span style=&quot;color: #ccaaff; font-style: italic;&quot;&gt;loopback&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&#39;, which redirects&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;all Pinentry queries to the caller, so Emacs can query passphrase&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;through the minibuffer instead of external Pinentry program.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;epa&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;setq&lt;/span&gt; epa-pinentry-mode &#39;loopback&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Start the Pinentry service&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;pinentry&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;pinentry-start&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
並對上面的設定進行 &lt;code&gt;eval&lt;/code&gt; ，就可以看到設定生效啦 ~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org710d9e8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org710d9e8&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org710d9e8&quot;&gt;
&lt;p&gt;
按照以上的設定，並確定有重起 &lt;code&gt;gpg-agent&lt;/code&gt; 的話，在編輯 &lt;code&gt;*.gpg&lt;/code&gt; 的檔案時，應該會看到密碼輸入欄是顯示在 mini-buffer 上的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/e7fdea95/gpg.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgedafab8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgedafab8&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgedafab8&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://emacs.stackexchange.com/questions/32881/enabling-minibuffer-pinentry-with-emacs-25-and-gnupg-2-1-on-ubuntu-xenial/32882&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Enabling minibuffer pinentry with Emacs 25 and GnuPG 2.1 on Ubuntu Xenial&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://emacs-china.org/t/topic/2294/7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 gnupg 来加密文件报错&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://blog.m157q.tw/posts/2017/01/20/make-gpg-agent-use-pinentry-curses-while-git-commit-gpg-sign/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;讓 gpg-agent 在 git commit gpg-sign 時使用 pinentry-curses&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/e7fdea95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SPS IPC Drives 2017 紀錄: 工作篇</title>
      <link>https://coldnew.github.io/5eec3a81/</link>
      <guid>https://coldnew.github.io/5eec3a81/</guid>
      <pubDate>Tue, 28 Nov 2017 03:39:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
今年有機會到德國參加 &lt;a href=&quot;https://www.mesago.de/en/SPS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SPS IPC Drives 2017&lt;/a&gt; 這個歐洲自動化工業展，在逛的過程中剛好看到一些工作徵求資訊，所以就拍一下整理在這邊。
&lt;/p&gt;

&lt;p&gt;
由於這個展覽偏向工業電腦、自動化控制等產業，因此我拍下來的工作資訊基本上大部分都是嵌入式系統相關工作，或是一些純軟的工作。
&lt;/p&gt;

&lt;p&gt;
也因為這個展覽在德國，所以大部分描述都是用德文寫的，適合想要到德國工作的人看看。
&lt;/p&gt;

&lt;p&gt;
以下就是這次拍到的 JD (Job Description), 共 53 張圖片原始檔，所以請讓瀏覽器慢慢下載:
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
註： 本文建議使用 &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firefox&lt;/a&gt; 觀看，因為 Chrome 不支援以下 CSS 屬性
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;img &lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;image-orientation&lt;/span&gt;: from-image;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0001.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0002.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0003.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0004.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0005.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0006.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0007.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0008.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0009.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0010.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0011.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0012.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0013.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0014.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0015.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0016.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0017.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0018.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0019.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0020.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0021.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0022.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0023.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0024.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0025.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0026.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0027.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0028.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0029.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0030.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0031.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0032.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0033.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0034.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0035.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0036.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0037.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0038.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0039.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0040.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0041.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0042.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0043.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0044.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0045.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0046.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0047.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0048.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0049.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0051.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0052.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0053.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0054.JPG&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
今年有機會到德國參加 &lt;a href=&quot;https://www.mesago.de/en/SPS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SPS IPC Drives 2017&lt;/a&gt; 這個歐洲自動化工業展，在逛的過程中剛好看到一些工作徵求資訊，所以就拍一下整理在這邊。
&lt;/p&gt;

&lt;p&gt;
由於這個展覽偏向工業電腦、自動化控制等產業，因此我拍下來的工作資訊基本上大部分都是嵌入式系統相關工作，或是一些純軟的工作。
&lt;/p&gt;

&lt;p&gt;
也因為這個展覽在德國，所以大部分描述都是用德文寫的，適合想要到德國工作的人看看。
&lt;/p&gt;

&lt;p&gt;
以下就是這次拍到的 JD (Job Description), 共 53 張圖片原始檔，所以請讓瀏覽器慢慢下載:
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
註： 本文建議使用 &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Firefox&lt;/a&gt; 觀看，因為 Chrome 不支援以下 CSS 屬性
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-css&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;img &lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;image-orientation&lt;/span&gt;: from-image;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0001.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0002.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0003.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0004.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0005.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0006.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0007.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0008.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0009.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0010.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0011.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0012.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0013.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0014.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0015.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0016.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0017.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0018.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0019.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0020.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0021.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0022.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0023.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0024.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0025.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0026.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0027.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0028.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0029.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0030.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0031.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0032.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0033.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0034.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0035.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0036.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0037.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0038.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0039.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0040.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0041.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0042.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0043.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0044.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0045.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0046.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0047.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0048.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0049.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0051.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0052.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0053.JPG&quot;&gt;
&lt;img src=&quot;https://coldnew.github.io/5eec3a81/0054.JPG&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/5eec3a81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>從 GitHub 直接下載 Clojure 函式庫</title>
      <link>https://coldnew.github.io/f421b76a/</link>
      <guid>https://coldnew.github.io/f421b76a/</guid>
      <pubDate>Wed, 17 May 2017 16:46:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
Clojure 的用戶多半都是透過 &lt;a href=&quot;https://clojars.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojars&lt;/a&gt; 去下載需要用的函式庫，但有些時候你需要的函式庫可能作者還沒將該版本放到 &lt;a href=&quot;https://clojars.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojars&lt;/a&gt; 上，這種時候該怎麼辦呢？
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
你可以選擇:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;透過 &lt;code&gt;lein install&lt;/code&gt; 安裝該函式庫到本地端&lt;/li&gt;

&lt;li&gt;使用本文的方法，透過 &lt;a href=&quot;https://jitpack.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 去下載你上傳到 GitHub 的修正版本&lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&quot;outline-container-org5674bc5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5674bc5&quot;&gt;關於 Jitpack&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org5674bc5&quot;&gt;
&lt;p&gt;
傳統 Java 開發都需要將你的函式庫發布到 &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven&lt;/a&gt; 或是其他類似的 repoitory 去，是否想要像 &lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go 語言&lt;/a&gt; 那樣直接從 GitHub 抓取需要的套件呢？透過 &lt;a href=&quot;https://jitpack.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JitPack&lt;/a&gt; 就可以做到這件事。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JitPack&lt;/a&gt; 會幫你把指定目標的 GitHub 專案的特定 TAG 製作成 JAR 放到他們自己的套件庫，這樣你就可以針對特定 TAG 去直接下載 GitHub 的套件，而不需要等待作者發佈到 &lt;a href=&quot;https://clojars.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojars&lt;/a&gt; 去。
&lt;/p&gt;

&lt;p&gt;
如果原作者沒有加入你需要的 TAG 那要怎辦呢？Fork 就好啦 ~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc0a5e48&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc0a5e48&quot;&gt;如何使用&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc0a5e48&quot;&gt;
&lt;p&gt;
這裡以我自己的 &lt;a href=&quot;https://github.com/coldnew/ipify.clj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ipify.clj&lt;/a&gt; 函式庫為例，假設我們要抓取的是 tag &lt;a href=&quot;https://github.com/coldnew/ipify.clj/releases/tag/v0.1.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v0.1.0&lt;/a&gt; 的版本的話，則可以在你的 &lt;code&gt;project.clj&lt;/code&gt; 加入這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defproject&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;aa&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;0.1.0-SNAPSHOT&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;skip ....&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:dependencies&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;org.clojure&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;clojure &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1.8.0&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                 &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;add following&lt;/span&gt;
                 &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;com.github.coldnew&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;ipify.clj &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;v0.1.0&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:repositories&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;jitpack&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;https://jitpack.io&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
注意到這邊的 &lt;code&gt;dependencies&lt;/code&gt; 格式是 &lt;code&gt;[com.github.your-github-name/your-project-name &quot;git-tag&quot;]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
接下來就可以透過 &lt;code&gt;lein deps&lt;/code&gt; 去抓取這個函式庫
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@Fevia ~/test $ lein deps
Could not transfer artifact com.github.coldnew:ipify.clj:pom:v0.1.0 from/to jitpack (https://jitpack.io): Read timed out
This could be due to a typo in :dependencies or network issues.
If you are behind a proxy, try setting the &#39;http_proxy&#39; environment variable.
&lt;/pre&gt;

&lt;p&gt;
第一次執行的時候可能會失敗，因為 &lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 會需要抓取你的 repo 並將其編譯好放置到套件庫去，不過等會兒在重新測試就可以成功囉
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@Fevia ~/test $ lein deps
Retrieving com/github/coldnew/ipify.clj/v0.1.0/ipify.clj-v0.1.0.pom from jitpack
Retrieving com/github/coldnew/ipify.clj/v0.1.0/ipify.clj-v0.1.0.jar from jitpack
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org00b003c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org00b003c&quot;&gt;後記&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org00b003c&quot;&gt;
&lt;p&gt;
其實還有一個 &lt;a href=&quot;https://github.com/tobyhede/lein-git-deps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lein-git-deps&lt;/a&gt; 這個 &lt;a href=&quot;https://leiningen.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leinigen&lt;/a&gt; 套件可以直接透過 git 把程式碼拉到本地端來解決你的專案依賴，不過這套件已經有段時間沒維護了。
&lt;/p&gt;

&lt;p&gt;
大部分我自己使用的情況，都是透過 &lt;code&gt;lein install&lt;/code&gt; 安裝到本地端來滿足依賴，&lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 這個套件庫可以自動幫你處理好開源的套件倒是蠻不錯的。
&lt;/p&gt;

&lt;p&gt;
如果是 &lt;code&gt;閉源&lt;/code&gt; 的函式庫，則可以考慮付費給 &lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 或是自己在自己的私有雲架設 Maven 倉庫。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgee63c7f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgee63c7f&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgee63c7f&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://lambdaisland.com/blog/17-05-2017-loading-clojure-libraries-directly-from-github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Loading Clojure Libraries Directly From Github&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/GcsSloop/AndroidNote/blob/master/Course/ReleaseLibraryByJitPack.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优雅的发布 Android 开源库(论 JitPack 的优越性)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/e443456bb506&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 寫自己的開源庫，發佈到 JitPack.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
Clojure 的用戶多半都是透過 &lt;a href=&quot;https://clojars.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojars&lt;/a&gt; 去下載需要用的函式庫，但有些時候你需要的函式庫可能作者還沒將該版本放到 &lt;a href=&quot;https://clojars.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojars&lt;/a&gt; 上，這種時候該怎麼辦呢？
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
你可以選擇:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;透過 &lt;code&gt;lein install&lt;/code&gt; 安裝該函式庫到本地端&lt;/li&gt;

&lt;li&gt;使用本文的方法，透過 &lt;a href=&quot;https://jitpack.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 去下載你上傳到 GitHub 的修正版本&lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&quot;outline-container-org5674bc5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5674bc5&quot;&gt;關於 Jitpack&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org5674bc5&quot;&gt;
&lt;p&gt;
傳統 Java 開發都需要將你的函式庫發布到 &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Maven&lt;/a&gt; 或是其他類似的 repoitory 去，是否想要像 &lt;a href=&quot;https://golang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Go 語言&lt;/a&gt; 那樣直接從 GitHub 抓取需要的套件呢？透過 &lt;a href=&quot;https://jitpack.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JitPack&lt;/a&gt; 就可以做到這件事。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JitPack&lt;/a&gt; 會幫你把指定目標的 GitHub 專案的特定 TAG 製作成 JAR 放到他們自己的套件庫，這樣你就可以針對特定 TAG 去直接下載 GitHub 的套件，而不需要等待作者發佈到 &lt;a href=&quot;https://clojars.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojars&lt;/a&gt; 去。
&lt;/p&gt;

&lt;p&gt;
如果原作者沒有加入你需要的 TAG 那要怎辦呢？Fork 就好啦 ~
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc0a5e48&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc0a5e48&quot;&gt;如何使用&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc0a5e48&quot;&gt;
&lt;p&gt;
這裡以我自己的 &lt;a href=&quot;https://github.com/coldnew/ipify.clj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ipify.clj&lt;/a&gt; 函式庫為例，假設我們要抓取的是 tag &lt;a href=&quot;https://github.com/coldnew/ipify.clj/releases/tag/v0.1.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v0.1.0&lt;/a&gt; 的版本的話，則可以在你的 &lt;code&gt;project.clj&lt;/code&gt; 加入這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defproject&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;aa&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;0.1.0-SNAPSHOT&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;skip ....&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:dependencies&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;org.clojure&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;clojure &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1.8.0&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                 &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;add following&lt;/span&gt;
                 &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;com.github.coldnew&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;ipify.clj &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;v0.1.0&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:repositories&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;jitpack&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;https://jitpack.io&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
注意到這邊的 &lt;code&gt;dependencies&lt;/code&gt; 格式是 &lt;code&gt;[com.github.your-github-name/your-project-name &quot;git-tag&quot;]&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
接下來就可以透過 &lt;code&gt;lein deps&lt;/code&gt; 去抓取這個函式庫
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@Fevia ~/test $ lein deps
Could not transfer artifact com.github.coldnew:ipify.clj:pom:v0.1.0 from/to jitpack (https://jitpack.io): Read timed out
This could be due to a typo in :dependencies or network issues.
If you are behind a proxy, try setting the &#39;http_proxy&#39; environment variable.
&lt;/pre&gt;

&lt;p&gt;
第一次執行的時候可能會失敗，因為 &lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 會需要抓取你的 repo 並將其編譯好放置到套件庫去，不過等會兒在重新測試就可以成功囉
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@Fevia ~/test $ lein deps
Retrieving com/github/coldnew/ipify.clj/v0.1.0/ipify.clj-v0.1.0.pom from jitpack
Retrieving com/github/coldnew/ipify.clj/v0.1.0/ipify.clj-v0.1.0.jar from jitpack
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org00b003c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org00b003c&quot;&gt;後記&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org00b003c&quot;&gt;
&lt;p&gt;
其實還有一個 &lt;a href=&quot;https://github.com/tobyhede/lein-git-deps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;lein-git-deps&lt;/a&gt; 這個 &lt;a href=&quot;https://leiningen.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Leinigen&lt;/a&gt; 套件可以直接透過 git 把程式碼拉到本地端來解決你的專案依賴，不過這套件已經有段時間沒維護了。
&lt;/p&gt;

&lt;p&gt;
大部分我自己使用的情況，都是透過 &lt;code&gt;lein install&lt;/code&gt; 安裝到本地端來滿足依賴，&lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 這個套件庫可以自動幫你處理好開源的套件倒是蠻不錯的。
&lt;/p&gt;

&lt;p&gt;
如果是 &lt;code&gt;閉源&lt;/code&gt; 的函式庫，則可以考慮付費給 &lt;a href=&quot;https://jitpack.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jitpack&lt;/a&gt; 或是自己在自己的私有雲架設 Maven 倉庫。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgee63c7f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgee63c7f&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgee63c7f&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://lambdaisland.com/blog/17-05-2017-loading-clojure-libraries-directly-from-github&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Loading Clojure Libraries Directly From Github&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/GcsSloop/AndroidNote/blob/master/Course/ReleaseLibraryByJitPack.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优雅的发布 Android 开源库(论 JitPack 的优越性)&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/e443456bb506&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 寫自己的開源庫，發佈到 JitPack.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/f421b76a/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android Things 學習筆記: GPIO 的輸出控制</title>
      <link>https://coldnew.github.io/468144f4/</link>
      <guid>https://coldnew.github.io/468144f4/</guid>
      <pubDate>Thu, 11 May 2017 15:43:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/8e801cc4/&quot;&gt;Android Things 學習筆記: Raspberry Pi 3 安裝 OS&lt;/a&gt; 一文中我們搞定了 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 在 Raspberry Pi 3 上的安裝，終於可以開始來寫我們的程式了。
&lt;/p&gt;

&lt;p&gt;
這邊文章讓我們來小試身手，透過 GPIO 的輸出來控制外接於 Raspberry Pi 3 上的 LED 燈。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div id=&quot;outline-container-orgb7d6a05&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb7d6a05&quot;&gt;使用設備&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb7d6a05&quot;&gt;
&lt;p&gt;
要完成本篇文章所描述的部份，你需要以下幾種器材
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Raspberry Pi 3&lt;/li&gt;

&lt;li&gt;LED (紅)&lt;/li&gt;

&lt;li&gt;電阻 (150 Ω, 1/4W)&lt;/li&gt;

&lt;li&gt;麵包板&lt;/li&gt;

&lt;li&gt;單蕊線或跳線&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfd18d16&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfd18d16&quot;&gt;硬體線路&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfd18d16&quot;&gt;
&lt;p&gt;
下面的硬體線路使用 &lt;a href=&quot;http://fritzing.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fritzing&lt;/a&gt; 軟體來繪製，我選用 &lt;code&gt;GPIO21&lt;/code&gt; 來當作提供給 LED 的電源端，由於 Raspberry Pi 3 的 GPIO 輸出為 &lt;code&gt;3.3V DC&lt;/code&gt; 的電壓，稍微再加個 &lt;code&gt;150 Ω&lt;/code&gt; 的電阻來保護我們的 LED 以及 Raspberry Pi 3。
(&lt;a href=&quot;rpi3_schematics.fzz&quot;&gt;下載設計檔案&lt;/a&gt;)
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;注意到電阻值可能會依據你的 LED 不同而改變&lt;/b&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;div class=&quot;row &quot;&gt;&lt;div class=&quot;col-md-6 &quot;&gt;

&lt;p&gt;
&lt;b&gt;麵包板連線&lt;/b&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/rpi3_schematics_bb.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;&lt;div class=&quot;col-md-5&quot;&gt;

&lt;p&gt;
&lt;b&gt;電路連接&lt;/b&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/rpi3_schematics.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;
Raspberry Pi 3 與 GPIO 編號的對應關係，可以參考 &lt;a href=&quot;https://www.element14.com/community/docs/DOC-73950/l/raspberry-pi-3-model-b-gpio-40-pin-block-pinout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Element14&lt;/a&gt; 所提供的圖表，這邊我將我用到的用紅線框出
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/pi3_gpio.png&quot; width=&quot;40%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd9a5b14&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd9a5b14&quot;&gt;建立專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd9a5b14&quot;&gt;
&lt;p&gt;
由於這是我們的第一個專案，就不透過 &lt;a href=&quot;https://github.com/androidthings/new-project-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;androidthings/new-project-template&lt;/a&gt; 這個範例樣板來建立我們的專案，讓我們透過 &lt;a href=&quot;https://developer.android.com/studio/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio&lt;/a&gt; 來一步一步開始吧。
&lt;/p&gt;

&lt;p&gt;
不過建立新專案之前，記得先透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 連上你的 Raspberry Pi 3
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@osx ~ $ adb connect Android.local
&lt;/pre&gt;

&lt;p&gt;
首先先打開 &lt;a href=&quot;https://developer.android.com/studio/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio&lt;/a&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來命名我們的專案叫做 &lt;code&gt;Hello Things&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在選擇 &lt;code&gt;Minimum SDK&lt;/code&gt; 的時候，記得要選擇 &lt;code&gt;API 24&lt;/code&gt; 或是以上的版本
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Empty Activity&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，按下 &lt;code&gt;Finish&lt;/code&gt; 即可
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3375c86&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3375c86&quot;&gt;修改專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3375c86&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org464c2d8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org464c2d8&quot;&gt;build.gradle&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org464c2d8&quot;&gt;
&lt;p&gt;
建立好專案後，我們首先要修改 &lt;code&gt;build.gradle&lt;/code&gt; 並加入 Android Things 的依賴
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;dependencies &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;//  &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;...&lt;/span&gt;
    provided &lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;&#39;&lt;/span&gt;com.google.android.things:androidthings:0.3-devpreview&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你不知道要放在哪裡，請參考下圖
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/b1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org5981923&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5981923&quot;&gt;AndroidManifest.xml&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org5981923&quot;&gt;
&lt;p&gt;
接下來在你的 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 加入以下東西，我們要讓這個程式可以一開機就啟動
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-diff&quot;&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;--- &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;a/AndroidManifest.xml  2017-05-11 22:13:00.000000000 +0800&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;+++ &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;b/AndroidManifest.xml  2017-05-11 22:13:34.000000000 +0800&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -5,6 +5,9 @@&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     &amp;lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         android:label=&quot;@string/app_name&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;      &amp;lt;uses-library android:name=&quot;com.google.android.things&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         &amp;lt;activity android:name=&quot;.MainActivity&quot;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;             &amp;lt;intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;                 &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -12,6 +15,14 @@&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;                 &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;             &amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         &amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        &amp;lt;!-- Launch activity automatically on boot --&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        &amp;lt;intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;            &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;            &amp;lt;category android:name=&quot;android.intent.category.IOT_LAUNCHER&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;            &amp;lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        &amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     &amp;lt;/application&amp;gt;&lt;/span&gt;

 &amp;lt;/manifest&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你不知道要放在哪裡，請參考下圖
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/b2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org78fa088&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org78fa088&quot;&gt;點亮 LED 燈&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org78fa088&quot;&gt;
&lt;p&gt;
是時候來撰寫我們的程式了，讓我們來打開 &lt;code&gt;hellothings/MainActivity.java&lt;/code&gt; 檔案吧!!
&lt;/p&gt;

&lt;p&gt;
首先回顧前面的定義，我們希望可以控制 &lt;code&gt;GPIO21&lt;/code&gt; 來點亮 LED 燈，因此首先在 &lt;code&gt;MainActivity&lt;/code&gt; 這個 class 加入我們的一些設定
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;TAG&lt;/span&gt; = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;HelloThings&quot;&lt;/span&gt;;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;LED&lt;/span&gt; = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;BCM21&quot;&lt;/span&gt;;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Gpio&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mLedGpio&lt;/span&gt;;          &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;com.google.android.things.pio.Gpio;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來將 &lt;code&gt;onCreate&lt;/code&gt; 修改成以下，我們讓他打開 &lt;code&gt;GPIO21&lt;/code&gt; 並將其設定成 &lt;code&gt;輸出為 1&lt;/code&gt; 的接腳
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;onCreate&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Bundle&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;super&lt;/span&gt;.onCreate&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
    setContentView&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;R.layout.activity_main&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

    &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;com.google.android.things.pio.PeripheralManagerService;&lt;/span&gt;
    &lt;span style=&quot;color: #fff59d;&quot;&gt;PeripheralManagerService&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;service&lt;/span&gt; = &lt;span style=&quot;color: #aaffaa;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;PeripheralManagerService&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;;
    Log.d&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Available GPIOs: &quot;&lt;/span&gt; + service.getGpioList&lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;android.util.Log;&lt;/span&gt;

    &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio = service.openGpio&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;LED&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
        mLedGpio.setDirection&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;Gpio&lt;/span&gt;.DIRECTION_OUT_INITIALLY_LOW&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
        mLedGpio.setValue&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
        Log.i&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start blinking LED by GPIO21&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        Log.e&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
由於我們在 &lt;code&gt;onCreate&lt;/code&gt; 時打開了 &lt;code&gt;GPIO21&lt;/code&gt; ，因此要記得在 &lt;code&gt;onDestroy&lt;/code&gt; 將他關閉
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;onDestroy&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;super&lt;/span&gt;.onDestroy&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;;
    Log.i&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Closing LED GPIO21 pin&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio.close&lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        Log.e&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio = &lt;span style=&quot;color: #ccaaff;&quot;&gt;null&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
嘗試執行當前的程式看看，你應該會看到你接在麵包板的 LED 亮了起來，接下來讓我們修改一下程式，讓他變成閃爍燈吧~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/c1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orga90bae0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga90bae0&quot;&gt;閃爍吧 LED&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga90bae0&quot;&gt;
&lt;p&gt;
成功點亮 LED 後，我們接下來要讓他進行閃爍囉。
&lt;/p&gt;

&lt;p&gt;
延續上面的專案，首先在  &lt;code&gt;MainActivity&lt;/code&gt; 這個 class 加入我們要閃爍多久，以及 Handler 的宣告
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;INTERVAL_BETWEEN_BLINKS_MS&lt;/span&gt; = 1000;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Handler&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mHandler&lt;/span&gt; = &lt;span style=&quot;color: #aaffaa;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Handler&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;android.os.Handler&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著在剛剛設定 GPIO 輸出值的後面，設定我們的 Handler 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
     mLedGpio = service.openGpio&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;LED&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     mLedGpio.setDirection&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;Gpio&lt;/span&gt;.DIRECTION_OUT_INITIALLY_LOW&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     mLedGpio.setValue&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     Log.i&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start blinking LED by GPIO21&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     mHandler.post&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;mBlinkRunnable&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt;------  Add this&lt;/span&gt;
     &lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
         Log.e&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
並在後面完成我們的 &lt;code&gt;mBlinkRunnable&lt;/code&gt; 實作
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Runnable&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mBlinkRunnable&lt;/span&gt; = &lt;span style=&quot;color: #aaffaa;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Runnable&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; run&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;mLedGpio == &lt;span style=&quot;color: #ccaaff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt;;
        &lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;
            mLedGpio.setValue&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff3333;&quot;&gt;!&lt;/span&gt;mLedGpio.getValue&lt;span style=&quot;color: #ccaaff;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;  &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Toggle the GPIO state&lt;/span&gt;
            Log.d&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;GPIO21 set to &quot;&lt;/span&gt; + mLedGpio.getValue&lt;span style=&quot;color: #ccaaff;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;
            mHandler.postDelayed&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;mBlinkRunnable, INTERVAL_BETWEEN_BLINKS_MS&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;
        &lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;
            Log.e&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;
        &lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
在這邊，我們透過了 &lt;a href=&quot;https://developer.android.com/reference/java/lang/Runnable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java.lang.Runnable&lt;/a&gt; 去建立我們的執行緒，而在裡面則透過取得當前的 GPIO 數值將其反向，從而另 LED 閃爍。如果你想要閃爍快一點，可以修改前面宣告的 &lt;code&gt;INTERVAL_BETWEEN_BLINKS_MS&lt;/code&gt; 變數。
&lt;/p&gt;

&lt;p&gt;
由於我們使用了 &lt;a href=&quot;https://developer.android.com/reference/android/os/Handler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android.os.Handler&lt;/a&gt; ，記得要在 &lt;code&gt;onDestroy&lt;/code&gt; 時候幹掉他
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;onDestroy&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;super&lt;/span&gt;.onDestroy&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;;
    mHandler.removeCallbacks&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;mBlinkRunnable&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt;---- Add this&lt;/span&gt;
    Log.i&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Closing LED GPIO21 pin&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio.close&lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        Log.e&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio = &lt;span style=&quot;color: #ccaaff;&quot;&gt;null&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8552457&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8552457&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8552457&quot;&gt;
&lt;p&gt;
如果你有照著本文接線並執行程式的話，你應該會得到以下這樣的結果 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/blink.gif&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf49fe16&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf49fe16&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf49fe16&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/HelloThings&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以直接透過 git 去取得完整專案原始碼
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;coldnew/HelloThings&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge7b2edf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge7b2edf&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge7b2edf&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.survivingwithandroid.com/2016/03/arduino-led-control-android-app.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arduino Led: Control RGB Led remotely using Arduino and Android app&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://androidthings.rocks/2017/01/08/your-first-blinking-led/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Your first blinking LED with Android Things&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/8e801cc4/&quot;&gt;Android Things 學習筆記: Raspberry Pi 3 安裝 OS&lt;/a&gt; 一文中我們搞定了 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 在 Raspberry Pi 3 上的安裝，終於可以開始來寫我們的程式了。
&lt;/p&gt;

&lt;p&gt;
這邊文章讓我們來小試身手，透過 GPIO 的輸出來控制外接於 Raspberry Pi 3 上的 LED 燈。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div id=&quot;outline-container-orgb7d6a05&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb7d6a05&quot;&gt;使用設備&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb7d6a05&quot;&gt;
&lt;p&gt;
要完成本篇文章所描述的部份，你需要以下幾種器材
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Raspberry Pi 3&lt;/li&gt;

&lt;li&gt;LED (紅)&lt;/li&gt;

&lt;li&gt;電阻 (150 Ω, 1/4W)&lt;/li&gt;

&lt;li&gt;麵包板&lt;/li&gt;

&lt;li&gt;單蕊線或跳線&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfd18d16&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfd18d16&quot;&gt;硬體線路&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfd18d16&quot;&gt;
&lt;p&gt;
下面的硬體線路使用 &lt;a href=&quot;http://fritzing.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fritzing&lt;/a&gt; 軟體來繪製，我選用 &lt;code&gt;GPIO21&lt;/code&gt; 來當作提供給 LED 的電源端，由於 Raspberry Pi 3 的 GPIO 輸出為 &lt;code&gt;3.3V DC&lt;/code&gt; 的電壓，稍微再加個 &lt;code&gt;150 Ω&lt;/code&gt; 的電阻來保護我們的 LED 以及 Raspberry Pi 3。
(&lt;a href=&quot;rpi3_schematics.fzz&quot;&gt;下載設計檔案&lt;/a&gt;)
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;注意到電阻值可能會依據你的 LED 不同而改變&lt;/b&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;div class=&quot;row &quot;&gt;&lt;div class=&quot;col-md-6 &quot;&gt;

&lt;p&gt;
&lt;b&gt;麵包板連線&lt;/b&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/rpi3_schematics_bb.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;&lt;div class=&quot;col-md-5&quot;&gt;

&lt;p&gt;
&lt;b&gt;電路連接&lt;/b&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/rpi3_schematics.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;
Raspberry Pi 3 與 GPIO 編號的對應關係，可以參考 &lt;a href=&quot;https://www.element14.com/community/docs/DOC-73950/l/raspberry-pi-3-model-b-gpio-40-pin-block-pinout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Element14&lt;/a&gt; 所提供的圖表，這邊我將我用到的用紅線框出
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/pi3_gpio.png&quot; width=&quot;40%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd9a5b14&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd9a5b14&quot;&gt;建立專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd9a5b14&quot;&gt;
&lt;p&gt;
由於這是我們的第一個專案，就不透過 &lt;a href=&quot;https://github.com/androidthings/new-project-template&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;androidthings/new-project-template&lt;/a&gt; 這個範例樣板來建立我們的專案，讓我們透過 &lt;a href=&quot;https://developer.android.com/studio/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio&lt;/a&gt; 來一步一步開始吧。
&lt;/p&gt;

&lt;p&gt;
不過建立新專案之前，記得先透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 連上你的 Raspberry Pi 3
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@osx ~ $ adb connect Android.local
&lt;/pre&gt;

&lt;p&gt;
首先先打開 &lt;a href=&quot;https://developer.android.com/studio/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio&lt;/a&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來命名我們的專案叫做 &lt;code&gt;Hello Things&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在選擇 &lt;code&gt;Minimum SDK&lt;/code&gt; 的時候，記得要選擇 &lt;code&gt;API 24&lt;/code&gt; 或是以上的版本
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Empty Activity&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，按下 &lt;code&gt;Finish&lt;/code&gt; 即可
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/a5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3375c86&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3375c86&quot;&gt;修改專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3375c86&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org464c2d8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org464c2d8&quot;&gt;build.gradle&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org464c2d8&quot;&gt;
&lt;p&gt;
建立好專案後，我們首先要修改 &lt;code&gt;build.gradle&lt;/code&gt; 並加入 Android Things 的依賴
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;dependencies &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;//  &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;...&lt;/span&gt;
    provided &lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;&#39;&lt;/span&gt;com.google.android.things:androidthings:0.3-devpreview&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你不知道要放在哪裡，請參考下圖
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/b1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org5981923&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5981923&quot;&gt;AndroidManifest.xml&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org5981923&quot;&gt;
&lt;p&gt;
接下來在你的 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 加入以下東西，我們要讓這個程式可以一開機就啟動
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-diff&quot;&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;--- &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;a/AndroidManifest.xml  2017-05-11 22:13:00.000000000 +0800&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;+++ &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;b/AndroidManifest.xml  2017-05-11 22:13:34.000000000 +0800&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -5,6 +5,9 @@&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     &amp;lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         android:label=&quot;@string/app_name&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;      &amp;lt;uses-library android:name=&quot;com.google.android.things&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         &amp;lt;activity android:name=&quot;.MainActivity&quot;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;             &amp;lt;intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;                 &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -12,6 +15,14 @@&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;                 &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;             &amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         &amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        &amp;lt;!-- Launch activity automatically on boot --&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        &amp;lt;intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;            &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;            &amp;lt;category android:name=&quot;android.intent.category.IOT_LAUNCHER&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;            &amp;lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        &amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     &amp;lt;/application&amp;gt;&lt;/span&gt;

 &amp;lt;/manifest&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你不知道要放在哪裡，請參考下圖
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/b2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org78fa088&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org78fa088&quot;&gt;點亮 LED 燈&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org78fa088&quot;&gt;
&lt;p&gt;
是時候來撰寫我們的程式了，讓我們來打開 &lt;code&gt;hellothings/MainActivity.java&lt;/code&gt; 檔案吧!!
&lt;/p&gt;

&lt;p&gt;
首先回顧前面的定義，我們希望可以控制 &lt;code&gt;GPIO21&lt;/code&gt; 來點亮 LED 燈，因此首先在 &lt;code&gt;MainActivity&lt;/code&gt; 這個 class 加入我們的一些設定
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;TAG&lt;/span&gt; = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;HelloThings&quot;&lt;/span&gt;;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;LED&lt;/span&gt; = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;BCM21&quot;&lt;/span&gt;;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Gpio&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mLedGpio&lt;/span&gt;;          &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;com.google.android.things.pio.Gpio;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來將 &lt;code&gt;onCreate&lt;/code&gt; 修改成以下，我們讓他打開 &lt;code&gt;GPIO21&lt;/code&gt; 並將其設定成 &lt;code&gt;輸出為 1&lt;/code&gt; 的接腳
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;onCreate&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Bundle&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;super&lt;/span&gt;.onCreate&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;savedInstanceState&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
    setContentView&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;R.layout.activity_main&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

    &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;com.google.android.things.pio.PeripheralManagerService;&lt;/span&gt;
    &lt;span style=&quot;color: #fff59d;&quot;&gt;PeripheralManagerService&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;service&lt;/span&gt; = &lt;span style=&quot;color: #aaffaa;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;PeripheralManagerService&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;;
    Log.d&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Available GPIOs: &quot;&lt;/span&gt; + service.getGpioList&lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;android.util.Log;&lt;/span&gt;

    &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio = service.openGpio&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;LED&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
        mLedGpio.setDirection&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;Gpio&lt;/span&gt;.DIRECTION_OUT_INITIALLY_LOW&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
        mLedGpio.setValue&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
        Log.i&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start blinking LED by GPIO21&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        Log.e&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
由於我們在 &lt;code&gt;onCreate&lt;/code&gt; 時打開了 &lt;code&gt;GPIO21&lt;/code&gt; ，因此要記得在 &lt;code&gt;onDestroy&lt;/code&gt; 將他關閉
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;onDestroy&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;super&lt;/span&gt;.onDestroy&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;;
    Log.i&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Closing LED GPIO21 pin&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio.close&lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        Log.e&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio = &lt;span style=&quot;color: #ccaaff;&quot;&gt;null&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
嘗試執行當前的程式看看，你應該會看到你接在麵包板的 LED 亮了起來，接下來讓我們修改一下程式，讓他變成閃爍燈吧~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/c1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orga90bae0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga90bae0&quot;&gt;閃爍吧 LED&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga90bae0&quot;&gt;
&lt;p&gt;
成功點亮 LED 後，我們接下來要讓他進行閃爍囉。
&lt;/p&gt;

&lt;p&gt;
延續上面的專案，首先在  &lt;code&gt;MainActivity&lt;/code&gt; 這個 class 加入我們要閃爍多久，以及 Handler 的宣告
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;INTERVAL_BETWEEN_BLINKS_MS&lt;/span&gt; = 1000;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Handler&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mHandler&lt;/span&gt; = &lt;span style=&quot;color: #aaffaa;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Handler&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;android.os.Handler&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著在剛剛設定 GPIO 輸出值的後面，設定我們的 Handler 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
     mLedGpio = service.openGpio&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;LED&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     mLedGpio.setDirection&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;Gpio&lt;/span&gt;.DIRECTION_OUT_INITIALLY_LOW&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     mLedGpio.setValue&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     Log.i&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start blinking LED by GPIO21&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
     mHandler.post&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;mBlinkRunnable&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt;------  Add this&lt;/span&gt;
     &lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
         Log.e&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
並在後面完成我們的 &lt;code&gt;mBlinkRunnable&lt;/code&gt; 實作
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Runnable&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mBlinkRunnable&lt;/span&gt; = &lt;span style=&quot;color: #aaffaa;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;Runnable&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; run&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;mLedGpio == &lt;span style=&quot;color: #ccaaff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;
            &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt;;
        &lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;
            mLedGpio.setValue&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff3333;&quot;&gt;!&lt;/span&gt;mLedGpio.getValue&lt;span style=&quot;color: #ccaaff;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;  &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Toggle the GPIO state&lt;/span&gt;
            Log.d&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;GPIO21 set to &quot;&lt;/span&gt; + mLedGpio.getValue&lt;span style=&quot;color: #ccaaff;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;
            mHandler.postDelayed&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;mBlinkRunnable, INTERVAL_BETWEEN_BLINKS_MS&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;
        &lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;
            Log.e&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;;
        &lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
在這邊，我們透過了 &lt;a href=&quot;https://developer.android.com/reference/java/lang/Runnable.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;java.lang.Runnable&lt;/a&gt; 去建立我們的執行緒，而在裡面則透過取得當前的 GPIO 數值將其反向，從而另 LED 閃爍。如果你想要閃爍快一點，可以修改前面宣告的 &lt;code&gt;INTERVAL_BETWEEN_BLINKS_MS&lt;/code&gt; 變數。
&lt;/p&gt;

&lt;p&gt;
由於我們使用了 &lt;a href=&quot;https://developer.android.com/reference/android/os/Handler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android.os.Handler&lt;/a&gt; ，記得要在 &lt;code&gt;onDestroy&lt;/code&gt; 時候幹掉他
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;onDestroy&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;super&lt;/span&gt;.onDestroy&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;;
    mHandler.removeCallbacks&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;mBlinkRunnable&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt;---- Add this&lt;/span&gt;
    Log.i&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Closing LED GPIO21 pin&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #aaffaa;&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio.close&lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;catch&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;IOException&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        Log.e&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;TAG, &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Error on PeripheralIO API&quot;&lt;/span&gt;, e&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #aaffaa;&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        mLedGpio = &lt;span style=&quot;color: #ccaaff;&quot;&gt;null&lt;/span&gt;;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8552457&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8552457&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8552457&quot;&gt;
&lt;p&gt;
如果你有照著本文接線並執行程式的話，你應該會得到以下這樣的結果 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/468144f4/blink.gif&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf49fe16&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf49fe16&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf49fe16&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/HelloThings&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以直接透過 git 去取得完整專案原始碼
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;coldnew/HelloThings&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge7b2edf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge7b2edf&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge7b2edf&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.survivingwithandroid.com/2016/03/arduino-led-control-android-app.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arduino Led: Control RGB Led remotely using Arduino and Android app&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://androidthings.rocks/2017/01/08/your-first-blinking-led/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Your first blinking LED with Android Things&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/468144f4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android Things 學習筆記: Raspberry Pi 3 安裝 OS</title>
      <link>https://coldnew.github.io/8e801cc4/</link>
      <guid>https://coldnew.github.io/8e801cc4/</guid>
      <pubDate>Wed, 10 May 2017 03:42:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/399f19c/&quot;&gt;Android Things 學習筆記: 介紹&lt;/a&gt; 一文我們介紹了 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; ，在我們正式開始開發我們的程式之前，我們先將手邊的 &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 裝上可以用 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的映像檔案吧。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
&lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的網頁有針對  &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 的 &lt;a href=&quot;https://developer.android.com/things/hardware/raspberrypi.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started&lt;/a&gt; 頁面，就讓我們從這一頁開始我們的 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 旅程吧。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orge4fa615&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge4fa615&quot;&gt;下載映像檔&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge4fa615&quot;&gt;
&lt;p&gt;
首先到 &lt;a href=&quot;https://developer.android.com/things/preview/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;System Image Downloads&lt;/a&gt; 去下載 &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 的映像檔案，接著將其解壓縮
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ unzip androidthings_rpi3_devpreview_3.zip

&lt;/pre&gt;

&lt;p&gt;
解壓縮後會得到 &lt;code&gt;iot_rpi3.img&lt;/code&gt; 這個映像檔。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfd0d2e2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfd0d2e2&quot;&gt;燒錄到 sdcard&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfd0d2e2&quot;&gt;
&lt;p&gt;
如果你是在 Linux 下，可以直接透過 &lt;code&gt;dd&lt;/code&gt; 命令將他寫到你的 sdcard
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ sudo dd if=iot_rpi3.img of=/dev/sdc bs=1M

&lt;/pre&gt;

&lt;p&gt;
在 Mac OSX 下，我則是透過 &lt;a href=&quot;https://www.tweaking4all.com/software/macosx-software/macosx-apple-pi-baker/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ApplePi Baker&lt;/a&gt; 這個圖形化的程式來進行燒錄
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/applepi-baker.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6a9078c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6a9078c&quot;&gt;啟動 RPI3&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6a9078c&quot;&gt;
&lt;p&gt;
將你燒好映像檔的 sdcard 插入到  &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 後，插入 USB 電源以及接上網路線，如果你有 HDMI 螢幕的話，可以考慮接上去 (不接也可以)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/raspberrypi-connections.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你有接上 HDMI 的話，開機完成後會看到這樣的畫面，上面會顯示你的 Raspberry Pi 3 的 IP 位址
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/screenshot.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgce134a2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgce134a2&quot;&gt;連接 ADB&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgce134a2&quot;&gt;
&lt;p&gt;
啟動完 Raspberry Pi 3 後，我們可以透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 工具去進行連線，假設你的系統有支援 &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-configuration_networking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zeroconf&lt;/a&gt; (在 Linux 下是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Avahi_(software)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Avahi&lt;/a&gt;, Windows 下是 &lt;a href=&quot;https://support.apple.com/kb/DL999?locale=zh_TW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bonjour&lt;/a&gt;) 的話，你可以透過 &lt;code&gt;Android.local&lt;/code&gt; 在同一網域下接觸到你的 Raspberry Pi 3
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ ping Android.local
PING android.local (192.168.20.102): 56 data bytes
64 bytes from 192.168.20.102: icmp_seq=0 ttl=64 time=57.599 ms
64 bytes from 192.168.20.102: icmp_seq=1 ttl=64 time=4.529 ms
^C
--- android.local ping statistics ---
2 packets transmitted, 2 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 4.529/31.064/57.599/26.535 ms
&lt;/pre&gt;

&lt;p&gt;
於是我們就可以透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 工具去進行連線
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ adb connect Android.local

&lt;/pre&gt;

&lt;p&gt;
你也可以登入進你的 Raspberry Pi 3 去看看裡面有啥東西
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ adb shell
rpi3:/ $ ls
acct    d            etc               init            init.usb.configfs.rc mnt         property_contexts seapp_contexts   storage    ueventd.rpi3.rc
cache   data         file_contexts.bin init.environ.rc init.usb.rc          oem         root              selinux_version  sys        vendor
charger default.prop fstab.rpi3        init.rc         init.zygote32.rc     postinstall sbin              sepolicy         system
config  dev          gapps             init.rpi3.rc    lost+found           proc        sdcard            service_contexts ueventd.rc
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6416bb0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6416bb0&quot;&gt;設定 Wi-Fi&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6416bb0&quot;&gt;
&lt;p&gt;
當你登入你的 Raspberry Pi 後，如果你想拔掉網路線並起用 Raspberry Pi 3 上面的 Wi-Fi 的話，你可以透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 去進行設定
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ adb shell am startservice &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -n com.google.wifisetup/.WifiSetupService &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -a WifiSetupService.Connect &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -e ssid &amp;lt;Network_SSID&amp;gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -e passphrase &amp;lt;Network_Passcode&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(如果無線網路沒密碼的話，可以移除 passphrase 一行)
&lt;/p&gt;

&lt;p&gt;
設定好後，可以透過 &lt;code&gt;logcat&lt;/code&gt; 去進行驗證
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ adb logcat -d | grep Wifi
...
V WifiWatcher: Network state changed to CONNECTED
V WifiWatcher: SSID changed: ...
I WifiConfigurator: Successfully connected to ...
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
也可以透過 &lt;code&gt;ping&lt;/code&gt; 命令確認你的 Raspberry Pi 3 可以順利透過無線上網
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ adb shell ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=57 time=6.67 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=57 time=55.5 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=57 time=23.0 ms
64 bytes from 8.8.8.8: icmp_seq=4 ttl=57 time=245 ms
&lt;/pre&gt;

&lt;p&gt;
如果要移除所有的無線網路設定，則可以透過以下命令進行
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ adb shell am startservice &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -n com.google.wifisetup/.WifiSetupService &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -a WifiSetupService.Reset
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orga177865&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga177865&quot;&gt;透過 UART 登入&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga177865&quot;&gt;
&lt;p&gt;
如果你就是不想接上網路線來對 Raspberry Pi 3 進行設定，那我們也可以透過 &lt;a href=&quot;https://www.adafruit.com/products/954&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TTL 轉 USB 線&lt;/a&gt; 來接到 Raspberry Pi 上面的 UART 接腳，透過 UART 來進入 console。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/raspberrypi-console.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接上後，看你是要用 &lt;a href=&quot;https://www.gnu.org/s/emacs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt;、 &lt;a href=&quot;https://www.decisivetactics.com/products/serial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Serial&lt;/a&gt; (Mac OS)、&lt;a href=&quot;http://www.putty.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Putty&lt;/a&gt; (Windows)、&lt;a href=&quot;https://linux.die.net/man/1/gtkterm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GtkTerm&lt;/a&gt; (Linux) 來進行連線，記得以下東西不要設定錯誤就好:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Baud Rate: 115200&lt;/li&gt;
&lt;li&gt;Data Bits: 8&lt;/li&gt;
&lt;li&gt;Parity: None&lt;/li&gt;
&lt;li&gt;Stop Bits: 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
我自己是習慣透過 &lt;a href=&quot;https://www.gnu.org/s/emacs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt; 的 &lt;code&gt;M-x serial-term&lt;/code&gt; 命令去進行連接
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/serial.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org4b8c928&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4b8c928&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4b8c928&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/things/hardware/raspberrypi.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things: Raspberry Pi 3 Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/399f19c/&quot;&gt;Android Things 學習筆記: 介紹&lt;/a&gt; 一文我們介紹了 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; ，在我們正式開始開發我們的程式之前，我們先將手邊的 &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 裝上可以用 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的映像檔案吧。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
&lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的網頁有針對  &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 的 &lt;a href=&quot;https://developer.android.com/things/hardware/raspberrypi.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Started&lt;/a&gt; 頁面，就讓我們從這一頁開始我們的 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 旅程吧。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orge4fa615&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge4fa615&quot;&gt;下載映像檔&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge4fa615&quot;&gt;
&lt;p&gt;
首先到 &lt;a href=&quot;https://developer.android.com/things/preview/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;System Image Downloads&lt;/a&gt; 去下載 &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 的映像檔案，接著將其解壓縮
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ unzip androidthings_rpi3_devpreview_3.zip

&lt;/pre&gt;

&lt;p&gt;
解壓縮後會得到 &lt;code&gt;iot_rpi3.img&lt;/code&gt; 這個映像檔。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfd0d2e2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfd0d2e2&quot;&gt;燒錄到 sdcard&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfd0d2e2&quot;&gt;
&lt;p&gt;
如果你是在 Linux 下，可以直接透過 &lt;code&gt;dd&lt;/code&gt; 命令將他寫到你的 sdcard
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ sudo dd if=iot_rpi3.img of=/dev/sdc bs=1M

&lt;/pre&gt;

&lt;p&gt;
在 Mac OSX 下，我則是透過 &lt;a href=&quot;https://www.tweaking4all.com/software/macosx-software/macosx-apple-pi-baker/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ApplePi Baker&lt;/a&gt; 這個圖形化的程式來進行燒錄
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/applepi-baker.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6a9078c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6a9078c&quot;&gt;啟動 RPI3&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6a9078c&quot;&gt;
&lt;p&gt;
將你燒好映像檔的 sdcard 插入到  &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 後，插入 USB 電源以及接上網路線，如果你有 HDMI 螢幕的話，可以考慮接上去 (不接也可以)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/raspberrypi-connections.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你有接上 HDMI 的話，開機完成後會看到這樣的畫面，上面會顯示你的 Raspberry Pi 3 的 IP 位址
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/screenshot.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgce134a2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgce134a2&quot;&gt;連接 ADB&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgce134a2&quot;&gt;
&lt;p&gt;
啟動完 Raspberry Pi 3 後，我們可以透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 工具去進行連線，假設你的系統有支援 &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-configuration_networking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zeroconf&lt;/a&gt; (在 Linux 下是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Avahi_(software)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Avahi&lt;/a&gt;, Windows 下是 &lt;a href=&quot;https://support.apple.com/kb/DL999?locale=zh_TW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bonjour&lt;/a&gt;) 的話，你可以透過 &lt;code&gt;Android.local&lt;/code&gt; 在同一網域下接觸到你的 Raspberry Pi 3
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ ping Android.local
PING android.local (192.168.20.102): 56 data bytes
64 bytes from 192.168.20.102: icmp_seq=0 ttl=64 time=57.599 ms
64 bytes from 192.168.20.102: icmp_seq=1 ttl=64 time=4.529 ms
^C
--- android.local ping statistics ---
2 packets transmitted, 2 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 4.529/31.064/57.599/26.535 ms
&lt;/pre&gt;

&lt;p&gt;
於是我們就可以透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 工具去進行連線
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ adb connect Android.local

&lt;/pre&gt;

&lt;p&gt;
你也可以登入進你的 Raspberry Pi 3 去看看裡面有啥東西
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ adb shell
rpi3:/ $ ls
acct    d            etc               init            init.usb.configfs.rc mnt         property_contexts seapp_contexts   storage    ueventd.rpi3.rc
cache   data         file_contexts.bin init.environ.rc init.usb.rc          oem         root              selinux_version  sys        vendor
charger default.prop fstab.rpi3        init.rc         init.zygote32.rc     postinstall sbin              sepolicy         system
config  dev          gapps             init.rpi3.rc    lost+found           proc        sdcard            service_contexts ueventd.rc
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6416bb0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6416bb0&quot;&gt;設定 Wi-Fi&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6416bb0&quot;&gt;
&lt;p&gt;
當你登入你的 Raspberry Pi 後，如果你想拔掉網路線並起用 Raspberry Pi 3 上面的 Wi-Fi 的話，你可以透過 &lt;a href=&quot;https://developer.android.com/tools/help/adb.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adb&lt;/a&gt; 去進行設定
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ adb shell am startservice &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -n com.google.wifisetup/.WifiSetupService &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -a WifiSetupService.Connect &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -e ssid &amp;lt;Network_SSID&amp;gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -e passphrase &amp;lt;Network_Passcode&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
(如果無線網路沒密碼的話，可以移除 passphrase 一行)
&lt;/p&gt;

&lt;p&gt;
設定好後，可以透過 &lt;code&gt;logcat&lt;/code&gt; 去進行驗證
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ adb logcat -d | grep Wifi
...
V WifiWatcher: Network state changed to CONNECTED
V WifiWatcher: SSID changed: ...
I WifiConfigurator: Successfully connected to ...
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
也可以透過 &lt;code&gt;ping&lt;/code&gt; 命令確認你的 Raspberry Pi 3 可以順利透過無線上網
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ adb shell ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=57 time=6.67 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=57 time=55.5 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=57 time=23.0 ms
64 bytes from 8.8.8.8: icmp_seq=4 ttl=57 time=245 ms
&lt;/pre&gt;

&lt;p&gt;
如果要移除所有的無線網路設定，則可以透過以下命令進行
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ adb shell am startservice &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -n com.google.wifisetup/.WifiSetupService &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
       -a WifiSetupService.Reset
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orga177865&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga177865&quot;&gt;透過 UART 登入&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga177865&quot;&gt;
&lt;p&gt;
如果你就是不想接上網路線來對 Raspberry Pi 3 進行設定，那我們也可以透過 &lt;a href=&quot;https://www.adafruit.com/products/954&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TTL 轉 USB 線&lt;/a&gt; 來接到 Raspberry Pi 上面的 UART 接腳，透過 UART 來進入 console。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/raspberrypi-console.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接上後，看你是要用 &lt;a href=&quot;https://www.gnu.org/s/emacs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt;、 &lt;a href=&quot;https://www.decisivetactics.com/products/serial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Serial&lt;/a&gt; (Mac OS)、&lt;a href=&quot;http://www.putty.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Putty&lt;/a&gt; (Windows)、&lt;a href=&quot;https://linux.die.net/man/1/gtkterm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GtkTerm&lt;/a&gt; (Linux) 來進行連線，記得以下東西不要設定錯誤就好:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Baud Rate: 115200&lt;/li&gt;
&lt;li&gt;Data Bits: 8&lt;/li&gt;
&lt;li&gt;Parity: None&lt;/li&gt;
&lt;li&gt;Stop Bits: 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
我自己是習慣透過 &lt;a href=&quot;https://www.gnu.org/s/emacs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt; 的 &lt;code&gt;M-x serial-term&lt;/code&gt; 命令去進行連接
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/8e801cc4/serial.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org4b8c928&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4b8c928&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4b8c928&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/things/hardware/raspberrypi.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things: Raspberry Pi 3 Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/8e801cc4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Android Things 學習筆記: 介紹</title>
      <link>https://coldnew.github.io/399f19c/</link>
      <guid>https://coldnew.github.io/399f19c/</guid>
      <pubDate>Tue, 09 May 2017 23:52:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近打算稍微了解一下 Google 在推的 &lt;a href=&quot;https://developer.android.com/things&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; ，這是一套以 Android 為基礎改製而成的作業系統，目的在於用於現在很夯的物聯網(Internet of Things, IoT) 上。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div id=&quot;outline-container-orgcd6281a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgcd6281a&quot;&gt;關於 Android Things&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgcd6281a&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 前身為 Google 的 &lt;a href=&quot;http://chinese.engadget.com/2015/05/28/project-brillo-google-iot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brillo 專案&lt;/a&gt; ，在約 2016 年底改名為 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 。這東西到底是什麼? 
&lt;/p&gt;

&lt;p&gt;
簡單的來說，隨著 Android 的普及，會使用 Java 寫 Android app 的人越來越多， &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 就是為了這些開發者存在的物連網系統，就如網頁的豪語:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
If you can build an app, you can build a device. ── Google
&lt;/p&gt;

&lt;p&gt;
(只要你有能力打造出 App，你就能打造出一個裝置。)
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
事實上，你的確可以使用 Java 來寫 app 然後丟到支援 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的開發板上，來透過 GPIO、I²C、PWM 等控制周邊，這過層中底層的部分都幫你包好了，你只要會寫 Java 就可以開發物連網(IoT)裝置。
&lt;/p&gt;

&lt;p&gt;
&lt;del&gt;於是只要花個 22k 請個會寫 Java 的人，你就可以當老闆賣設備了&lt;/del&gt; 。
&lt;/p&gt;

&lt;p&gt;
當然，Google 不可能這麼佛心為了那些只會寫 Java 的人設計一個物連網系統， &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的目的同時也是為了推廣 Android，就如 &lt;a href=&quot;http://suyati.com/launching-android-things-googles-new-os-for-smart-iot-devices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things - The new OS for smart IoT devices from Google&lt;/a&gt; 這篇文章的圖片那樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/399f19c/Android-Things.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
只要透過你的 Android 手機/平板，你就可以盡情的控制這些 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 設備。
&lt;/p&gt;

&lt;p&gt;
(當然這些東西你還是有辦法在 iOS 上進行控制的， &lt;del&gt;記得再花個 40k 請個會寫 obj-c/swift 的人&lt;/del&gt;)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd4d9218&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd4d9218&quot;&gt;支援的開發板&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd4d9218&quot;&gt;
&lt;p&gt;
那如果我們想要入門 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的話，需要哪些開發板呢?
&lt;/p&gt;

&lt;p&gt;
撰寫這篇文章的時候，官方支援的開發板有 &lt;a href=&quot;https://developer.android.com/things/hardware/developer-kits.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;以下幾種&lt;/a&gt; :
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/399f19c/sbt.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在這些開發板中，考量到價錢以及實用性，我決定採用 &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 來作為我用來學習 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的開發板。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org89a0bf3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org89a0bf3&quot;&gt;隱憂&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org89a0bf3&quot;&gt;
&lt;p&gt;
雖然 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 是由 Google 所提出的專案，但很多 Google 提出的專案也有面臨過被廢棄的命運，比如 &lt;a href=&quot;http://hk.on.cc/hk/bkn/cnt/finance/20160903/bkn-20160903201859069-0903_00842_001.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Project Arc (積木手機)&lt;/a&gt; 這個計畫也被 Google 廢棄了，  &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 是否值得追隨也是個很大的問題。
&lt;/p&gt;

&lt;p&gt;
此外，對於物連網裝置 (Internet of Things, IoT)，我們常用的設備都是不到 1MB 記憶體的微控制器(MCU)裝置，而 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 最低要求要 &lt;code&gt;256MB 的記憶體&lt;/code&gt; 以及動輒 &lt;code&gt;100MB 大小的儲存裝置&lt;/code&gt; ，以成本來考量這其實是蠻浪費的。 (還不如去用 &lt;a href=&quot;https://www.mbed.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mbed&lt;/a&gt; 還比較划算)
&lt;/p&gt;

&lt;p&gt;
還有一個是 &lt;code&gt;開機時間&lt;/code&gt; ，如果你的系統是設計讓人隨時可以關機的，那你要考慮清楚是否要對 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 作些額外處理，在 &lt;a href=&quot;https://coldnew.github.io/468144f4/&quot;&gt;Android Things 學習筆記: GPIO 的輸出控制&lt;/a&gt; 我們實作了 Raspberry Pi 3 搭配 LED 閃爍功能，如果斷掉系統電源再重新上電的話，到 LED 開始閃爍花了 &lt;code&gt;1.06 分鐘&lt;/code&gt; 。(也就是系統啟動到執行程式需要花很多時間，正式產品是一定要多作些優化的)
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href=&quot;http://events.linuxfoundation.org/events/embedded-linux-conference-europe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Embedded Linux Conference 2017&lt;/a&gt; 上的 &lt;a href=&quot;http://events.linuxfoundation.org/sites/events/files/slides/android-things-internals-170223.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things - Internals and cute embedded nonsense hacks&lt;/a&gt; 演講也有提到這些問題。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org5fdd317&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5fdd317&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org5fdd317&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://makerdiary.co/getting-started-with-android-things/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things 來了，老司機快上車~&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://technews.tw/2016/12/15/android-things-is-googles-new-os-for-smart-devices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google 發表物聯網平台 Android Things，要讓裝置開發和做 App 一樣簡單&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近打算稍微了解一下 Google 在推的 &lt;a href=&quot;https://developer.android.com/things&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; ，這是一套以 Android 為基礎改製而成的作業系統，目的在於用於現在很夯的物聯網(Internet of Things, IoT) 上。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;div id=&quot;outline-container-orgcd6281a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgcd6281a&quot;&gt;關於 Android Things&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgcd6281a&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 前身為 Google 的 &lt;a href=&quot;http://chinese.engadget.com/2015/05/28/project-brillo-google-iot/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brillo 專案&lt;/a&gt; ，在約 2016 年底改名為 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 。這東西到底是什麼? 
&lt;/p&gt;

&lt;p&gt;
簡單的來說，隨著 Android 的普及，會使用 Java 寫 Android app 的人越來越多， &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 就是為了這些開發者存在的物連網系統，就如網頁的豪語:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
If you can build an app, you can build a device. ── Google
&lt;/p&gt;

&lt;p&gt;
(只要你有能力打造出 App，你就能打造出一個裝置。)
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
事實上，你的確可以使用 Java 來寫 app 然後丟到支援 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的開發板上，來透過 GPIO、I²C、PWM 等控制周邊，這過層中底層的部分都幫你包好了，你只要會寫 Java 就可以開發物連網(IoT)裝置。
&lt;/p&gt;

&lt;p&gt;
&lt;del&gt;於是只要花個 22k 請個會寫 Java 的人，你就可以當老闆賣設備了&lt;/del&gt; 。
&lt;/p&gt;

&lt;p&gt;
當然，Google 不可能這麼佛心為了那些只會寫 Java 的人設計一個物連網系統， &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的目的同時也是為了推廣 Android，就如 &lt;a href=&quot;http://suyati.com/launching-android-things-googles-new-os-for-smart-iot-devices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things - The new OS for smart IoT devices from Google&lt;/a&gt; 這篇文章的圖片那樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/399f19c/Android-Things.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
只要透過你的 Android 手機/平板，你就可以盡情的控制這些 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 設備。
&lt;/p&gt;

&lt;p&gt;
(當然這些東西你還是有辦法在 iOS 上進行控制的， &lt;del&gt;記得再花個 40k 請個會寫 obj-c/swift 的人&lt;/del&gt;)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd4d9218&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd4d9218&quot;&gt;支援的開發板&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd4d9218&quot;&gt;
&lt;p&gt;
那如果我們想要入門 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的話，需要哪些開發板呢?
&lt;/p&gt;

&lt;p&gt;
撰寫這篇文章的時候，官方支援的開發板有 &lt;a href=&quot;https://developer.android.com/things/hardware/developer-kits.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;以下幾種&lt;/a&gt; :
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/399f19c/sbt.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在這些開發板中，考量到價錢以及實用性，我決定採用 &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-3-model-b/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Raspberry Pi 3 Model B&lt;/a&gt; 來作為我用來學習 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 的開發板。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org89a0bf3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org89a0bf3&quot;&gt;隱憂&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org89a0bf3&quot;&gt;
&lt;p&gt;
雖然 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 是由 Google 所提出的專案，但很多 Google 提出的專案也有面臨過被廢棄的命運，比如 &lt;a href=&quot;http://hk.on.cc/hk/bkn/cnt/finance/20160903/bkn-20160903201859069-0903_00842_001.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Project Arc (積木手機)&lt;/a&gt; 這個計畫也被 Google 廢棄了，  &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 是否值得追隨也是個很大的問題。
&lt;/p&gt;

&lt;p&gt;
此外，對於物連網裝置 (Internet of Things, IoT)，我們常用的設備都是不到 1MB 記憶體的微控制器(MCU)裝置，而 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 最低要求要 &lt;code&gt;256MB 的記憶體&lt;/code&gt; 以及動輒 &lt;code&gt;100MB 大小的儲存裝置&lt;/code&gt; ，以成本來考量這其實是蠻浪費的。 (還不如去用 &lt;a href=&quot;https://www.mbed.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mbed&lt;/a&gt; 還比較划算)
&lt;/p&gt;

&lt;p&gt;
還有一個是 &lt;code&gt;開機時間&lt;/code&gt; ，如果你的系統是設計讓人隨時可以關機的，那你要考慮清楚是否要對 &lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt; 作些額外處理，在 &lt;a href=&quot;https://coldnew.github.io/468144f4/&quot;&gt;Android Things 學習筆記: GPIO 的輸出控制&lt;/a&gt; 我們實作了 Raspberry Pi 3 搭配 LED 閃爍功能，如果斷掉系統電源再重新上電的話，到 LED 開始閃爍花了 &lt;code&gt;1.06 分鐘&lt;/code&gt; 。(也就是系統啟動到執行程式需要花很多時間，正式產品是一定要多作些優化的)
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href=&quot;http://events.linuxfoundation.org/events/embedded-linux-conference-europe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Embedded Linux Conference 2017&lt;/a&gt; 上的 &lt;a href=&quot;http://events.linuxfoundation.org/sites/events/files/slides/android-things-internals-170223.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things - Internals and cute embedded nonsense hacks&lt;/a&gt; 演講也有提到這些問題。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org5fdd317&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5fdd317&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org5fdd317&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://makerdiary.co/getting-started-with-android-things/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Things 來了，老司機快上車~&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://technews.tw/2016/12/15/android-things-is-googles-new-os-for-smart-devices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google 發表物聯網平台 Android Things，要讓裝置開發和做 App 一樣簡單&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/399f19c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 yasnippet 自動插入程式碼樣板</title>
      <link>https://coldnew.github.io/7e10e07e/</link>
      <guid>https://coldnew.github.io/7e10e07e/</guid>
      <pubDate>Wed, 03 May 2017 02:19:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/e10a343/&quot;&gt;用 insert-shebang 自動插入直譯器指令&lt;/a&gt; 一文中我們提到了如何自動對腳本檔案插入 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; ，這次來談談如何透過 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 自動對你的檔案插入你想要的樣板，比如授權資訊 (copyright)、預設標頭檔等等。
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt; 下雖然有其他套件可以完成這種 &lt;code&gt;插入樣板&lt;/code&gt; 的功能，但是既然我們可以透過 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 來辦到，就不需要多學新的樣板標記語言了 :)
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
&lt;b&gt;註&lt;/b&gt;: 本文修改自 2009 年我發佈在 ptt 上的 &lt;a href=&quot;https://www.ptt.cc/bbs/Editor/M.1297600857.A.49F.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;建立新檔案時自動插入樣板 (使用 yasnippet)&lt;/a&gt; 一文。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orge52d45c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge52d45c&quot;&gt;安裝套件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge52d45c&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 已經收錄在 &lt;a href=&quot;https://melpa.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MELPA&lt;/a&gt; 中，因此你可以直接透過 &lt;code&gt;M-x&lt;/code&gt; 去安裝這套件
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x package-install RET yasnippet RET

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org21f1c07&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org21f1c07&quot;&gt;使用方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org21f1c07&quot;&gt;
&lt;p&gt;
在你的 &lt;code&gt;.emacs&lt;/code&gt; 加入以下命令:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;yasnippet&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;yas-global-mode 1&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣的話就可以啟用 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 這個套件的功能囉～
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9ca38cf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9ca38cf&quot;&gt;對新檔案自動加入樣板&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9ca38cf&quot;&gt;
&lt;p&gt;
我們首先要在你的 &lt;code&gt;.emacs&lt;/code&gt; 加入以下程式碼，這會讓 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt; 在開啟新檔案時，觸發 &lt;code&gt;find-file-hook&lt;/code&gt; 並尋找這個新檔案是否有相對應名為 &lt;code&gt;HEADER&lt;/code&gt; 的 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 樣板。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Auto add HEADER in new file&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;add-hook &#39;find-file-hook
          &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;lambda &lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;
             &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;when&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;buffer-file-name&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                        &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;not &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;file-exists-p &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;buffer-file-name&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                        &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;= &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;point-max&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 1&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
               &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;header-snippet &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;HEADER&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;
                     &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;yas/fallback-behavior &#39;return-nil&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;insert header-snippet&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                 &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;if can&#39;t expand snippet, delete insert string&lt;/span&gt;
                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;not &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;yas/expand&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;
                     &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;delete-region &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;point-min&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;point-max&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，接下來我們要針對我們的目標建立名為 &lt;code&gt;HEADER&lt;/code&gt; 的樣板。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfbb16d6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfbb16d6&quot;&gt;建立樣板&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfbb16d6&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 對於如何建立樣板(snippet) 有很&lt;a href=&quot;http://joaotavora.github.io/yasnippet/snippet-development.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整的說明&lt;/a&gt; ，在這邊，我用簡單的方法來解釋。
&lt;/p&gt;


&lt;p&gt;
首先假設你是要對 &lt;code&gt;C 語言&lt;/code&gt; 建立你的樣板(snippet)，那你先透過 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emacs&lt;/a&gt; 打開隨便一個 &lt;code&gt;xxx.c&lt;/code&gt; 的檔案，接下來透過
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x yas-new-snippet

&lt;/pre&gt;

&lt;p&gt;
去對 &lt;code&gt;C 語言&lt;/code&gt; 建立你的樣板，我們在裡面填入以下內容
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-snippet&quot;&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# -*- mode: snippet -*-&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# name: Header File Template&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# key: HEADER&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# --&lt;/span&gt;

//
//  This is yasnippet example for c-mode
//

&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立好後，並存成 &lt;code&gt;HEADER&lt;/code&gt; 這個檔案名稱就完成了。 建立一個新的 C 語言檔案看看，你會發現這個檔案直接填入了你剛剛設定的樣板。
&lt;/p&gt;

&lt;p&gt;
(假如你的 snippet 資料夾在 &lt;code&gt;~/.emacs.d/snippets&lt;/code&gt; 則這個 snippet 會存成 &lt;code&gt;~/.emacs.d/snippets/c-mode/HEADER&lt;/code&gt; 這個檔案。)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd73d37a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd73d37a&quot;&gt;進階設定&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd73d37a&quot;&gt;
&lt;p&gt;
除了上面的簡單樣板外，我們也可以透過 &lt;code&gt;emacs-lisp&lt;/code&gt; 作些進階設定，在 &lt;a href=&quot;http://joaotavora.github.io/yasnippet/snippet-development.html#sec-3-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Embedded Emacs-lisp code&lt;/a&gt; 這邊就有提到如何在你的樣板(snippet)裡面使用 emacs-lisp 進行更多的擴充。
&lt;/p&gt;

&lt;p&gt;
(注意到 emacs-lisp 程式碼在樣板(snippet)中，要被 &lt;code&gt;``&lt;/code&gt; 包住。)
&lt;/p&gt;

&lt;p&gt;
假設我們想要對 &lt;code&gt;~/OpenSource/&lt;/code&gt; 這個資料夾的檔案都插入 GPL 授權，而其他狀況則是 APACHE 授權，則你可以這樣作：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-newlisp&quot;&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# -*- mode: snippet -*-&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# name: Header File Template&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# key: HEADER&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# --&lt;/span&gt;

`
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;string-equal &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;file-name-directory &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;buffer-file-name&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
                  &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;expand-file-name &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;~/OpenSource/&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;insert &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;GPL&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;else&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;insert &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;APACHE&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
`
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/e10a343/&quot;&gt;用 insert-shebang 自動插入直譯器指令&lt;/a&gt; 一文中我們提到了如何自動對腳本檔案插入 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; ，這次來談談如何透過 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 自動對你的檔案插入你想要的樣板，比如授權資訊 (copyright)、預設標頭檔等等。
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt; 下雖然有其他套件可以完成這種 &lt;code&gt;插入樣板&lt;/code&gt; 的功能，但是既然我們可以透過 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 來辦到，就不需要多學新的樣板標記語言了 :)
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
&lt;b&gt;註&lt;/b&gt;: 本文修改自 2009 年我發佈在 ptt 上的 &lt;a href=&quot;https://www.ptt.cc/bbs/Editor/M.1297600857.A.49F.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;建立新檔案時自動插入樣板 (使用 yasnippet)&lt;/a&gt; 一文。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orge52d45c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge52d45c&quot;&gt;安裝套件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge52d45c&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 已經收錄在 &lt;a href=&quot;https://melpa.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MELPA&lt;/a&gt; 中，因此你可以直接透過 &lt;code&gt;M-x&lt;/code&gt; 去安裝這套件
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x package-install RET yasnippet RET

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org21f1c07&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org21f1c07&quot;&gt;使用方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org21f1c07&quot;&gt;
&lt;p&gt;
在你的 &lt;code&gt;.emacs&lt;/code&gt; 加入以下命令:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;yasnippet&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;yas-global-mode 1&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣的話就可以啟用 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 這個套件的功能囉～
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9ca38cf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9ca38cf&quot;&gt;對新檔案自動加入樣板&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9ca38cf&quot;&gt;
&lt;p&gt;
我們首先要在你的 &lt;code&gt;.emacs&lt;/code&gt; 加入以下程式碼，這會讓 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs&lt;/a&gt; 在開啟新檔案時，觸發 &lt;code&gt;find-file-hook&lt;/code&gt; 並尋找這個新檔案是否有相對應名為 &lt;code&gt;HEADER&lt;/code&gt; 的 &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 樣板。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Auto add HEADER in new file&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;add-hook &#39;find-file-hook
          &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;lambda &lt;span style=&quot;color: #aaccff;&quot;&gt;()&lt;/span&gt;
             &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;when&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;and&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;buffer-file-name&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                        &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;not &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;file-exists-p &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;buffer-file-name&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                        &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;= &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;point-max&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 1&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
               &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;header-snippet &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;HEADER&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;
                     &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;yas/fallback-behavior &#39;return-nil&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;insert header-snippet&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                 &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;if can&#39;t expand snippet, delete insert string&lt;/span&gt;
                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;not &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;yas/expand&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;
                     &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;delete-region &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;point-min&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;point-max&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，接下來我們要針對我們的目標建立名為 &lt;code&gt;HEADER&lt;/code&gt; 的樣板。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfbb16d6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfbb16d6&quot;&gt;建立樣板&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfbb16d6&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yasnippet&lt;/a&gt; 對於如何建立樣板(snippet) 有很&lt;a href=&quot;http://joaotavora.github.io/yasnippet/snippet-development.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整的說明&lt;/a&gt; ，在這邊，我用簡單的方法來解釋。
&lt;/p&gt;


&lt;p&gt;
首先假設你是要對 &lt;code&gt;C 語言&lt;/code&gt; 建立你的樣板(snippet)，那你先透過 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emacs&lt;/a&gt; 打開隨便一個 &lt;code&gt;xxx.c&lt;/code&gt; 的檔案，接下來透過
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x yas-new-snippet

&lt;/pre&gt;

&lt;p&gt;
去對 &lt;code&gt;C 語言&lt;/code&gt; 建立你的樣板，我們在裡面填入以下內容
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-snippet&quot;&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# -*- mode: snippet -*-&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# name: Header File Template&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# key: HEADER&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# --&lt;/span&gt;

//
//  This is yasnippet example for c-mode
//

&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立好後，並存成 &lt;code&gt;HEADER&lt;/code&gt; 這個檔案名稱就完成了。 建立一個新的 C 語言檔案看看，你會發現這個檔案直接填入了你剛剛設定的樣板。
&lt;/p&gt;

&lt;p&gt;
(假如你的 snippet 資料夾在 &lt;code&gt;~/.emacs.d/snippets&lt;/code&gt; 則這個 snippet 會存成 &lt;code&gt;~/.emacs.d/snippets/c-mode/HEADER&lt;/code&gt; 這個檔案。)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd73d37a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd73d37a&quot;&gt;進階設定&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd73d37a&quot;&gt;
&lt;p&gt;
除了上面的簡單樣板外，我們也可以透過 &lt;code&gt;emacs-lisp&lt;/code&gt; 作些進階設定，在 &lt;a href=&quot;http://joaotavora.github.io/yasnippet/snippet-development.html#sec-3-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Embedded Emacs-lisp code&lt;/a&gt; 這邊就有提到如何在你的樣板(snippet)裡面使用 emacs-lisp 進行更多的擴充。
&lt;/p&gt;

&lt;p&gt;
(注意到 emacs-lisp 程式碼在樣板(snippet)中，要被 &lt;code&gt;``&lt;/code&gt; 包住。)
&lt;/p&gt;

&lt;p&gt;
假設我們想要對 &lt;code&gt;~/OpenSource/&lt;/code&gt; 這個資料夾的檔案都插入 GPL 授權，而其他狀況則是 APACHE 授權，則你可以這樣作：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-newlisp&quot;&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# -*- mode: snippet -*-&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# name: Header File Template&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# key: HEADER&lt;/span&gt;
&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# --&lt;/span&gt;

`
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;string-equal &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;file-name-directory &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;buffer-file-name&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
                  &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;expand-file-name &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;~/OpenSource/&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;insert &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;GPL&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;else&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;insert &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;APACHE&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
`
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/7e10e07e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用 insert-shebang 自動插入直譯器指令</title>
      <link>https://coldnew.github.io/e10a343/</link>
      <guid>https://coldnew.github.io/e10a343/</guid>
      <pubDate>Wed, 03 May 2017 01:50:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
我們在寫腳本的時候，總要在檔案的開頭加入 &lt;code&gt;#!&lt;/code&gt; 這樣的開頭來讓系統知道如何執行這個腳本，而 &lt;code&gt;#!&lt;/code&gt; 這樣的東西則稱之為 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
每次寫腳本都需要手動撰寫 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 也是很煩的，因此我們可以讓 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emacs&lt;/a&gt; 根據腳本的檔名，自動幫我們加入合適的 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 到檔案的第一行。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
在 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emacs&lt;/a&gt; 上，有一個名為 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 的套件可以幫助我們達到這個需求。
&lt;/p&gt;

&lt;p&gt;
舉例來說，在建立 &lt;code&gt;xxx.sh&lt;/code&gt; 這樣的檔案時， &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 會自動在檔案開頭加入:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/usr/bin/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; bash&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而如果建立的是 &lt;code&gt;xxx.py&lt;/code&gt; ，則會是:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/usr/bin/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; python&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org39fa212&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org39fa212&quot;&gt;安裝套件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org39fa212&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 已經收錄在 &lt;a href=&quot;https://melpa.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MELPA&lt;/a&gt; 中，因此你可以直接透過 &lt;code&gt;M-x&lt;/code&gt; 去安裝這套件
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x package-install RET insert-shebang RET

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8a4e22f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8a4e22f&quot;&gt;使用方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8a4e22f&quot;&gt;
&lt;p&gt;
在你的 &lt;code&gt;.emacs&lt;/code&gt; 加入以下命令:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;insert-shebang&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣的話就直接啟用 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 這個套件的功能囉～
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org40a5ce9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org40a5ce9&quot;&gt;設定這個套件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org40a5ce9&quot;&gt;
&lt;p&gt;
預設的 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 其實就已經符合大部分的需求了，如果還想對他進行一些設定，則可以透過以下命令進行:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x customize-group RET insert-shebang RET

&lt;/pre&gt;

&lt;p&gt;
在我撰寫這篇文章的時候， &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 版本是 &lt;a href=&quot;https://github.com/psachin/insert-shebang/blob/e53f893d400fcf6f2870ba0ba957b0dee0692fdd/insert-shebang.el#L48&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;0.9.5&lt;/a&gt; ，大概有以下幾個設定我會有興趣:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
insert-shebang-file-types
&lt;/p&gt;

&lt;p&gt;
預設的 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 只有對以下幾組副檔名會加入對應的 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defcustom&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;insert-shebang-file-types&lt;/span&gt;
  &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;py&quot;&lt;/span&gt; . &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sh&quot;&lt;/span&gt; . &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;pl&quot;&lt;/span&gt; . &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;perl&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;*If nil, add all your file extensions and file types here.&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:type&lt;/span&gt; &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;alist &lt;span style=&quot;color: #ccaaff;&quot;&gt;:key-type&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;string &lt;span style=&quot;color: #ccaaff;&quot;&gt;:tag&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Extension&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
                &lt;span style=&quot;color: #ccaaff;&quot;&gt;:value-type&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;string &lt;span style=&quot;color: #ccaaff;&quot;&gt;:tag&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Interpreter&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:group&lt;/span&gt; &#39;insert-shebang&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
insert-shebang-ignore-extensions
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 預設會去檢查所有你開啟/建立的檔案是否需要加入 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; ，這邊可以指定哪些副檔名不要進行這個檢查。
&lt;/p&gt;

&lt;p&gt;
(老實說我覺得這個設定有點多餘&amp;#x2026;.)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defcustom&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;insert-shebang-ignore-extensions&lt;/span&gt;
  &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;txt&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;org&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;*Add extensions you want to ignore.&lt;/span&gt;
&lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;List of file extensions to be ignored by default.&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:type&lt;/span&gt; &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;repeat &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;string &lt;span style=&quot;color: #ccaaff;&quot;&gt;:tag&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;extn&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:group&lt;/span&gt; &#39;insert-shebang&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf1ecbc3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf1ecbc3&quot;&gt;後記&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf1ecbc3&quot;&gt;
&lt;p&gt;
雖然這個套件是蠻方便的，但是對於那些沒進行 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 設定的檔案，會丟出一些訊息在 &lt;code&gt;*Message*&lt;/code&gt; 緩衝區也讓我覺得比較討厭。
&lt;/p&gt;

&lt;p&gt;
如果你想插入 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 的同時，並加入一些檔案的資訊，比如授權(copyright)等等，可以參考我另外一篇文章: &lt;a href=&quot;https://coldnew.github.io/7e10e07e/&quot;&gt;使用 yasnippet 自動插入程式碼樣板&lt;/a&gt; 。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
我們在寫腳本的時候，總要在檔案的開頭加入 &lt;code&gt;#!&lt;/code&gt; 這樣的開頭來讓系統知道如何執行這個腳本，而 &lt;code&gt;#!&lt;/code&gt; 這樣的東西則稱之為 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
每次寫腳本都需要手動撰寫 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 也是很煩的，因此我們可以讓 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emacs&lt;/a&gt; 根據腳本的檔名，自動幫我們加入合適的 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 到檔案的第一行。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
在 &lt;a href=&quot;https://www.gnu.org/s/emacs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;emacs&lt;/a&gt; 上，有一個名為 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 的套件可以幫助我們達到這個需求。
&lt;/p&gt;

&lt;p&gt;
舉例來說，在建立 &lt;code&gt;xxx.sh&lt;/code&gt; 這樣的檔案時， &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 會自動在檔案開頭加入:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/usr/bin/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; bash&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而如果建立的是 &lt;code&gt;xxx.py&lt;/code&gt; ，則會是:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/usr/bin/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;env&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; python&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org39fa212&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org39fa212&quot;&gt;安裝套件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org39fa212&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 已經收錄在 &lt;a href=&quot;https://melpa.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MELPA&lt;/a&gt; 中，因此你可以直接透過 &lt;code&gt;M-x&lt;/code&gt; 去安裝這套件
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x package-install RET insert-shebang RET

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8a4e22f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8a4e22f&quot;&gt;使用方式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8a4e22f&quot;&gt;
&lt;p&gt;
在你的 &lt;code&gt;.emacs&lt;/code&gt; 加入以下命令:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;require&lt;/span&gt; &#39;&lt;span style=&quot;color: #ccaaff;&quot;&gt;insert-shebang&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣的話就直接啟用 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 這個套件的功能囉～
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org40a5ce9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org40a5ce9&quot;&gt;設定這個套件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org40a5ce9&quot;&gt;
&lt;p&gt;
預設的 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 其實就已經符合大部分的需求了，如果還想對他進行一些設定，則可以透過以下命令進行:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
M-x customize-group RET insert-shebang RET

&lt;/pre&gt;

&lt;p&gt;
在我撰寫這篇文章的時候， &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 版本是 &lt;a href=&quot;https://github.com/psachin/insert-shebang/blob/e53f893d400fcf6f2870ba0ba957b0dee0692fdd/insert-shebang.el#L48&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;0.9.5&lt;/a&gt; ，大概有以下幾個設定我會有興趣:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
insert-shebang-file-types
&lt;/p&gt;

&lt;p&gt;
預設的 &lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 只有對以下幾組副檔名會加入對應的 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defcustom&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;insert-shebang-file-types&lt;/span&gt;
  &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;py&quot;&lt;/span&gt; . &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sh&quot;&lt;/span&gt; . &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;pl&quot;&lt;/span&gt; . &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;perl&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;*If nil, add all your file extensions and file types here.&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:type&lt;/span&gt; &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;alist &lt;span style=&quot;color: #ccaaff;&quot;&gt;:key-type&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;string &lt;span style=&quot;color: #ccaaff;&quot;&gt;:tag&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Extension&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
                &lt;span style=&quot;color: #ccaaff;&quot;&gt;:value-type&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;string &lt;span style=&quot;color: #ccaaff;&quot;&gt;:tag&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Interpreter&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:group&lt;/span&gt; &#39;insert-shebang&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
insert-shebang-ignore-extensions
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/psachin/insert-shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;insert-shebang&lt;/a&gt; 預設會去檢查所有你開啟/建立的檔案是否需要加入 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; ，這邊可以指定哪些副檔名不要進行這個檢查。
&lt;/p&gt;

&lt;p&gt;
(老實說我覺得這個設定有點多餘&amp;#x2026;.)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defcustom&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;insert-shebang-ignore-extensions&lt;/span&gt;
  &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;txt&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;org&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;*Add extensions you want to ignore.&lt;/span&gt;
&lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;List of file extensions to be ignored by default.&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:type&lt;/span&gt; &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;repeat &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;string &lt;span style=&quot;color: #ccaaff;&quot;&gt;:tag&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;extn&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:group&lt;/span&gt; &#39;insert-shebang&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf1ecbc3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf1ecbc3&quot;&gt;後記&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf1ecbc3&quot;&gt;
&lt;p&gt;
雖然這個套件是蠻方便的，但是對於那些沒進行 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 設定的檔案，會丟出一些訊息在 &lt;code&gt;*Message*&lt;/code&gt; 緩衝區也讓我覺得比較討厭。
&lt;/p&gt;

&lt;p&gt;
如果你想插入 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/Shebang&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shebang&lt;/a&gt; 的同時，並加入一些檔案的資訊，比如授權(copyright)等等，可以參考我另外一篇文章: &lt;a href=&quot;https://coldnew.github.io/7e10e07e/&quot;&gt;使用 yasnippet 自動插入程式碼樣板&lt;/a&gt; 。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/e10a343/#disqus_thread</comments>
    </item>
    
    <item>
      <title>灣區日報閱讀筆記: 2017/05/01 第 902 期</title>
      <link>https://coldnew.github.io/7a59e714/</link>
      <guid>https://coldnew.github.io/7a59e714/</guid>
      <pubDate>Mon, 01 May 2017 03:50:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
這是我閱讀 &lt;a href=&quot;https://wanqu.co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;湾区日报&lt;/a&gt; 裡面每天提供五則訊息的筆記，紀錄個人閱讀心得等資訊。
&lt;/p&gt;

&lt;p&gt;
本期文章位址: &lt;a href=&quot;https://wanqu.co/issues/902?s=old-nav&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wanqu.co/issues/902?s=old-nav&lt;/a&gt;
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;


&lt;div id=&quot;outline-container-org59d20e0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org59d20e0&quot;&gt;The Kano Analysis&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org59d20e0&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
將 Kano Model 應用在設計互聯網產品上，對一批用戶進行簡單的測試：加入這個功能，你的滿意度如何？如果不加的話，你滿意度又如何？收集這倆問題的所有回答、彙總起來就能決定某個功能是否值得花時間去做了。
&lt;/p&gt;

&lt;p&gt;
五類產品功能：1，Desired Features（越多越好，如磁盤容量）；2，Required Features（必須有，但差不多就行了，如輪子能轉就行）；3，Delightful Features（給用戶驚喜，若你不做，他們也不會失落）；4，Indifferent Features（有和沒有都無所謂）；5，Anti-features（加了後，用戶會瘋掉的）。應花力氣做 1 和 2，有額外時間才做 3，避免做 4 和 5。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://medium.muz.li/the-kano-analysis-c16e7d681158?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
&lt;a href=&quot;http://cdnet.stpi.narl.org.tw/techroom/analysis/2008/pat_08_A003.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;狩野模型（Kano Model）&lt;/a&gt; 一般也稱為二維品質模型，所謂二維（Two-dimension）即是包括兩個維度，其一為從顧客觀點的滿意程度，屬於客戶主觀感受，另一為從產品品質觀點的提供，屬於客觀的產品機能或功能。狩野模型示意如下圖所示:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/pat_08_A003.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
(以上引用自 &lt;a href=&quot;http://cdnet.stpi.narl.org.tw/techroom/analysis/2008/pat_08_A003.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;產業策略評析：狩野模型（Kano Model）與魅力品質創造&lt;/a&gt; 一文)
&lt;/p&gt;

&lt;p&gt;
剩下的我看不懂 :S，所以只好引用 &lt;a href=&quot;https://wanqu.co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;湾区日报&lt;/a&gt; 的結論:
&lt;/p&gt;

&lt;p&gt;
五類產品功能：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Desired Features（越多越好，如磁盤容量）&lt;/li&gt;
&lt;li&gt;Required Features（必須有，但差不多就行了，如輪子能轉就行）&lt;/li&gt;
&lt;li&gt;Delightful Features（給用戶驚喜，若你不做，他們也不會失落）&lt;/li&gt;
&lt;li&gt;Indifferent Features（有和沒有都無所謂）&lt;/li&gt;
&lt;li&gt;Anti-features（加了後，用戶會瘋掉的）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
應花力氣做 1 和 2，有額外時間才做 3，避免做 4 和 5。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-org82e742e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org82e742e&quot;&gt;面試的時候如何介紹你自己&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org82e742e&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
不只是面試，在很多社交場合都需要介紹自己，介紹自己做過的事，要會講故事、讓人有興趣聽下去。平時要準備一些小段的、不同角度的自我介紹，要用的時候就像調 API 一樣方便：）
&lt;/p&gt;

&lt;p&gt;
名人在電視上接受採訪，好像都能即興演講、侃侃而談；都是平時有準備、有練習、不斷 A/B testing、不斷迭代的，最後總會在合適的時候呈現出合適的版本的說辭。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://stackoverflow.blog/2017/04/27/how-to-talk-about-yourself-in-an-interview/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
一言以蔽之: &lt;code&gt;隨時做好說話準備&lt;/code&gt; 。
&lt;/p&gt;

&lt;p&gt;
面試是一個壓力很大的過程，其壓力可能大到讓你講話都吱吱嗚嗚，思考不流暢。
&lt;/p&gt;

&lt;p&gt;
對於做好說話準備，作者提供一個需要準備的列表:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;你做了什麼產品 (What have you built?)&lt;/li&gt;
&lt;li&gt;你工作上遇到最困難的狀況是什麼 (What is the hardest technical problem you have run into?)&lt;/li&gt;
&lt;li&gt;你怎解決他 (How did you solve it?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
這個列表上的對談，可以幫助面試者了解你的狀況。
&lt;/p&gt;

&lt;p&gt;
那應該如何準備呢? 作者建議用一系列的卡片 (notecards) ，上面列出你正在進行/管理的專案的特色以及目標，如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/resume-card.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
最後，因為這是 &lt;a href=&quot;https://stackoverflow.blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stack Overflow Blog&lt;/a&gt; 的文章，所以文末也推薦了去 &lt;a href=&quot;http://stackoverflow.com/jobs?utm_source=so-owned&amp;amp;utm_medium=blog&amp;amp;utm_campaign=dev-c4al&amp;amp;utm_content=c4al-link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stack Overflow Jobs&lt;/a&gt; 去看看有沒有職缺。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge61ebdc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge61ebdc&quot;&gt;你不是你做的產品的用戶&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge61ebdc&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
公司創始人或早期員工往往都（號稱）是自己做的產品的忠實用戶，這有個問題：你就會按自己的思維習慣設計產品，亂加各種極其小眾的功能；畢竟世界上大部分人是跟你們很不一樣的。
&lt;/p&gt;

&lt;p&gt;
一個產品的整個生命裡，非用戶數總是遠遠多於已有用戶數；在取悅少數死忠用戶與爭取多數新用戶之間，應優先考慮後者。
&lt;/p&gt;

&lt;p&gt;
&quot;Your customer focus should always be on new or potential users, not early users. Early users will bias experiments, prompt you to build more and more niche features, and stunt growth.&quot;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://news.greylock.com/you-are-not-your-customer-1621b8eaaf16?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
新創(startup)在一開始會成功的原因，大致上可以區分為兩種:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;具有獨特的特色(unique insight) 或是解決了自己或是贊助者(founder)的某種問題(pain point)，並假設這問題其他人也會有。&lt;/li&gt;
&lt;li&gt;傾聽用戶，並讓他們理解你所提供的價值(make sure they understand and appreciate the value you&#39;re providing)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
產品的開發過程中，早期使用者會願意幫忙找到一些產品的缺陷(flaws)，並讓這項產品在他們手中可以良好了運作，但最終，當他們變成死忠用戶(power users)的時候，他們提交的回饋常常都是怎樣讓這個產品可以更好的運作在 &lt;code&gt;他們自己&lt;/code&gt; 身上。
&lt;/p&gt;

&lt;p&gt;
對於一項產品，應該要更加著重在新的用戶上面，雖然死忠用戶(power users)提供的回饋可能會有非常好的特性，但是相對的也會讓你的產品對新用戶而言更加的複雜。
&lt;/p&gt;

&lt;p&gt;
延伸閱讀：
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-are-some-of-the-most-important-things-youve-learned-in-marketing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are some of the most important things you&#39;ve learned in marketing?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgeb606de&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgeb606de&quot;&gt;Google’s real Kubernetes magic is all about community, not code&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgeb606de&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
作為開源項目，Kubernetes 是非常成功的，Google 懂得放手讓公司外的人貢獻代碼。Google 員工 commit 代碼的比例穩步下降，這是好事。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.techrepublic.com/article/googles-real-kubernetes-magic-is-all-about-community-not-code/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
其實 Google 近幾年開源蠻多程式碼的，不過有一種說法是: 開源給其他人維護，這樣 Google 就可以少花點人力在上面 :)
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blog.gcp.expert/kubernetes-gke-introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes&lt;/a&gt; 是 Google 開源的一套叢集管理系統，其目的是讓使用者透過 Kubernetes 叢集來進行雲端容器叢集的管理，而無需使用者進行複雜的設定工作 (&lt;a href=&quot;https://wild0522.gitbooks.io/yeasy_dp/content/kubernetes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;參考資料&lt;/a&gt;)。
&lt;/p&gt;

&lt;p&gt;
而這篇文章講到了 Kubernetes 已經在 Google 內部使用了 15 年之久，和他的進爭對手 &lt;a href=&quot;http://mesos.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Mesos&lt;/a&gt; 相比，  &lt;a href=&quot;https://blog.gcp.expert/kubernetes-gke-introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes&lt;/a&gt; 有 5 倍大的社群，高達 1,350 個貢獻者，並且有 1,500 個相關工作。
&lt;/p&gt;

&lt;p&gt;
文章後面我就沒啥興趣了，有興趣自己去看，對我而言重要的應該是這個: &lt;a href=&quot;https://github.com/kubernetes/community?utm_campaign=crowdfire&amp;amp;utm_content=crowdfire&amp;amp;utm_medium=social&amp;amp;utm_source=social#1464121790-tw%231493030328731&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubernetes/community: Kubernetes community content&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
本篇提及的延伸閱讀:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.techrepublic.com/article/why-kubernetes-could-be-crowned-king-of-container-management/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Kubernetes could be crowned king of container management&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.techrepublic.com/article/why-kubernetes-may-be-a-bigger-threat-to-amazon-than-googles-cloud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Kubernetes may be a bigger threat to Amazon than Google&#39;s Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org72e4a54&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org72e4a54&quot;&gt;這可能是本年度最有趣的 bug 了&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org72e4a54&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
Xfce 是 Linux 上輕量級的桌面環境，GNOME 與 KDE 替代品。不止一個用戶報告了個「bug」：Xfce 的默認桌面的壁紙損壞顯示器屏幕！因為默認的壁紙是老鼠，家裡的貓看了就會去抓顯示器屏幕，把屏幕刮花了！
&lt;/p&gt;

&lt;p&gt;
bug 的修復辦法：把壁紙換成狗。。。但家裡的狗會不會看到了也會來打招呼、舔屏、打架？你看，程序員平時的工作多麼不容易，修復一個 bug，同時引入另一個 bug，總是有活幹。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.omgubuntu.co.uk/2017/03/xfce-wallpaper-cat-bug&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
這個 bug :)
&lt;/p&gt;

&lt;p&gt;
Xfce 預設的桌面是長這樣的，中間有一隻老鼠
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/x1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
其實這個桌布用了很久很久了，但是最近卻有人回報說，自己家的貓看到這個桌面會開始對螢幕抓啊抓啊抓，都把螢幕抓壞了:S。因此這個用戶在 bugzilla 上面開了這個 bug: &lt;a href=&quot;https://bugzilla.xfce.org/show_bug.cgi?id=12117&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12117 – The default desktop startup screen causes damage to monitor!&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
不過如果進去看這個 bug，會發現到裡面的回應也很有趣:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Can&#39;t reproduce this bug, my cat is absolutely indifferent about it. What monitor do you use? Have you tried reporting the bug upstream at the cat vendor?
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
然後還有人在 &lt;a href=&quot;https://www.reddit.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reddit&lt;/a&gt; 上面貼了這篇: &lt;a href=&quot;https://www.reddit.com/r/linux/comments/60rzjn/my_cat_was_fooled_by_xfce/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My cat was fooled by XFCE：linux&lt;/a&gt; ，這隻貓好可愛啊 XD
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/x2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在我寫這篇文章的時候，&lt;a href=&quot;https://bugzilla.xfce.org/show_bug.cgi?id=12117&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BUG #12117&lt;/a&gt; 還沒被結案，開發者應該也很傻眼吧，其實只要換張桌布就好了啊 :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
這是我閱讀 &lt;a href=&quot;https://wanqu.co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;湾区日报&lt;/a&gt; 裡面每天提供五則訊息的筆記，紀錄個人閱讀心得等資訊。
&lt;/p&gt;

&lt;p&gt;
本期文章位址: &lt;a href=&quot;https://wanqu.co/issues/902?s=old-nav&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://wanqu.co/issues/902?s=old-nav&lt;/a&gt;
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;


&lt;div id=&quot;outline-container-org59d20e0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org59d20e0&quot;&gt;The Kano Analysis&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org59d20e0&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
將 Kano Model 應用在設計互聯網產品上，對一批用戶進行簡單的測試：加入這個功能，你的滿意度如何？如果不加的話，你滿意度又如何？收集這倆問題的所有回答、彙總起來就能決定某個功能是否值得花時間去做了。
&lt;/p&gt;

&lt;p&gt;
五類產品功能：1，Desired Features（越多越好，如磁盤容量）；2，Required Features（必須有，但差不多就行了，如輪子能轉就行）；3，Delightful Features（給用戶驚喜，若你不做，他們也不會失落）；4，Indifferent Features（有和沒有都無所謂）；5，Anti-features（加了後，用戶會瘋掉的）。應花力氣做 1 和 2，有額外時間才做 3，避免做 4 和 5。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://medium.muz.li/the-kano-analysis-c16e7d681158?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
&lt;a href=&quot;http://cdnet.stpi.narl.org.tw/techroom/analysis/2008/pat_08_A003.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;狩野模型（Kano Model）&lt;/a&gt; 一般也稱為二維品質模型，所謂二維（Two-dimension）即是包括兩個維度，其一為從顧客觀點的滿意程度，屬於客戶主觀感受，另一為從產品品質觀點的提供，屬於客觀的產品機能或功能。狩野模型示意如下圖所示:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/pat_08_A003.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
(以上引用自 &lt;a href=&quot;http://cdnet.stpi.narl.org.tw/techroom/analysis/2008/pat_08_A003.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;產業策略評析：狩野模型（Kano Model）與魅力品質創造&lt;/a&gt; 一文)
&lt;/p&gt;

&lt;p&gt;
剩下的我看不懂 :S，所以只好引用 &lt;a href=&quot;https://wanqu.co&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;湾区日报&lt;/a&gt; 的結論:
&lt;/p&gt;

&lt;p&gt;
五類產品功能：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Desired Features（越多越好，如磁盤容量）&lt;/li&gt;
&lt;li&gt;Required Features（必須有，但差不多就行了，如輪子能轉就行）&lt;/li&gt;
&lt;li&gt;Delightful Features（給用戶驚喜，若你不做，他們也不會失落）&lt;/li&gt;
&lt;li&gt;Indifferent Features（有和沒有都無所謂）&lt;/li&gt;
&lt;li&gt;Anti-features（加了後，用戶會瘋掉的）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
應花力氣做 1 和 2，有額外時間才做 3，避免做 4 和 5。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-org82e742e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org82e742e&quot;&gt;面試的時候如何介紹你自己&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org82e742e&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
不只是面試，在很多社交場合都需要介紹自己，介紹自己做過的事，要會講故事、讓人有興趣聽下去。平時要準備一些小段的、不同角度的自我介紹，要用的時候就像調 API 一樣方便：）
&lt;/p&gt;

&lt;p&gt;
名人在電視上接受採訪，好像都能即興演講、侃侃而談；都是平時有準備、有練習、不斷 A/B testing、不斷迭代的，最後總會在合適的時候呈現出合適的版本的說辭。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://stackoverflow.blog/2017/04/27/how-to-talk-about-yourself-in-an-interview/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
一言以蔽之: &lt;code&gt;隨時做好說話準備&lt;/code&gt; 。
&lt;/p&gt;

&lt;p&gt;
面試是一個壓力很大的過程，其壓力可能大到讓你講話都吱吱嗚嗚，思考不流暢。
&lt;/p&gt;

&lt;p&gt;
對於做好說話準備，作者提供一個需要準備的列表:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;你做了什麼產品 (What have you built?)&lt;/li&gt;
&lt;li&gt;你工作上遇到最困難的狀況是什麼 (What is the hardest technical problem you have run into?)&lt;/li&gt;
&lt;li&gt;你怎解決他 (How did you solve it?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
這個列表上的對談，可以幫助面試者了解你的狀況。
&lt;/p&gt;

&lt;p&gt;
那應該如何準備呢? 作者建議用一系列的卡片 (notecards) ，上面列出你正在進行/管理的專案的特色以及目標，如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/resume-card.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
最後，因為這是 &lt;a href=&quot;https://stackoverflow.blog&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stack Overflow Blog&lt;/a&gt; 的文章，所以文末也推薦了去 &lt;a href=&quot;http://stackoverflow.com/jobs?utm_source=so-owned&amp;amp;utm_medium=blog&amp;amp;utm_campaign=dev-c4al&amp;amp;utm_content=c4al-link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stack Overflow Jobs&lt;/a&gt; 去看看有沒有職缺。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge61ebdc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge61ebdc&quot;&gt;你不是你做的產品的用戶&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge61ebdc&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
公司創始人或早期員工往往都（號稱）是自己做的產品的忠實用戶，這有個問題：你就會按自己的思維習慣設計產品，亂加各種極其小眾的功能；畢竟世界上大部分人是跟你們很不一樣的。
&lt;/p&gt;

&lt;p&gt;
一個產品的整個生命裡，非用戶數總是遠遠多於已有用戶數；在取悅少數死忠用戶與爭取多數新用戶之間，應優先考慮後者。
&lt;/p&gt;

&lt;p&gt;
&quot;Your customer focus should always be on new or potential users, not early users. Early users will bias experiments, prompt you to build more and more niche features, and stunt growth.&quot;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://news.greylock.com/you-are-not-your-customer-1621b8eaaf16?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
新創(startup)在一開始會成功的原因，大致上可以區分為兩種:
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;具有獨特的特色(unique insight) 或是解決了自己或是贊助者(founder)的某種問題(pain point)，並假設這問題其他人也會有。&lt;/li&gt;
&lt;li&gt;傾聽用戶，並讓他們理解你所提供的價值(make sure they understand and appreciate the value you&#39;re providing)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
產品的開發過程中，早期使用者會願意幫忙找到一些產品的缺陷(flaws)，並讓這項產品在他們手中可以良好了運作，但最終，當他們變成死忠用戶(power users)的時候，他們提交的回饋常常都是怎樣讓這個產品可以更好的運作在 &lt;code&gt;他們自己&lt;/code&gt; 身上。
&lt;/p&gt;

&lt;p&gt;
對於一項產品，應該要更加著重在新的用戶上面，雖然死忠用戶(power users)提供的回饋可能會有非常好的特性，但是相對的也會讓你的產品對新用戶而言更加的複雜。
&lt;/p&gt;

&lt;p&gt;
延伸閱讀：
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-are-some-of-the-most-important-things-youve-learned-in-marketing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are some of the most important things you&#39;ve learned in marketing?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgeb606de&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgeb606de&quot;&gt;Google’s real Kubernetes magic is all about community, not code&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgeb606de&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
作為開源項目，Kubernetes 是非常成功的，Google 懂得放手讓公司外的人貢獻代碼。Google 員工 commit 代碼的比例穩步下降，這是好事。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.techrepublic.com/article/googles-real-kubernetes-magic-is-all-about-community-not-code/?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
其實 Google 近幾年開源蠻多程式碼的，不過有一種說法是: 開源給其他人維護，這樣 Google 就可以少花點人力在上面 :)
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://blog.gcp.expert/kubernetes-gke-introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes&lt;/a&gt; 是 Google 開源的一套叢集管理系統，其目的是讓使用者透過 Kubernetes 叢集來進行雲端容器叢集的管理，而無需使用者進行複雜的設定工作 (&lt;a href=&quot;https://wild0522.gitbooks.io/yeasy_dp/content/kubernetes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;參考資料&lt;/a&gt;)。
&lt;/p&gt;

&lt;p&gt;
而這篇文章講到了 Kubernetes 已經在 Google 內部使用了 15 年之久，和他的進爭對手 &lt;a href=&quot;http://mesos.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Mesos&lt;/a&gt; 相比，  &lt;a href=&quot;https://blog.gcp.expert/kubernetes-gke-introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kubernetes&lt;/a&gt; 有 5 倍大的社群，高達 1,350 個貢獻者，並且有 1,500 個相關工作。
&lt;/p&gt;

&lt;p&gt;
文章後面我就沒啥興趣了，有興趣自己去看，對我而言重要的應該是這個: &lt;a href=&quot;https://github.com/kubernetes/community?utm_campaign=crowdfire&amp;amp;utm_content=crowdfire&amp;amp;utm_medium=social&amp;amp;utm_source=social#1464121790-tw%231493030328731&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kubernetes/community: Kubernetes community content&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
本篇提及的延伸閱讀:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://www.techrepublic.com/article/why-kubernetes-could-be-crowned-king-of-container-management/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Kubernetes could be crowned king of container management&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.techrepublic.com/article/why-kubernetes-may-be-a-bigger-threat-to-amazon-than-googles-cloud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Kubernetes may be a bigger threat to Amazon than Google&#39;s Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org72e4a54&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org72e4a54&quot;&gt;這可能是本年度最有趣的 bug 了&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org72e4a54&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
Xfce 是 Linux 上輕量級的桌面環境，GNOME 與 KDE 替代品。不止一個用戶報告了個「bug」：Xfce 的默認桌面的壁紙損壞顯示器屏幕！因為默認的壁紙是老鼠，家裡的貓看了就會去抓顯示器屏幕，把屏幕刮花了！
&lt;/p&gt;

&lt;p&gt;
bug 的修復辦法：把壁紙換成狗。。。但家裡的狗會不會看到了也會來打招呼、舔屏、打架？你看，程序員平時的工作多麼不容易，修復一個 bug，同時引入另一個 bug，總是有活幹。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://www.omgubuntu.co.uk/2017/03/xfce-wallpaper-cat-bug&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文連結&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
這個 bug :)
&lt;/p&gt;

&lt;p&gt;
Xfce 預設的桌面是長這樣的，中間有一隻老鼠
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/x1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
其實這個桌布用了很久很久了，但是最近卻有人回報說，自己家的貓看到這個桌面會開始對螢幕抓啊抓啊抓，都把螢幕抓壞了:S。因此這個用戶在 bugzilla 上面開了這個 bug: &lt;a href=&quot;https://bugzilla.xfce.org/show_bug.cgi?id=12117&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12117 – The default desktop startup screen causes damage to monitor!&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
不過如果進去看這個 bug，會發現到裡面的回應也很有趣:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Can&#39;t reproduce this bug, my cat is absolutely indifferent about it. What monitor do you use? Have you tried reporting the bug upstream at the cat vendor?
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;p&gt;
然後還有人在 &lt;a href=&quot;https://www.reddit.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reddit&lt;/a&gt; 上面貼了這篇: &lt;a href=&quot;https://www.reddit.com/r/linux/comments/60rzjn/my_cat_was_fooled_by_xfce/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My cat was fooled by XFCE：linux&lt;/a&gt; ，這隻貓好可愛啊 XD
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/7a59e714/x2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在我寫這篇文章的時候，&lt;a href=&quot;https://bugzilla.xfce.org/show_bug.cgi?id=12117&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BUG #12117&lt;/a&gt; 還沒被結案，開發者應該也很傻眼吧，其實只要換張桌布就好了啊 :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/7a59e714/#disqus_thread</comments>
    </item>
    
    <item>
      <title>將 Orange Pi Zero 改造成 AirPlay 音頻播放器</title>
      <link>https://coldnew.github.io/d48bba9e/</link>
      <guid>https://coldnew.github.io/d48bba9e/</guid>
      <pubDate>Sun, 23 Apr 2017 12:27:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近突然又想自己架設個簡單的 AirPlay 播放器，好透過 wifi 遠端播放我的 iPhone 或是 MacBook 上面的音樂。
&lt;/p&gt;

&lt;p&gt;
剛好手邊的單板電腦都已經有各自的用途，於是便來找一片新的板子，最後鎖定了 &lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 這片開發板 (我選的是記憶體為 256 MB 的版本)。
&lt;/p&gt;

&lt;p&gt;
會選這片的原因，主要是包含運費後他最便宜(大約 NT 362 元)，剩下要自己準備的則是: USB 電源、USB 手機充電線、8GB MicroSD 卡。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
這邊就來紀錄一下我怎樣進行設定的。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgca93862&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgca93862&quot;&gt;下載 Image&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgca93862&quot;&gt;
&lt;p&gt;
首先連線到 &lt;a href=&quot;http://www.orangepi.org/downloadresources/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.orangepi.org/downloadresources/&lt;/a&gt; ，取得你要用的 Image。由於我只是要用於文字介面，因此選擇 &lt;code&gt;Debian Server&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
下載好 Image 並解壓縮後，可以直接透過 &lt;code&gt;dd&lt;/code&gt; 命令將其燒錄到 SD 卡 (假設 SD 卡設備為: /dev/sdc )
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ sudo dd if=debian_server_For_OrangePizero_v0_9_2.img of=/dev/sdc bs=1m
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf0dba01&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf0dba01&quot;&gt;連接 UART&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf0dba01&quot;&gt;
&lt;p&gt;
將 SD 卡插上後，我會先透過 USB 轉 TTL 的轉接線來登入終端介面
&lt;/p&gt;

&lt;p&gt;
從 &lt;a href=&quot;http://linux-sunxi.org/Xunlong_Orange_Pi_Zero&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xunlong Orange Pi Zero&lt;/a&gt; 上面可以看到 Orange Pi Zero 的腳位是這樣定義的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a6.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
因此我們接線的時候，要把 USB 轉 TTL 線上面的 TX 接到 Orange Pi Zero 的 RX, TTL 線上面的 RX 接到 Orange Pi Zero 的 TX:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a5.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果接上去後，開機沒任何訊息的話，可以試著把 TX 和 RX 線對調，看看是不是接錯了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf165c76&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf165c76&quot;&gt;預設帳號密碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf165c76&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 預設的帳號密碼是這樣的:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;帳號: root&lt;/li&gt;
&lt;li&gt;密碼: orangepi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
不要輸入錯誤進可以進去啦
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
Debian GNU/Linux 8 OrangePizero ttyS0

OrangePizero login: root
Password:
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6fb1cb6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6fb1cb6&quot;&gt;擴充檔案系統大小&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6fb1cb6&quot;&gt;
&lt;p&gt;
進入到系統的第一步，當然就是擴充 SD 卡的空間了
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# fs_resize

Disk /dev/mmcblk0: 7.4 GiB, 7969177600 bytes, 15564800 sectors
/dev/mmcblk0p1       40960  172031  131072   64M  b W95 FAT32
/dev/mmcblk0p2      172032 2113536 1941505  948M 83 Linux

Max block: 15563776
Part end: 2113536
Part start: 172032

WARNING: Do you want to resize &quot;/dev/mmcblk0p2&quot; (y/N)?  y
PARTITION RESIZED.
*********************************************
Rootfs Extended. Please REBOOT to take effect
*********************************************
&lt;/pre&gt;

&lt;p&gt;
好了後，我們就可以來進行網路設定，你也可以先接上網路線，然後更新套件。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb0f72bc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb0f72bc&quot;&gt;設定 wifi&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb0f72bc&quot;&gt;
&lt;p&gt;
我自己對於 wifi 的設定，一直都是習慣使用 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/NetworkManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NetworkManager&lt;/a&gt; 來進行的。因此在這邊先啟動 NetworkManager:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl start NetworkManager
root@OrangePizero:~# systemctl enable NetworkManager
&lt;/pre&gt;

&lt;p&gt;
另外，由於 &lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 有兩個 wifi 設備，一個是 p2p0，另外一個是 wlan1
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmcli dev
DEVICE   TYPE      STATE      CONNECTION
eth0     ethernet  connected  eth0
p2p0     wifi      unmanaged  --
gre0     gre       unmanaged  --
lo       loopback  unmanaged  --
wlan1    wifi      unmanaged  --
ip6tnl0  unknown   unmanaged  --
sit0     unknown   unmanaged  --
tunl0    unknown   unmanaged  --
&lt;/pre&gt;

&lt;p&gt;
由於 NetworkManager 預設會先去抓 p2p0 (按照字母排列)，因此我會設定成讓 NetworkManager 忽略 p2p0 這個設備，避免設定 wifi 變得麻煩。
&lt;/p&gt;

&lt;p&gt;
編輯  &lt;code&gt;/etc/NetworkManager/NetworkManager.conf&lt;/code&gt; ，加入以下資訊:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-conf&quot;&gt;[&lt;span style=&quot;color: #fff59d;&quot;&gt;main&lt;/span&gt;]
&lt;span style=&quot;color: #aaccff;&quot;&gt;plugins&lt;/span&gt;=ifupdown,keyfile

[&lt;span style=&quot;color: #fff59d;&quot;&gt;ifupdown&lt;/span&gt;]
&lt;span style=&quot;color: #aaccff;&quot;&gt;managed&lt;/span&gt;=true
[&lt;span style=&quot;color: #fff59d;&quot;&gt;keyfile&lt;/span&gt;]
&lt;span style=&quot;color: #aaccff;&quot;&gt;unmanaged-devices&lt;/span&gt;=interface-name:p2p0
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，重新啟動 NetworkManager
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl restart NetworkManager
&lt;/pre&gt;

&lt;p&gt;
這樣我們就可以列出我們可以連線的無線網路:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmcli dev wifi list
*  SSID        MODE   CHAN  RATE       SIGNAL  BARS  SECURITY
   Edgar       Infra  10    54 Mbit/s  100     ▂▄▆█  WPA1 WPA2
   AUSTIN&amp;amp;FAY  Infra  6     54 Mbit/s  45      ▂▄__  WPA1 WPA2
   75226490    Infra  1     54 Mbit/s  35      ▂▄__  WPA2
   2.4aaaaaaa  Infra  4     54 Mbit/s  34      ▂▄__  WPA1 WPA2
   RT-N16      Infra  6     54 Mbit/s  29      ▂___  WPA2
   a89565282   Infra  1     54 Mbit/s  25      ▂___  WPA1 WPA2
   dlink       Infra  11    54 Mbit/s  20      ▂___  WPA1 WPA2
   mat         Infra  3     54 Mbit/s  22      ▂___  WPA1
&lt;/pre&gt;

&lt;p&gt;
假設我們要連接的 ESSID 為 Edgar，則接下來使用以下命令進行連接 
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmtui-connect Edgar
&lt;/pre&gt;

&lt;p&gt;
你會看到出現一個輸入密碼的視窗，輸入進去後應該就可以正常連上網路了
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你想要一個指令就完成這個動作，你可以使用下面的命令 (替換 &amp;lt;essid&amp;gt; 和 &amp;lt;password&amp;gt;)
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmcli dev wifi connect &amp;lt;essid&amp;gt; password &amp;lt;password&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
這樣我們就完成無線網路的連接。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc21e98c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc21e98c&quot;&gt;設定 avahi-daemon&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc21e98c&quot;&gt;
&lt;p&gt;
為了讓 Apple 設備可以透過 &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-configuration_networking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zeroconf&lt;/a&gt; 協定找到同一網域下的設備，我們必須啟用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Avahi_(software)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Avahi&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
這邊啟用 avahi 並將其加入開機啟動項目去。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl start avahi-daemon
root@OrangePizero:~# systemctl enable avahi-daemon
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org4c85a40&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4c85a40&quot;&gt;編譯並安裝 shairport-sync&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4c85a40&quot;&gt;
&lt;p&gt;
首先，我們要安裝一些軟體來幫助我們編譯並安裝 Shairport。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;root@OrangePizero:~# apt-get install build-essential git autoconf libtool &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    libdaemon-dev libasound2-dev libpopt-dev libconfig-dev &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    avahi-daemon libavahi-client-dev &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    libssl-dev
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
該裝的軟體都裝完以後，我們就可以下載最新的 shairport-sync 程式碼並安裝到系統內。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/mikebrady/shairport-sync.git
&lt;span style=&quot;color: #ccaaff;&quot;&gt;cd&lt;/span&gt; shairport-sync &amp;amp;&amp;amp; autoreconf -i -f
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來就是依照 &lt;a href=&quot;https://github.com/mikebrady/shairport-sync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shairport-sync&lt;/a&gt; 的 README 進行設置，我是設定了這些參數
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;./configure &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    --with-alsa --with-stdout --with-pipe --with-avahi &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    --with-ssl=openssl --with-metadata --with-systemd
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來將整個程式安裝到系統中
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~/shairport-sync# make install
&lt;/pre&gt;

&lt;p&gt;
因為在前面的參數我是設定為給 &lt;i&gt;systemd&lt;/i&gt; 的使用者使用，因此需要增加使用者與群組
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# groupadd -r shairport-sync
root@OrangePizero:~# useradd -r -M -g shairport-sync -s /usr/bin/nologin -G audio shairport-sync
&lt;/pre&gt;

&lt;p&gt;
接著加入到 &lt;i&gt;systemd&lt;/i&gt; 開機設定中，並啟用 shairport-sync 服務
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl enable shairport-sync
root@OrangePizero:~# systemctl start shairport-sync
&lt;/pre&gt;

&lt;p&gt;
完成後，來設定輸出設備，這邊我採用的是 USB DAC。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb325eaf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb325eaf&quot;&gt;設定 USB DAC&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb325eaf&quot;&gt;
&lt;p&gt;
我自己播放音樂的時候，都是透過 USB DAC 來進行播放的 (這樣音質較好)，因此要多進行一些步驟，讓 &lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 可以透過 USB 音效卡輸出。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0f496fb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0f496fb&quot;&gt;載入需要的驅動&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org0f496fb&quot;&gt;
&lt;p&gt;
正常來講，我們只要載入了 &lt;code&gt;snd_usb_audio&lt;/code&gt; 這個驅動，就可以讓 ALSA 識別 USB 音效卡。
&lt;/p&gt;

&lt;p&gt;
不過&amp;#x2026;&amp;#x2026;
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:/lib/modules# modprobe snd_usb_audio
modprobe: ERROR: ../libkmod/libkmod.c:557 kmod_search_moddep() could not open moddep file &#39;/lib/modules/3.4.39/modules.dep.bin&#39;
&lt;/pre&gt;

&lt;p&gt;
好吧，有東西從缺，改用 &lt;code&gt;insmod&lt;/code&gt; 的方式來載入。我們在 &lt;code&gt;/etc/rc.local&lt;/code&gt; 加上這些東西
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;insmod /lib/modules/3.4.39_zero/snd-usbmidi-lib.ko
insmod /lib/modules/3.4.39_zero/snd-hwdep.ko
insmod /lib/modules/3.4.39_zero/snd-usb-audio.ko
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣重開機後，你可以透過 &lt;code&gt;lsmod&lt;/code&gt; 確認需要用到的驅動是否有真的被載入:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# lsmod
Module                  Size  Used by
snd_usb_audio          79205  2
snd_hwdep               5337  1 snd_usb_audio
snd_usbmidi_lib        17391  1 snd_usb_audio
xradio_wlan           230792  0
&lt;/pre&gt;

&lt;p&gt;
如果上面列出的模組有缺的話，可以透過以下命令檢查是否 &lt;code&gt;/etc/rc.local&lt;/code&gt; 有哪個地方出錯
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl status rc-local
● rc-local.service - /etc/rc.local Compatibility
   Loaded: loaded (/lib/systemd/system/rc-local.service; static)
   Active: active (exited) since Thu 1970-01-01 00:38:08 UTC; 47 years 3 months ago

Jan 01 00:38:07 OrangePizero systemd[1]: Starting /etc/rc.local Compatibility...
Jan 01 00:38:08 OrangePizero systemd[1]: Started /etc/rc.local Compatibility.
&lt;/pre&gt;

&lt;p&gt;
確認該被載入的驅動有正常載入後，我們來指定 ALSA 預設得輸出設備。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org70ec549&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org70ec549&quot;&gt;指定 ALSA 輸出設備&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org70ec549&quot;&gt;
&lt;p&gt;
那我們要怎樣讓 ALSA 知道我們指定的 USB DAC 的輸出位置呢?
&lt;/p&gt;

&lt;p&gt;
首先先列出可以使用的音效卡資訊:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# cat /proc/asound/cards
0 [audiocodec     ]: audiocodec - audiocodec
                     audiocodec
1 [sndhdmi        ]: sndhdmi - sndhdmi
                     sndhdmi
2 [Set            ]: USB-Audio - C-Media USB Headphone Set
                     C-Media USB Headphone Set at usb-sunxi-ohci-1, full speed
&lt;/pre&gt;

&lt;p&gt;
找到編號是 &lt;code&gt;2&lt;/code&gt; 後，我們就可以編輯 &lt;code&gt;/etc/asound.conf&lt;/code&gt; 指定預設的 alsa 設備：
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
defaults.pcm.card 2
defaults.ctl.card 2
&lt;/pre&gt;

&lt;p&gt;
這樣子播放的時候，ALSA 就會選用 &lt;code&gt;USB-Audio - C-Media USB Headphone Set&lt;/code&gt; 這個設備進行播放。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf373471&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf373471&quot;&gt;在 macOS 下透過 AirPlay 播放&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf373471&quot;&gt;
&lt;p&gt;
所有設定完成後，只要你的 macOS 和你的 AirPlay 設備在同一個網域，你就可以這樣找到他:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a2.png&quot; width=&quot;40%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
或是透過 iTunes 選擇設備:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a3.png&quot; width=&quot;40%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
試試看，播放聲音的時候，聲音是不是透過連接在 Orange Pi 上面的 USB DAC 送出來的 :)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf003979&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf003979&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf003979&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://linux-sunxi.org/Xunlong_Orange_Pi_Zero&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xunlong Orange Pi Zero - linux-sunxi.org&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/NetworkManager#nmcli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NetworkManager - ArchWiki&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://coldnew.github.io/blog/2015/11-12_shairport-sync/&quot;&gt;使用 shairport-sync 在 Raspberry Pi 上上建立 AirPlay 音樂播放器&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://piboards.com/2017/02/13/orange-pi-as-time-machine-server/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi as Time Machine Server | Pi Boards&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://www.linuxbabe.com/linux-server/how-to-enable-etcrc-local-with-systemd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Enable /etc/rc.local with Systemd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
最近突然又想自己架設個簡單的 AirPlay 播放器，好透過 wifi 遠端播放我的 iPhone 或是 MacBook 上面的音樂。
&lt;/p&gt;

&lt;p&gt;
剛好手邊的單板電腦都已經有各自的用途，於是便來找一片新的板子，最後鎖定了 &lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 這片開發板 (我選的是記憶體為 256 MB 的版本)。
&lt;/p&gt;

&lt;p&gt;
會選這片的原因，主要是包含運費後他最便宜(大約 NT 362 元)，剩下要自己準備的則是: USB 電源、USB 手機充電線、8GB MicroSD 卡。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
這邊就來紀錄一下我怎樣進行設定的。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgca93862&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgca93862&quot;&gt;下載 Image&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgca93862&quot;&gt;
&lt;p&gt;
首先連線到 &lt;a href=&quot;http://www.orangepi.org/downloadresources/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.orangepi.org/downloadresources/&lt;/a&gt; ，取得你要用的 Image。由於我只是要用於文字介面，因此選擇 &lt;code&gt;Debian Server&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
下載好 Image 並解壓縮後，可以直接透過 &lt;code&gt;dd&lt;/code&gt; 命令將其燒錄到 SD 卡 (假設 SD 卡設備為: /dev/sdc )
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ sudo dd if=debian_server_For_OrangePizero_v0_9_2.img of=/dev/sdc bs=1m
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf0dba01&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf0dba01&quot;&gt;連接 UART&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf0dba01&quot;&gt;
&lt;p&gt;
將 SD 卡插上後，我會先透過 USB 轉 TTL 的轉接線來登入終端介面
&lt;/p&gt;

&lt;p&gt;
從 &lt;a href=&quot;http://linux-sunxi.org/Xunlong_Orange_Pi_Zero&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xunlong Orange Pi Zero&lt;/a&gt; 上面可以看到 Orange Pi Zero 的腳位是這樣定義的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a6.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
因此我們接線的時候，要把 USB 轉 TTL 線上面的 TX 接到 Orange Pi Zero 的 RX, TTL 線上面的 RX 接到 Orange Pi Zero 的 TX:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a5.jpg&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果接上去後，開機沒任何訊息的話，可以試著把 TX 和 RX 線對調，看看是不是接錯了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf165c76&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf165c76&quot;&gt;預設帳號密碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf165c76&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 預設的帳號密碼是這樣的:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;帳號: root&lt;/li&gt;
&lt;li&gt;密碼: orangepi&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
不要輸入錯誤進可以進去啦
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
Debian GNU/Linux 8 OrangePizero ttyS0

OrangePizero login: root
Password:
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6fb1cb6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6fb1cb6&quot;&gt;擴充檔案系統大小&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6fb1cb6&quot;&gt;
&lt;p&gt;
進入到系統的第一步，當然就是擴充 SD 卡的空間了
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# fs_resize

Disk /dev/mmcblk0: 7.4 GiB, 7969177600 bytes, 15564800 sectors
/dev/mmcblk0p1       40960  172031  131072   64M  b W95 FAT32
/dev/mmcblk0p2      172032 2113536 1941505  948M 83 Linux

Max block: 15563776
Part end: 2113536
Part start: 172032

WARNING: Do you want to resize &quot;/dev/mmcblk0p2&quot; (y/N)?  y
PARTITION RESIZED.
*********************************************
Rootfs Extended. Please REBOOT to take effect
*********************************************
&lt;/pre&gt;

&lt;p&gt;
好了後，我們就可以來進行網路設定，你也可以先接上網路線，然後更新套件。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb0f72bc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb0f72bc&quot;&gt;設定 wifi&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb0f72bc&quot;&gt;
&lt;p&gt;
我自己對於 wifi 的設定，一直都是習慣使用 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/NetworkManager&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NetworkManager&lt;/a&gt; 來進行的。因此在這邊先啟動 NetworkManager:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl start NetworkManager
root@OrangePizero:~# systemctl enable NetworkManager
&lt;/pre&gt;

&lt;p&gt;
另外，由於 &lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 有兩個 wifi 設備，一個是 p2p0，另外一個是 wlan1
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmcli dev
DEVICE   TYPE      STATE      CONNECTION
eth0     ethernet  connected  eth0
p2p0     wifi      unmanaged  --
gre0     gre       unmanaged  --
lo       loopback  unmanaged  --
wlan1    wifi      unmanaged  --
ip6tnl0  unknown   unmanaged  --
sit0     unknown   unmanaged  --
tunl0    unknown   unmanaged  --
&lt;/pre&gt;

&lt;p&gt;
由於 NetworkManager 預設會先去抓 p2p0 (按照字母排列)，因此我會設定成讓 NetworkManager 忽略 p2p0 這個設備，避免設定 wifi 變得麻煩。
&lt;/p&gt;

&lt;p&gt;
編輯  &lt;code&gt;/etc/NetworkManager/NetworkManager.conf&lt;/code&gt; ，加入以下資訊:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-conf&quot;&gt;[&lt;span style=&quot;color: #fff59d;&quot;&gt;main&lt;/span&gt;]
&lt;span style=&quot;color: #aaccff;&quot;&gt;plugins&lt;/span&gt;=ifupdown,keyfile

[&lt;span style=&quot;color: #fff59d;&quot;&gt;ifupdown&lt;/span&gt;]
&lt;span style=&quot;color: #aaccff;&quot;&gt;managed&lt;/span&gt;=true
[&lt;span style=&quot;color: #fff59d;&quot;&gt;keyfile&lt;/span&gt;]
&lt;span style=&quot;color: #aaccff;&quot;&gt;unmanaged-devices&lt;/span&gt;=interface-name:p2p0
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，重新啟動 NetworkManager
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl restart NetworkManager
&lt;/pre&gt;

&lt;p&gt;
這樣我們就可以列出我們可以連線的無線網路:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmcli dev wifi list
*  SSID        MODE   CHAN  RATE       SIGNAL  BARS  SECURITY
   Edgar       Infra  10    54 Mbit/s  100     ▂▄▆█  WPA1 WPA2
   AUSTIN&amp;amp;FAY  Infra  6     54 Mbit/s  45      ▂▄__  WPA1 WPA2
   75226490    Infra  1     54 Mbit/s  35      ▂▄__  WPA2
   2.4aaaaaaa  Infra  4     54 Mbit/s  34      ▂▄__  WPA1 WPA2
   RT-N16      Infra  6     54 Mbit/s  29      ▂___  WPA2
   a89565282   Infra  1     54 Mbit/s  25      ▂___  WPA1 WPA2
   dlink       Infra  11    54 Mbit/s  20      ▂___  WPA1 WPA2
   mat         Infra  3     54 Mbit/s  22      ▂___  WPA1
&lt;/pre&gt;

&lt;p&gt;
假設我們要連接的 ESSID 為 Edgar，則接下來使用以下命令進行連接 
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmtui-connect Edgar
&lt;/pre&gt;

&lt;p&gt;
你會看到出現一個輸入密碼的視窗，輸入進去後應該就可以正常連上網路了
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你想要一個指令就完成這個動作，你可以使用下面的命令 (替換 &amp;lt;essid&amp;gt; 和 &amp;lt;password&amp;gt;)
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# nmcli dev wifi connect &amp;lt;essid&amp;gt; password &amp;lt;password&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
這樣我們就完成無線網路的連接。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc21e98c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc21e98c&quot;&gt;設定 avahi-daemon&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc21e98c&quot;&gt;
&lt;p&gt;
為了讓 Apple 設備可以透過 &lt;a href=&quot;https://en.wikipedia.org/wiki/Zero-configuration_networking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zeroconf&lt;/a&gt; 協定找到同一網域下的設備，我們必須啟用 &lt;a href=&quot;https://en.wikipedia.org/wiki/Avahi_(software)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Avahi&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
這邊啟用 avahi 並將其加入開機啟動項目去。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl start avahi-daemon
root@OrangePizero:~# systemctl enable avahi-daemon
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org4c85a40&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4c85a40&quot;&gt;編譯並安裝 shairport-sync&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4c85a40&quot;&gt;
&lt;p&gt;
首先，我們要安裝一些軟體來幫助我們編譯並安裝 Shairport。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;root@OrangePizero:~# apt-get install build-essential git autoconf libtool &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    libdaemon-dev libasound2-dev libpopt-dev libconfig-dev &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    avahi-daemon libavahi-client-dev &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    libssl-dev
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
該裝的軟體都裝完以後，我們就可以下載最新的 shairport-sync 程式碼並安裝到系統內。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/mikebrady/shairport-sync.git
&lt;span style=&quot;color: #ccaaff;&quot;&gt;cd&lt;/span&gt; shairport-sync &amp;amp;&amp;amp; autoreconf -i -f
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來就是依照 &lt;a href=&quot;https://github.com/mikebrady/shairport-sync&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shairport-sync&lt;/a&gt; 的 README 進行設置，我是設定了這些參數
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;./configure &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    --with-alsa --with-stdout --with-pipe --with-avahi &lt;span style=&quot;color: #aadddd;&quot;&gt;\&lt;/span&gt;
    --with-ssl=openssl --with-metadata --with-systemd
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來將整個程式安裝到系統中
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~/shairport-sync# make install
&lt;/pre&gt;

&lt;p&gt;
因為在前面的參數我是設定為給 &lt;i&gt;systemd&lt;/i&gt; 的使用者使用，因此需要增加使用者與群組
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# groupadd -r shairport-sync
root@OrangePizero:~# useradd -r -M -g shairport-sync -s /usr/bin/nologin -G audio shairport-sync
&lt;/pre&gt;

&lt;p&gt;
接著加入到 &lt;i&gt;systemd&lt;/i&gt; 開機設定中，並啟用 shairport-sync 服務
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl enable shairport-sync
root@OrangePizero:~# systemctl start shairport-sync
&lt;/pre&gt;

&lt;p&gt;
完成後，來設定輸出設備，這邊我採用的是 USB DAC。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb325eaf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb325eaf&quot;&gt;設定 USB DAC&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb325eaf&quot;&gt;
&lt;p&gt;
我自己播放音樂的時候，都是透過 USB DAC 來進行播放的 (這樣音質較好)，因此要多進行一些步驟，讓 &lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi Zero&lt;/a&gt; 可以透過 USB 音效卡輸出。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0f496fb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0f496fb&quot;&gt;載入需要的驅動&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org0f496fb&quot;&gt;
&lt;p&gt;
正常來講，我們只要載入了 &lt;code&gt;snd_usb_audio&lt;/code&gt; 這個驅動，就可以讓 ALSA 識別 USB 音效卡。
&lt;/p&gt;

&lt;p&gt;
不過&amp;#x2026;&amp;#x2026;
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:/lib/modules# modprobe snd_usb_audio
modprobe: ERROR: ../libkmod/libkmod.c:557 kmod_search_moddep() could not open moddep file &#39;/lib/modules/3.4.39/modules.dep.bin&#39;
&lt;/pre&gt;

&lt;p&gt;
好吧，有東西從缺，改用 &lt;code&gt;insmod&lt;/code&gt; 的方式來載入。我們在 &lt;code&gt;/etc/rc.local&lt;/code&gt; 加上這些東西
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;insmod /lib/modules/3.4.39_zero/snd-usbmidi-lib.ko
insmod /lib/modules/3.4.39_zero/snd-hwdep.ko
insmod /lib/modules/3.4.39_zero/snd-usb-audio.ko
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣重開機後，你可以透過 &lt;code&gt;lsmod&lt;/code&gt; 確認需要用到的驅動是否有真的被載入:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# lsmod
Module                  Size  Used by
snd_usb_audio          79205  2
snd_hwdep               5337  1 snd_usb_audio
snd_usbmidi_lib        17391  1 snd_usb_audio
xradio_wlan           230792  0
&lt;/pre&gt;

&lt;p&gt;
如果上面列出的模組有缺的話，可以透過以下命令檢查是否 &lt;code&gt;/etc/rc.local&lt;/code&gt; 有哪個地方出錯
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# systemctl status rc-local
● rc-local.service - /etc/rc.local Compatibility
   Loaded: loaded (/lib/systemd/system/rc-local.service; static)
   Active: active (exited) since Thu 1970-01-01 00:38:08 UTC; 47 years 3 months ago

Jan 01 00:38:07 OrangePizero systemd[1]: Starting /etc/rc.local Compatibility...
Jan 01 00:38:08 OrangePizero systemd[1]: Started /etc/rc.local Compatibility.
&lt;/pre&gt;

&lt;p&gt;
確認該被載入的驅動有正常載入後，我們來指定 ALSA 預設得輸出設備。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org70ec549&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org70ec549&quot;&gt;指定 ALSA 輸出設備&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org70ec549&quot;&gt;
&lt;p&gt;
那我們要怎樣讓 ALSA 知道我們指定的 USB DAC 的輸出位置呢?
&lt;/p&gt;

&lt;p&gt;
首先先列出可以使用的音效卡資訊:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
root@OrangePizero:~# cat /proc/asound/cards
0 [audiocodec     ]: audiocodec - audiocodec
                     audiocodec
1 [sndhdmi        ]: sndhdmi - sndhdmi
                     sndhdmi
2 [Set            ]: USB-Audio - C-Media USB Headphone Set
                     C-Media USB Headphone Set at usb-sunxi-ohci-1, full speed
&lt;/pre&gt;

&lt;p&gt;
找到編號是 &lt;code&gt;2&lt;/code&gt; 後，我們就可以編輯 &lt;code&gt;/etc/asound.conf&lt;/code&gt; 指定預設的 alsa 設備：
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
defaults.pcm.card 2
defaults.ctl.card 2
&lt;/pre&gt;

&lt;p&gt;
這樣子播放的時候，ALSA 就會選用 &lt;code&gt;USB-Audio - C-Media USB Headphone Set&lt;/code&gt; 這個設備進行播放。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf373471&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf373471&quot;&gt;在 macOS 下透過 AirPlay 播放&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf373471&quot;&gt;
&lt;p&gt;
所有設定完成後，只要你的 macOS 和你的 AirPlay 設備在同一個網域，你就可以這樣找到他:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a2.png&quot; width=&quot;40%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
或是透過 iTunes 選擇設備:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d48bba9e/a3.png&quot; width=&quot;40%&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
試試看，播放聲音的時候，聲音是不是透過連接在 Orange Pi 上面的 USB DAC 送出來的 :)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf003979&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf003979&quot;&gt;參考資料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf003979&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://linux-sunxi.org/Xunlong_Orange_Pi_Zero&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xunlong Orange Pi Zero - linux-sunxi.org&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/NetworkManager#nmcli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NetworkManager - ArchWiki&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://coldnew.github.io/blog/2015/11-12_shairport-sync/&quot;&gt;使用 shairport-sync 在 Raspberry Pi 上上建立 AirPlay 音樂播放器&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://piboards.com/2017/02/13/orange-pi-as-time-machine-server/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orange Pi as Time Machine Server | Pi Boards&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://www.linuxbabe.com/linux-server/how-to-enable-etcrc-local-with-systemd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to Enable /etc/rc.local with Systemd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/d48bba9e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Clasp: Common Lisp using LLVM and C++ for Molecular Metaprogramming 筆記</title>
      <link>https://coldnew.github.io/aacb8a72/</link>
      <guid>https://coldnew.github.io/aacb8a72/</guid>
      <pubDate>Thu, 06 Oct 2016 16:13:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
為了了解  &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 這個可以把 Common Lisp 編譯到 LLVM 上的編譯器是如何實作的，於是找來這場演講。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8X69_42Mj-g&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;br&gt;

&lt;p&gt;
講者這場的投影片我沒找到，到是有找到別場次的: &lt;a href=&quot;https://usercontent.irccloud-cdn.com/file/4QyNmxAz/els.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;投影片下載&lt;/a&gt;
&lt;/p&gt;

&lt;br&gt;

&lt;p&gt;
先簡單講些心得，這場演講是 Google 邀請 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 的作者 &lt;a href=&quot;https://chem.cst.temple.edu/schafmeister.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Christian Schafmeister&lt;/a&gt; 去進行的演講，講者為一化學教授。這場演講剛開頭講了大約 20 多分鐘的化學，而講者為了解決 Molecular (分子生物學) 的問題，決定透過 Common Lisp 的 metaprogramming 的能力來提昇整體計算程式的開發以及計算能力，因此實作了一個可以將 Common Lisp 編譯到 LLVM 上的編譯器。
&lt;/p&gt;

&lt;p&gt;
目前 Clojure 沒有實作編譯到 LLVM 的其中一個原因是缺少了合適的 GC (Garbage Collector)，因此如果我們想要自行實作 Clojure -&amp;gt; LLVM 編譯器的話，就一定需要自行實現高效能的 GC 才行。
&lt;/p&gt;

&lt;p&gt;
讓我們回到演講，講者需要實作的東西需要用到很多 C++ 函式庫，但是寫 C++ 很麻煩，因此他想用更高階的語言: Common Lisp 來實現自己的程式，結果不小心實作了一個 Common Lisp 編譯器:  &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 是以 C++ 實作的，並會把 Common Lisp 程式碼轉成 LLVM IR
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來講者解釋了一下它到底要用這套工具做什麼，這邊就去看影片吧 (簡單來說是解決數學計算)。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
另外一個講者想做的，就是透過 C++ 寫 Common Lisp 模組，並且在 Common Lisp 裡面載入它
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
所以為何會選用 Common Lisp 呢? 當然是因為 LISP 很好用阿，只是那些不會用的人一直嫌 LISP 括號太多~
&lt;/p&gt;

&lt;p&gt;
(然後這群人居然可以寫的下 Javascript，也可謂世界奇觀了~)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
當然，懂 LISP 的人都知道使用 Common Lisp 的其中一個理由一定是因為 LISP 的 Macro 太好用了!!
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
因此講者選用了 Common Lisp 來進行開發，可是這樣子 C++ 的函式庫要怎麼辦呢？總不能重寫吧?原本的 Common Lisp 缺乏了很方便和 C++ 進行調用的接口
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a8.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
其實 Common Lisp 是有 FFI (foreign Function Interface)接口的，可以直接載入用 C 寫的函式庫，不過 FFI 用於 C++ 就會有其他問題，比如我們需要在寫一個 wrapper 去包 C++ 的 class。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a9.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而實際上，在目前的 Common Lisp 上的確需要透過 C 語言去包一層，讓 Common Lisp 可以使用 C++ 函式庫
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
為了解決這個問題，講者想到了是不是可以透過 C++ template 來處理這一塊
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
事實上在講者早期撰寫的函式庫中，Boost.Python 這個模組就用到了這樣的概念，透過 C++ template 做個 hook 讓 Python 程式可以呼叫 C++ 函式庫
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
因此，講者就做了 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 這個 Common Lisp 編譯器啦，裡面有些程式碼是從 Embedded Common Lisp 那邊 A 來的呦~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
然後這時候講者講了讓我 Orz 的一句話&amp;#x2026;..
&lt;/p&gt;

&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;
I did not use the compiler because I don&#39;t understand it, I wrote a new one.
&lt;/p&gt;

&lt;p&gt;
I wrote a compiler, I never wrote compiler before.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
所以 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 到底有哪些特別的呢?
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
所以的確  &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 有實作 GC (Garbage Collector)，並且有兩種實作，也就是說如果我想做 Clojure -&amp;gt; LLVM，我也需要自行實作這些 GC 才行。
&lt;/p&gt;

&lt;p&gt;
而這個編譯器還有一個 pointer 追蹤器，可以追蹤指標的使用並且告知 GC。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
那要怎樣在 Clasp 裡面使用 C++ 函式庫呢? 就這樣 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
複雜一點的範例則是這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
編譯成動態函式後，就可以在 Clasp 裡面這樣的載入
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
介紹完 Clasp 後，就是 QA 囉，有興趣自己去看 QA ~
&lt;/p&gt;


&lt;p&gt;
如果你聽完這個演講後，對於這個 Common Lisp 實作有興趣，可以去 GitHub 下載看看:
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;drmeister/clasp&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
為了了解  &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 這個可以把 Common Lisp 編譯到 LLVM 上的編譯器是如何實作的，於是找來這場演講。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8X69_42Mj-g&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;br&gt;

&lt;p&gt;
講者這場的投影片我沒找到，到是有找到別場次的: &lt;a href=&quot;https://usercontent.irccloud-cdn.com/file/4QyNmxAz/els.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;投影片下載&lt;/a&gt;
&lt;/p&gt;

&lt;br&gt;

&lt;p&gt;
先簡單講些心得，這場演講是 Google 邀請 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 的作者 &lt;a href=&quot;https://chem.cst.temple.edu/schafmeister.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Christian Schafmeister&lt;/a&gt; 去進行的演講，講者為一化學教授。這場演講剛開頭講了大約 20 多分鐘的化學，而講者為了解決 Molecular (分子生物學) 的問題，決定透過 Common Lisp 的 metaprogramming 的能力來提昇整體計算程式的開發以及計算能力，因此實作了一個可以將 Common Lisp 編譯到 LLVM 上的編譯器。
&lt;/p&gt;

&lt;p&gt;
目前 Clojure 沒有實作編譯到 LLVM 的其中一個原因是缺少了合適的 GC (Garbage Collector)，因此如果我們想要自行實作 Clojure -&amp;gt; LLVM 編譯器的話，就一定需要自行實現高效能的 GC 才行。
&lt;/p&gt;

&lt;p&gt;
讓我們回到演講，講者需要實作的東西需要用到很多 C++ 函式庫，但是寫 C++ 很麻煩，因此他想用更高階的語言: Common Lisp 來實現自己的程式，結果不小心實作了一個 Common Lisp 編譯器:  &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 是以 C++ 實作的，並會把 Common Lisp 程式碼轉成 LLVM IR
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來講者解釋了一下它到底要用這套工具做什麼，這邊就去看影片吧 (簡單來說是解決數學計算)。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
另外一個講者想做的，就是透過 C++ 寫 Common Lisp 模組，並且在 Common Lisp 裡面載入它
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
所以為何會選用 Common Lisp 呢? 當然是因為 LISP 很好用阿，只是那些不會用的人一直嫌 LISP 括號太多~
&lt;/p&gt;

&lt;p&gt;
(然後這群人居然可以寫的下 Javascript，也可謂世界奇觀了~)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
當然，懂 LISP 的人都知道使用 Common Lisp 的其中一個理由一定是因為 LISP 的 Macro 太好用了!!
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
因此講者選用了 Common Lisp 來進行開發，可是這樣子 C++ 的函式庫要怎麼辦呢？總不能重寫吧?原本的 Common Lisp 缺乏了很方便和 C++ 進行調用的接口
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a8.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
其實 Common Lisp 是有 FFI (foreign Function Interface)接口的，可以直接載入用 C 寫的函式庫，不過 FFI 用於 C++ 就會有其他問題，比如我們需要在寫一個 wrapper 去包 C++ 的 class。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/a9.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而實際上，在目前的 Common Lisp 上的確需要透過 C 語言去包一層，讓 Common Lisp 可以使用 C++ 函式庫
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
為了解決這個問題，講者想到了是不是可以透過 C++ template 來處理這一塊
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
事實上在講者早期撰寫的函式庫中，Boost.Python 這個模組就用到了這樣的概念，透過 C++ template 做個 hook 讓 Python 程式可以呼叫 C++ 函式庫
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
因此，講者就做了 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 這個 Common Lisp 編譯器啦，裡面有些程式碼是從 Embedded Common Lisp 那邊 A 來的呦~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
然後這時候講者講了讓我 Orz 的一句話&amp;#x2026;..
&lt;/p&gt;

&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;
I did not use the compiler because I don&#39;t understand it, I wrote a new one.
&lt;/p&gt;

&lt;p&gt;
I wrote a compiler, I never wrote compiler before.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
所以 &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 到底有哪些特別的呢?
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/b7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
所以的確  &lt;a href=&quot;https://github.com/drmeister/clasp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clasp&lt;/a&gt; 有實作 GC (Garbage Collector)，並且有兩種實作，也就是說如果我想做 Clojure -&amp;gt; LLVM，我也需要自行實作這些 GC 才行。
&lt;/p&gt;

&lt;p&gt;
而這個編譯器還有一個 pointer 追蹤器，可以追蹤指標的使用並且告知 GC。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
那要怎樣在 Clasp 裡面使用 C++ 函式庫呢? 就這樣 ~
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
複雜一點的範例則是這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
編譯成動態函式後，就可以在 Clasp 裡面這樣的載入
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/aacb8a72/c3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
介紹完 Clasp 後，就是 QA 囉，有興趣自己去看 QA ~
&lt;/p&gt;


&lt;p&gt;
如果你聽完這個演講後，對於這個 Common Lisp 實作有興趣，可以去 GitHub 下載看看:
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;drmeister/clasp&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/aacb8a72/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ClojuTRE 2016 演講筆記</title>
      <link>https://coldnew.github.io/fec9a5ee/</link>
      <guid>https://coldnew.github.io/fec9a5ee/</guid>
      <pubDate>Sun, 02 Oct 2016 18:13:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
趁著假日來趕一下進度，於是把我看過的 &lt;a href=&quot;http://clojutre.org/2016/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ClojuTRE 2016&lt;/a&gt; 心得/筆記紀錄在這邊。
&lt;/p&gt;

&lt;p&gt;
嗯&amp;#x2026;&amp;#x2026;其實 ClojuTRE 2016 每一場演講我都看完了&amp;#x2026;..
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
當然，我並不是每一場都聽的懂，於是這筆記只能僅供參考，請勿盡信 orz&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
有些演講真的很難畫重點，還是挑自己有興趣的看吧!!
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgc427d83&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc427d83&quot;&gt;Using Clojure to provide computerized psychotherapy&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc427d83&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Ze3Acb42f3o?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
講者投影片: &lt;a href=&quot;http://clojutre.org/2016/slides/Using-Clojure-to-provide-computerized-psychotherapy.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下載連結&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
這場演講在講 Clojure 用於心理治療 (psychotherapy) 上，一開始講者提出了問題:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
對於這些問題，我們可以有一些解法:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
而更多的問題，則是沒有足夠的人手在心裡治療上，因此講者提到了可以透過電腦來協助，點子來自於 treatment manuals
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而 網路認知行為治療 (iCBT, internet-based Cognitive behavior therapy) 則大部分提供了如上面的那樣的自我治療(sel-help)資訊，這種方式減少了一些問題，比如治療師(therapist)和病患之間的距離
&lt;/p&gt;

&lt;p&gt;
然後後面講者繼續講了一些問題，解法一是用 Clojure 寫了些網頁程式&amp;#x2026;.(嗯，看影片吧) ，而這網頁程式透過 &lt;a href=&quot;http://www.luminusweb.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Luminus framework&lt;/a&gt; 製作，值得一提的是講者第一個學的程式語言就是 Clojure。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org04ce717&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org04ce717&quot;&gt;The Universe As A Value&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org04ce717&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/odPAkEO2uPQ?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
投影片: &lt;a href=&quot;https://juxt.pro/talks/clojutre-2016.html#/sec-title-slide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下載連結&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
這場演講第一次聽的時候我傻眼了，於是就再聽了第二次。
&lt;/p&gt;

&lt;p&gt;
講者一開始先稍微講了些關於宇宙 (Universe) 的事情，然後導向愛因斯坦的相對論，我們可以假設有一個觀察者如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;observer&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;atom &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:universe&lt;/span&gt; u &lt;span style=&quot;color: #ccaaff;&quot;&gt;:time&lt;/span&gt; t&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而愛因斯坦說過，時間和觀察者是相對的 (time is relative to observer)，兩個不同的觀察者會看到不同的宇宙 (Universe)，也就是說，有許多不同的宇宙(Universe)存在。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們可以定義 &lt;code&gt;𝕌&lt;/code&gt; 這個符號為所有可能可以觀察到的宇宙空間(𝕌 is the set of all possible observable universes)，因此，我們就可以定義 Clojure 程式用來選擇下一個 Universe。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;next-u&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;Given an observed universe u, return a possible &#39;next&#39; universe.&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;u t&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;rand-nth &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;filter #&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;consistent? &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt; u t&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; &amp;#120140;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而下一個程式碼，則是讓一個觀察者 (observer) 切換到另外一組 Universe 去
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;switch-universe!&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;Put the given observer in another universe&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;observer&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;swap!
   &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:keys&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;universe time&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
     &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:universe&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;next-u universe time&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
      &lt;span style=&quot;color: #ccaaff;&quot;&gt;:time&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;inc time&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
   observer&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而我們可以這樣執行我們的觀察者:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;run-observer&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;Run the observer, giving them the impression of passing time&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;observer&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;dorun&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;iterate switch-universe! observer&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來接到了 &lt;a href=&quot;http://toutestquantique.fr/en/pump-probe/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pump-probe technique&lt;/a&gt; ，嗯&amp;#x2026;我不知道他在講啥 (摀臉)&amp;#x2026;.所以只好秀一下他接下來的投影片:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
接下來話鋒一轉，突然變成說&amp;#x2026;在 ClojureScript 中，無論是 Om 或是 Reagent, 我們都有一個地方定義 app state (universe)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;The app &#39;universe&#39;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;app-state&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;atom
   &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:drawer&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:items&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;ear-plugs&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;
    shopping
    &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:items&lt;/span&gt;
     &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Coffee&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:quantity&lt;/span&gt; 2&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Milk&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:quantity&lt;/span&gt; 2&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Bird seed&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:quantity&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:lots&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著我們就可以用 &lt;a href=&quot;https://clojuredocs.org/clojure.core/deref&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;deref&lt;/a&gt; 去查看我們的 Universe (app state)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;deref app-state&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;or&lt;/span&gt;

@app-state
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而在這種狀況下，我們滿足了以下兩種規範:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Consistency
&lt;/p&gt;

&lt;p&gt;
In the render phase, the value we render is constant
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Concurrency
&lt;/p&gt;

&lt;p&gt;
We can take our time, nobody is waiting for us!
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
這種 app-state 的形式和物件導向 (Object Orientation) 是不同的，我們知道物件導向是這樣的:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Object Orientation: Lots of changing state, scatered around.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
講者舉 &lt;a href=&quot;https://juxt.pro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://juxt.pro/&lt;/a&gt; 為例，這個網站有很多 state 要去處理，因此我們可以做一個 record 去弄這些 state
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;AppState&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;data-sources&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.IDeref&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;deref &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;this&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;skup&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;refresh! this&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Return the &#39;universe as a value&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Skippy McSkipface: https://github.com/juxt/skip&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來我們就可以對這些 state 進行 derefernece 的動作
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
那要怎樣提昇 referesh 的效能呢?我們可以透過這些支援 time-travel 的工具來進行:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而在開發環境，則可以透過 background watchers 來對資料進行更新的動作
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而這樣做，講者提出了一個結果:
&lt;/p&gt;



&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
嗯&amp;#x2026;我必須承認我聽了兩次還是聽不太懂 = =
&lt;/p&gt;

&lt;p&gt;
最後講者對比了一下 C 和 Lisp:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
It seems to me that there have been two really clean, consistent models of programming so far:
the C model and the Lisp model.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; Paul Graham
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;
&quot;You&#39;re not constructing it like making a tone of source code and compiling it periodically, you&#39;re constructing it the way you construct a city: build some of it, it&#39;s running all the time, so it&#39;s kind of like a live programming language.&quot;
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; Dick Gabriel On Lisp, Software Engineering Radio Episode 84
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org4cdace2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4cdace2&quot;&gt;Native mobile apps with ClojureScript&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4cdace2&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6IYm34nDL64?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
終於有看到一場在講 react-native 作用於 ClojureScript 上的演講！！ 這之前我有稍微玩過，但沒認真寫這樣的程式。
&lt;/p&gt;

&lt;p&gt;
關於 ClojureScript 作用在 react-native 上的資料，可以到 &lt;a href=&quot;http://cljsrn.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cljsrn.org/&lt;/a&gt; 去找，或是 &lt;a href=&quot;http://clojurians.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojurians&lt;/a&gt; 的 Slack &lt;code&gt;#cljsrn&lt;/code&gt; 頻道。
&lt;/p&gt;


&lt;p&gt;
這場演講先從 react-native 開始介紹，說明它和 Cordova/HTML5 的不同:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/cljsrn1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來則是以開發者的觀點來看 react-native，一個基本的 react-native 程式長這樣:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-js-jsx&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;import&lt;/span&gt; React, &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt; Component &lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; from &lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;react&#39;&lt;/span&gt;;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt; Text, View &lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; from &lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;react-native&#39;&lt;/span&gt;;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;class&lt;/span&gt; WhyReactNativeIsSoGreat &lt;span style=&quot;color: #aaffaa;&quot;&gt;extends&lt;/span&gt; Component &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    render&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;
            &amp;lt;View&amp;gt;
              &amp;lt;Text&amp;gt;
                If you like React on the web, yoou&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;ll like React Native.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;              &amp;lt;/Text&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;              &amp;lt;Text&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;                You just use native components like &#39;&lt;/span&gt;View&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39; and &#39;&lt;/span&gt;Text&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;,&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;                instead of web components like &#39;&lt;/span&gt;div&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39; and &#39;&lt;/span&gt;span&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;              &amp;lt;/Text&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;            &amp;lt;/View&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;        );&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;    }&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 ClojureScript 的相對應改寫則是:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;rn-example.core&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:require&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;reagent.core&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; r&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;react-native&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;js&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;require
   &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;react-native/Libraries/react-native/react-native.js&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;view&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;adapt-react-class &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;.-View react-native&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;text&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;adapt-react-class &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;.-Text react-native&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;why-react-native-is-so-great&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;view
   &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;text &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;If you like React on the web, you&#39;ll like React Nateive&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
   &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;text &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;You just use native components like &#39;View&#39; and &#39;Text&#39;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;instead of web components like &#39;div&#39; and &#39;span&#39;.&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
由上面範例可以看到，除了一開始載入一些 javascript 函式庫需要比較骯髒的手段外，剩下的就很純粹是 Clojure 的資料結構的處理。
&lt;/p&gt;

&lt;p&gt;
而在 ClojureScript 上面，目前有兩個 build tools 針對 ClojureScript 在 react-native 上的:
&lt;/p&gt;

&lt;div class=&quot;row &quot;&gt;&lt;div class=&quot;col-md-6 &quot;&gt;
&lt;div class=&quot;github-card&quot; data-github=&quot;mjmeintjes/boot-react-native&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt;
&lt;div class=&quot;github-card&quot; data-github=&quot;drapanjanas/re-natal&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;
講者是這樣評論這兩套工具的:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
boot-react-native
&lt;/p&gt;

&lt;p&gt;
Uses boot, works closer to the RN packager but is slower and inferior out of the box experience (persornal experience)
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
re-natal
&lt;/p&gt;

&lt;p&gt;
Uses leinigen, runtime errors are not traceable, templates for re-frame, om.next and rum
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
而最常用的前端框架則是基於 reagent 的 &lt;a href=&quot;https://github.com/Day8/re-frame&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;re-frame&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
測試方面，則是需要透過 &lt;code&gt;react-native-mock&lt;/code&gt; 去對 ract-native 組件進行測試，圖片和函式庫則是透過 &lt;code&gt;mockery&lt;/code&gt; 來進行測試。
&lt;/p&gt;

&lt;p&gt;
至於效能的比較，就直接看投影片吧：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/cljsrn2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd0f1622&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd0f1622&quot;&gt;Isomorphic web apps with Rum&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd0f1622&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/2fLx4fu9VV8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
本場次為 &lt;a href=&quot;https://github.com/tonsky/rum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rum&lt;/a&gt; 這個 ClojureScript 對於 React.js 的封裝的作者的演講，講者 &lt;a href=&quot;https://github.com/tonsky&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tonsky&lt;/a&gt; 同時也是許多知名 Clojure/Script 函式庫專案的維護者。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;tonsky/rum&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/tonsky&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tonsky&lt;/a&gt; 一開始介紹幾種不同在 ClojureScript 上對於 React.js 的封裝函式庫，然後介紹自己設計  &lt;a href=&quot;https://github.com/tonsky/rum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rum&lt;/a&gt;  的幾個動機，其中一個是更好的與 &lt;a href=&quot;https://github.com/tonsky/datascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;datascript&lt;/a&gt; 或是其他資料儲存函式庫相容。
&lt;/p&gt;

&lt;p&gt;
所以基本的 rum 程式長怎樣呢?
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;rum&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defc&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;label&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;text class&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:div.lbl&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:class&lt;/span&gt; class&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt; text&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;rum&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;mount &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;label &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #fff59d;&quot;&gt;js&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;document.body&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
包含 state 的複雜點的範例則是:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mixin&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:will-mount&lt;/span&gt;
   &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;state&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
     &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;assoc state &lt;span style=&quot;color: #ccaaff;&quot;&gt;:key&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;atom &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;rum&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defc&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;label&lt;/span&gt; &amp;lt; mixin &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;text class&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:div.label&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:class&lt;/span&gt; class&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt; text&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 rum 也支援 serveri-side 渲染 (&lt;a href=&quot;https://anmonteiro.com/2016/09/om-next-server-side-rendering/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Om.Next 也支援囉~&lt;/a&gt;)，運作的流程是這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/rum1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
那用 rum 有什麼好處呢？講者提出了以下幾點:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Complex single-page apps with fine control&lt;/li&gt;
&lt;li&gt;Custom/mixed state models&lt;/li&gt;
&lt;li&gt;Server-side rendering and templating&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
而用 rum 的壞處則是:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Doesn&#39;t teach you how to write apps&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org90257ea&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org90257ea&quot;&gt;The Story of Sir Owl Lisp&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org90257ea&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/utOVF0U7Zd8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Owl_Lisp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Owl Lisp&lt;/a&gt; 是一個純函數式的 Scheme 實現，講者為 &lt;a href=&quot;https://github.com/aoh/owl-lisp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;owl-lisp&lt;/a&gt; 作者，此一專案作為寵物專案 (pet project, 閒暇時做的好玩專案或是殺時間用) 從 2011 年開始自今。
&lt;/p&gt;

&lt;p&gt;
這場演講前面基本上在講古，包含了一些圖靈機、lambda 演算法以及 LISP 語言的故事，後面開始介紹  &lt;a href=&quot;https://github.com/aoh/owl-lisp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;owl-lisp&lt;/a&gt; ，這是一個依照 R7RS 標準的 Scheme 語言。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;aoh/owl-lisp&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd75da3f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd75da3f&quot;&gt;Doing data science with Clojure: the good, the bad, the ugly&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd75da3f&quot;&gt;
&lt;br&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xtmggfGD3RQ?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;br&gt;

&lt;p&gt;
投影片連結: &lt;a href=&quot;https://www.slideshare.net/mobile/simonbelak/doing-data-science-with-clojure-65886938&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;線上看&lt;/a&gt;
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;
Easy things should be easy and hard things should be possible.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; L. Wall
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
老實說我聽不太懂講者在講什麼&amp;#x2026;.. Orz&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
不過講者提到一個他寫的函式庫:
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;sbelak/huri&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;


&lt;p&gt;
然後&amp;#x2026;我還是聽不懂，所以只好把他 quote 的名言秀一下了 orz&amp;#x2026;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
This is possibly Clojure&#39;s most important property: the syntax expresses the code&#39;s semantic layers. An experienced reader of Clojure can skip over most of the code and have a lossless understanding of its highlevel intent.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; Z.Tellman, Elements of Clojure
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
接下來講者稍微提到了 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 這個預計要在 Clojure 1.9 加入的函式庫，可以減少查找問題的時間，以及 &lt;a href=&quot;http://gorilla-repl.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gorilla-repl&lt;/a&gt; 這種類似 ipython notebook 的工具。
&lt;/p&gt;


&lt;p&gt;
在後面，講者終於講到前面他說的函式庫 &lt;a href=&quot;https://github.com/sbelak/huri&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;huri&lt;/a&gt;， 你可以透過他在  &lt;a href=&quot;http://gorilla-repl.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gorilla-repl&lt;/a&gt; 上畫圖。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org7db3b52&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7db3b52&quot;&gt;Interactive Clojure code snippets in any web page with KLIPSE&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org7db3b52&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/33mTFjPIN10?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
投影片連結: &lt;a href=&quot;http://slides.klipse.tech/klipse-clojutre-2016/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;線上看&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://app.klipse.tech&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;klipse&lt;/a&gt; 是一個完全運作在瀏覽器上的 cljs REPL，可以動態的驗證 ClojureScript 的運作，該作者同時也寫了不少關於 ClojureScript 運作的文章。
&lt;/p&gt;

&lt;p&gt;
本次演講除了說到 ClojoureScript 的部份，也提到 klipse 可以執行 ruby, python 程式碼，我猜他大概有實現一個簡單的解釋器才對，還沒去看這部份的程式碼。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;viebel/klipse&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3cc726f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3cc726f&quot;&gt;Distributed transducers&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3cc726f&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/_9jdb5TOShk?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
投影片連結: &lt;a href=&quot;https://github.com/mhjort/distributed-transducers-poc/releases/download/v1.0/Distributed.Transducers.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;點我下載&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
本篇講述講者實作分佈式版的 fold 函式，並透過 AWS lambda 來加速運作。
&lt;/p&gt;

&lt;p&gt;
講者提供了一個查找類似詞的函式來描述整個要解決問題的狀況:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-1&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; words
       &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
       &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
       &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;reduce group-by-distance &lt;span style=&quot;color: #aaeecc;&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;similar-words-1 &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;word&quot;&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sword&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;lord&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;card&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; 2&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {1 #{&quot;sword&quot; &quot;lord&quot;}, 2 #{&quot;card&quot;}}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
當然我們可以把這樣的程式改用 transducer 改寫，來提昇程式的效能
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-2&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;transduce &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
                &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
             group-by-distance
             words&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
但是這樣的程式無法並行運算，因此我們再用 fold 來改寫
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-3&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          group-by-distance
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;folder words
                    &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
不過有一個問題，fold 會同時執行兩個函式，一個用來執行 reduce，稱為 &lt;code&gt;reducing function&lt;/code&gt; ，另外一個則是用來合併結果，稱為 &lt;code&gt;combining function&lt;/code&gt; ，而 &lt;code&gt;reducing function&lt;/code&gt; 會並行的執行。(&lt;a href=&quot;https://adambard.com/blog/clojure-reducers-for-mortals/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;參考資料&lt;/a&gt;)
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
fold uses two functions: a &quot;reducing&quot; function, which it calls as a regular reduce across segments of the input collection, and a &quot;combining&quot; function, which combines the results of these reductions.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
因此我們可以再把這個程式改寫
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-4&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; group-by-distance&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          words&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣改寫後，效果好多了，但是還有最後一個問題: 並行化的 fold 只能運作在 non-lazy sequence 上，於是再加一些手腳。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-5&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; group-by-distance&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vec words&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
跑出來的結果如下，在講者的 HP zBook 筆電 (i7 雙核)上執行的結果是這樣的
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;一般版本:  ~175 s&lt;/li&gt;
&lt;li&gt;Transducer: ~170 s&lt;/li&gt;
&lt;li&gt;Parallel fold: ~108 s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
做完這些測試後，講者想到了，是否分佈式的 fold 可以提供更好的效能?
&lt;/p&gt;

&lt;p&gt;
講者選用了 AWS Lambda 以及 Amazon SQS 來進行這個測試，整體的架構是這個樣子的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/ar1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
接下來你要在你的 project.clj 加入以下這些設定
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:plugins&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;lein-clj-lambda &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;0.5.1&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;span style=&quot;color: #ccaaff;&quot;&gt;:lambda&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;demo&quot;&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:handler&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;distributed-transducers-poc.LambdaFn&quot;&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:memory-size&lt;/span&gt; 1536
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:timeout&lt;/span&gt; 300
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:function-name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;distributed-transducers-poc&quot;&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:region&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;eu-west-1&quot;&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:policy-statements&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:Effect&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Allow&quot;&lt;/span&gt;
                                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:Action&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sqs:*&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;
                                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:Resource&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;arn:aws:sqs:eu-west-1:*&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:s3&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:bucket&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;mhjort-distributed-transducers-poc&quot;&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:object-key&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;lambda.jar&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
然後使用下面命令進行 deploy
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
lein lambda install demo

&lt;/pre&gt;

&lt;p&gt;
講者給出了範例，示範用 fold 以及 dfold 執行程式的狀況
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;distributed-transducers-poc.demo&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:require&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;distributed-transducers-ppc.rc&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;dfold&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
            &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core.reducers&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; r&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;map inc&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; +&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 100000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;dfold + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;map inc&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; +&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 100000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; 2&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;; &amp;lt;= 2 is how many instance you run&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
那&amp;#x2026; 哪些資料會被送到 SQS 呢?
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;要被執行的東西 (Chunk of items to be processed)&lt;/li&gt;

&lt;li&gt;Reduct function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
而在最後，使用分佈式 fold 的程式會變成這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-6&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;dfold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
               &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; group-by-distance&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vec words&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
           10&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而最後整體測試結果則是:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;筆電 (一般): ~175 s&lt;/li&gt;
&lt;li&gt;筆電 (transducer): ~170 s&lt;/li&gt;
&lt;li&gt;筆電 (parallel fold): ~108 s&lt;/li&gt;
&lt;li&gt;AWS Lambda (10 nodes, cost 0.01 $): ~40 s&lt;/li&gt;
&lt;li&gt;AWS Lambda (20 nodes, cost 0.02 $): ~28 s&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org482fbc8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org482fbc8&quot;&gt;Introduction to clojure.spec - Arne Brasseur&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org482fbc8&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-MeOPF94LhI?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;
講者為 &lt;a href=&quot;https://lambdaisland.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LambdaIsland&lt;/a&gt; 的維護者，該網站提供了一系列的 Clojure/ClojureScript 教學，若有興趣的話可以付費訂閱。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;
&lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 是 Clojure 預計在 1.9 版加入的新功能，對於 Clojure 這種動態型別語言而言，雖然容易開發，但是一旦你傳送給函式的型別不對，就很可能造成除錯不易。
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 出現之前，比較有名的型別檢查是 &lt;a href=&quot;https://github.com/clojure/core.typed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;core.typed&lt;/a&gt; 以及 &lt;a href=&quot;https://github.com/plumatic/schema&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;schema&lt;/a&gt; ，而 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 將會成為 buildin 在 Clojure 的一部分函式。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 的加入並不會導致程式執行變慢，用到他的時間只有在開發時使用 REPL 以及編譯的時候，所以到底要怎樣用呢？
&lt;/p&gt;

&lt;p&gt;
如果你是 leinigen 的用戶，更改你的 &lt;code&gt;project.clj&lt;/code&gt; 成如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defperoject&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;myproject&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;0.1.0-SNAPAHOT&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:dependencies&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;org.clojure&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;clojure &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1.9.0-alpha13&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
boot 的用戶則是在你的 &lt;code&gt;build.boot&lt;/code&gt; 加入
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;set-env!
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:dependencies&lt;/span&gt; &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;org.clojure&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;clojure &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1.9.0-alpha13&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
於是讓我們開始使用 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 吧! 講者假設現在有一個機器人主廚 (Robot Chef) 正在弄一份菜單 (recipes)，而這份菜單內容是這樣的:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;tomato-sauce-recipe&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;250 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;peeled tomatoes&quot;&lt;/span&gt;
                          3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:clove&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;garlic&quot;&lt;/span&gt;
                          5 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;pepper&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
   &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;steps&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;heat a pan&quot;&lt;/span&gt;
                    &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;throw everything in&quot;&lt;/span&gt;
                    &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;stir&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
像這種透過 / (slash) 組成的 keyword (關鍵字)，我們稱呼為 namespace keyword
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;grettings&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;kittos&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:grettings/kittos&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
為何要用 namespace keyword 呢？一個原因是可以避免到名稱衝突，所以我們可以把所有的 keyword 合併在同一個 map 中
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;http&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;method&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:get&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;method&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:stir&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
實際上在 Clojure 中，變數也是包含在 namespace 中的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;robochef.core&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;ingredents&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef.core/ingredients&lt;/span&gt;

&lt;span style=&quot;color: #ccaaff;&quot;&gt;::ingredients&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef.core/ingredients&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
也因此，在一個 map 中使用 namespace 作為 prefix 是很常見的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;recipe-name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;...&quot;&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;steps&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;cooking-time&lt;/span&gt; 30&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而在 Clojure 1.9 中，將會有新的語法可以把上面的東西變成這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;recipe&lt;/span&gt; #&lt;span style=&quot;color: #ccaaff;&quot;&gt;:robochef&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:recipes-name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;&quot;&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ingredients&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:steps&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:cooking-time&lt;/span&gt; 30&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;keys&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;steps serves&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt; recipe&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;doseq&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;s steps&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    ,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
在了解這些前置訊息後，我們終於可以來到 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 了，首先我們把 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 的命名空間(namespace) 指定為 &lt;code&gt;s&lt;/code&gt; ，接下來我們加入以下這些 spec，這會將這些 spec 加入到全域去 (global registry)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;robochef.core&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:require&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.spec&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; s&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;keep in mind &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;::recipe&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; == &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef.core/recipe&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;::recipe&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;keys &lt;span style=&quot;color: #ccaaff;&quot;&gt;:req&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;::ingredients&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:opt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;::steps&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;::ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;* &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;cat &lt;span style=&quot;color: #ccaaff;&quot;&gt;:amount&lt;/span&gt; number?
                                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:unit&lt;/span&gt; keyword?
                                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; string?&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;::steps&lt;/span&gt; ,,,&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，我們就可以這樣去驗證，符合 spec 的狀況是這樣的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;valid? &lt;span style=&quot;color: #ccaaff;&quot;&gt;::robochef/ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;5 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;conform &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;5 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;[{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:amount&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 5, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:unit&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:g&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;tea&quot;}]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
那錯誤的情況呢? 我們可以透過 &lt;code&gt;clojure.spec/explain&lt;/code&gt; 來幫我們找出狀況
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;valid? &lt;span style=&quot;color: #ccaaff;&quot;&gt;::robochef/ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;conform &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:clojure.spec/invalid&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;explain &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;In: [0] val: &quot;10&quot; fails spec:&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef/ingredients&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; at: [&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:amount&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;] predicate: number?&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我們也可以用 generator 去產生符合數量並可以通過測試的結果
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;exercise &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; 2&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;([() []]&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;  &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;[(0 &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:Hi&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;0&quot;) [{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:amount&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 0, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:unit&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:Hi&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;0&quot;}]])&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
更多的內容我還在消化中，就請看影片吧 ~
&lt;/p&gt;

&lt;p&gt;
後面演講則稍微提到一下 &lt;a href=&quot;https://github.com/clojure/test.check&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;test.check&lt;/a&gt; 這個測試用的函式庫。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;clojure/test.check&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb0a783b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb0a783b&quot;&gt;Clojure of Things&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb0a783b&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FUV_5Hwi5FU?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
講者提及自己的經驗，如何用 Clojure 在目前火紅的 IoT (Internet of things) 上，並使用了 &lt;a href=&quot;http://pibrella.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pibrella&lt;/a&gt; 這個 Raspberry Pi 的擴充板進行展示，透過 Clojure REPL 動態的控制 pibrella 的 I/O。
&lt;/p&gt;

&lt;p&gt;
作者使用的函式庫目前我沒在網路上找到，但是我猜他是用 &lt;a href=&quot;https://github.com/Pi4J/pi4j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pi4j&lt;/a&gt; 來作為 Clojure 控制 Raspberry pi 的函式庫。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;Pi4J/pi4j&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org13b2663&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org13b2663&quot;&gt;The Next Five Years of ClojureScript&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org13b2663&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mty0RwkPmE8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
這場是目前 ClojureScript 主要維護者 David Nolen 環顧了過去幾年 ClojureScript 開始開發的狀況，以及未來的情況。
&lt;/p&gt;

&lt;p&gt;
在這場演講後半段也提及到如何參與 ClojureScript 推廣/開發等議題，也有人提問 David Nolen 對於 WebAssembly 的看法等等。
&lt;/p&gt;

&lt;p&gt;
這場演講我覺的蠻不錯的，很喜歡這種有講故事風格的演講。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
趁著假日來趕一下進度，於是把我看過的 &lt;a href=&quot;http://clojutre.org/2016/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ClojuTRE 2016&lt;/a&gt; 心得/筆記紀錄在這邊。
&lt;/p&gt;

&lt;p&gt;
嗯&amp;#x2026;&amp;#x2026;其實 ClojuTRE 2016 每一場演講我都看完了&amp;#x2026;..
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
當然，我並不是每一場都聽的懂，於是這筆記只能僅供參考，請勿盡信 orz&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
有些演講真的很難畫重點，還是挑自己有興趣的看吧!!
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgc427d83&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc427d83&quot;&gt;Using Clojure to provide computerized psychotherapy&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc427d83&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Ze3Acb42f3o?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
講者投影片: &lt;a href=&quot;http://clojutre.org/2016/slides/Using-Clojure-to-provide-computerized-psychotherapy.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下載連結&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
這場演講在講 Clojure 用於心理治療 (psychotherapy) 上，一開始講者提出了問題:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
對於這些問題，我們可以有一些解法:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
而更多的問題，則是沒有足夠的人手在心裡治療上，因此講者提到了可以透過電腦來協助，點子來自於 treatment manuals
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而 網路認知行為治療 (iCBT, internet-based Cognitive behavior therapy) 則大部分提供了如上面的那樣的自我治療(sel-help)資訊，這種方式減少了一些問題，比如治療師(therapist)和病患之間的距離
&lt;/p&gt;

&lt;p&gt;
然後後面講者繼續講了一些問題，解法一是用 Clojure 寫了些網頁程式&amp;#x2026;.(嗯，看影片吧) ，而這網頁程式透過 &lt;a href=&quot;http://www.luminusweb.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Luminus framework&lt;/a&gt; 製作，值得一提的是講者第一個學的程式語言就是 Clojure。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/a4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org04ce717&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org04ce717&quot;&gt;The Universe As A Value&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org04ce717&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/odPAkEO2uPQ?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
投影片: &lt;a href=&quot;https://juxt.pro/talks/clojutre-2016.html#/sec-title-slide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下載連結&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
這場演講第一次聽的時候我傻眼了，於是就再聽了第二次。
&lt;/p&gt;

&lt;p&gt;
講者一開始先稍微講了些關於宇宙 (Universe) 的事情，然後導向愛因斯坦的相對論，我們可以假設有一個觀察者如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;observer&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;atom &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:universe&lt;/span&gt; u &lt;span style=&quot;color: #ccaaff;&quot;&gt;:time&lt;/span&gt; t&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而愛因斯坦說過，時間和觀察者是相對的 (time is relative to observer)，兩個不同的觀察者會看到不同的宇宙 (Universe)，也就是說，有許多不同的宇宙(Universe)存在。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們可以定義 &lt;code&gt;𝕌&lt;/code&gt; 這個符號為所有可能可以觀察到的宇宙空間(𝕌 is the set of all possible observable universes)，因此，我們就可以定義 Clojure 程式用來選擇下一個 Universe。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;next-u&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;Given an observed universe u, return a possible &#39;next&#39; universe.&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;u t&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;rand-nth &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;filter #&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;consistent? &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt; u t&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; &amp;#120140;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而下一個程式碼，則是讓一個觀察者 (observer) 切換到另外一組 Universe 去
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;switch-universe!&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;Put the given observer in another universe&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;observer&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;swap!
   &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:keys&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;universe time&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
     &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:universe&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;next-u universe time&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
      &lt;span style=&quot;color: #ccaaff;&quot;&gt;:time&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;inc time&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
   observer&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而我們可以這樣執行我們的觀察者:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;run-observer&lt;/span&gt;
  &lt;span style=&quot;color: #97abc6; font-style: italic;&quot;&gt;&quot;Run the observer, giving them the impression of passing time&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;observer&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;dorun&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;iterate switch-universe! observer&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來接到了 &lt;a href=&quot;http://toutestquantique.fr/en/pump-probe/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pump-probe technique&lt;/a&gt; ，嗯&amp;#x2026;我不知道他在講啥 (摀臉)&amp;#x2026;.所以只好秀一下他接下來的投影片:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
接下來話鋒一轉，突然變成說&amp;#x2026;在 ClojureScript 中，無論是 Om 或是 Reagent, 我們都有一個地方定義 app state (universe)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;The app &#39;universe&#39;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;app-state&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;atom
   &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:drawer&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:items&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;ear-plugs&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;
    shopping
    &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:items&lt;/span&gt;
     &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Coffee&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:quantity&lt;/span&gt; 2&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Milk&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:quantity&lt;/span&gt; 2&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Bird seed&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:quantity&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:lots&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著我們就可以用 &lt;a href=&quot;https://clojuredocs.org/clojure.core/deref&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;deref&lt;/a&gt; 去查看我們的 Universe (app state)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;deref app-state&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;or&lt;/span&gt;

@app-state
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而在這種狀況下，我們滿足了以下兩種規範:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Consistency
&lt;/p&gt;

&lt;p&gt;
In the render phase, the value we render is constant
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Concurrency
&lt;/p&gt;

&lt;p&gt;
We can take our time, nobody is waiting for us!
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
這種 app-state 的形式和物件導向 (Object Orientation) 是不同的，我們知道物件導向是這樣的:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Object Orientation: Lots of changing state, scatered around.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
講者舉 &lt;a href=&quot;https://juxt.pro/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://juxt.pro/&lt;/a&gt; 為例，這個網站有很多 state 要去處理，因此我們可以做一個 record 去弄這些 state
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defrecord&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;AppState&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;data-sources&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.IDeref&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;deref &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;this&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;skup&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;refresh! this&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
    &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Return the &#39;universe as a value&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Skippy McSkipface: https://github.com/juxt/skip&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來我們就可以對這些 state 進行 derefernece 的動作
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
那要怎樣提昇 referesh 的效能呢?我們可以透過這些支援 time-travel 的工具來進行:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而在開發環境，則可以透過 background watchers 來對資料進行更新的動作
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
而這樣做，講者提出了一個結果:
&lt;/p&gt;



&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/p6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
嗯&amp;#x2026;我必須承認我聽了兩次還是聽不太懂 = =
&lt;/p&gt;

&lt;p&gt;
最後講者對比了一下 C 和 Lisp:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
It seems to me that there have been two really clean, consistent models of programming so far:
the C model and the Lisp model.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; Paul Graham
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;
&quot;You&#39;re not constructing it like making a tone of source code and compiling it periodically, you&#39;re constructing it the way you construct a city: build some of it, it&#39;s running all the time, so it&#39;s kind of like a live programming language.&quot;
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; Dick Gabriel On Lisp, Software Engineering Radio Episode 84
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org4cdace2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4cdace2&quot;&gt;Native mobile apps with ClojureScript&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4cdace2&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6IYm34nDL64?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
終於有看到一場在講 react-native 作用於 ClojureScript 上的演講！！ 這之前我有稍微玩過，但沒認真寫這樣的程式。
&lt;/p&gt;

&lt;p&gt;
關於 ClojureScript 作用在 react-native 上的資料，可以到 &lt;a href=&quot;http://cljsrn.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://cljsrn.org/&lt;/a&gt; 去找，或是 &lt;a href=&quot;http://clojurians.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clojurians&lt;/a&gt; 的 Slack &lt;code&gt;#cljsrn&lt;/code&gt; 頻道。
&lt;/p&gt;


&lt;p&gt;
這場演講先從 react-native 開始介紹，說明它和 Cordova/HTML5 的不同:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/cljsrn1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來則是以開發者的觀點來看 react-native，一個基本的 react-native 程式長這樣:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-js-jsx&quot;&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;import&lt;/span&gt; React, &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt; Component &lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; from &lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;react&#39;&lt;/span&gt;;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt; Text, View &lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; from &lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;react-native&#39;&lt;/span&gt;;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;class&lt;/span&gt; WhyReactNativeIsSoGreat &lt;span style=&quot;color: #aaffaa;&quot;&gt;extends&lt;/span&gt; Component &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    render&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;
            &amp;lt;View&amp;gt;
              &amp;lt;Text&amp;gt;
                If you like React on the web, yoou&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;ll like React Native.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;              &amp;lt;/Text&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;              &amp;lt;Text&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;                You just use native components like &#39;&lt;/span&gt;View&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39; and &#39;&lt;/span&gt;Text&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;,&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;                instead of web components like &#39;&lt;/span&gt;div&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39; and &#39;&lt;/span&gt;span&lt;span style=&quot;color: #aadddd;&quot;&gt;&#39;.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;              &amp;lt;/Text&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;            &amp;lt;/View&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;        );&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;    }&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 ClojureScript 的相對應改寫則是:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;rn-example.core&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:require&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;reagent.core&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; r&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;react-native&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;js&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;require
   &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;react-native/Libraries/react-native/react-native.js&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;view&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;adapt-react-class &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;.-View react-native&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;text&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;adapt-react-class &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;.-Text react-native&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;why-react-native-is-so-great&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;view
   &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;text &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;If you like React on the web, you&#39;ll like React Nateive&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
   &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;text &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;You just use native components like &#39;View&#39; and &#39;Text&#39;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;instead of web components like &#39;div&#39; and &#39;span&#39;.&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
由上面範例可以看到，除了一開始載入一些 javascript 函式庫需要比較骯髒的手段外，剩下的就很純粹是 Clojure 的資料結構的處理。
&lt;/p&gt;

&lt;p&gt;
而在 ClojureScript 上面，目前有兩個 build tools 針對 ClojureScript 在 react-native 上的:
&lt;/p&gt;

&lt;div class=&quot;row &quot;&gt;&lt;div class=&quot;col-md-6 &quot;&gt;
&lt;div class=&quot;github-card&quot; data-github=&quot;mjmeintjes/boot-react-native&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt;
&lt;div class=&quot;github-card&quot; data-github=&quot;drapanjanas/re-natal&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;
講者是這樣評論這兩套工具的:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
boot-react-native
&lt;/p&gt;

&lt;p&gt;
Uses boot, works closer to the RN packager but is slower and inferior out of the box experience (persornal experience)
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
re-natal
&lt;/p&gt;

&lt;p&gt;
Uses leinigen, runtime errors are not traceable, templates for re-frame, om.next and rum
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
而最常用的前端框架則是基於 reagent 的 &lt;a href=&quot;https://github.com/Day8/re-frame&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;re-frame&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
測試方面，則是需要透過 &lt;code&gt;react-native-mock&lt;/code&gt; 去對 ract-native 組件進行測試，圖片和函式庫則是透過 &lt;code&gt;mockery&lt;/code&gt; 來進行測試。
&lt;/p&gt;

&lt;p&gt;
至於效能的比較，就直接看投影片吧：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/cljsrn2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd0f1622&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd0f1622&quot;&gt;Isomorphic web apps with Rum&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd0f1622&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/2fLx4fu9VV8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
本場次為 &lt;a href=&quot;https://github.com/tonsky/rum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rum&lt;/a&gt; 這個 ClojureScript 對於 React.js 的封裝的作者的演講，講者 &lt;a href=&quot;https://github.com/tonsky&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tonsky&lt;/a&gt; 同時也是許多知名 Clojure/Script 函式庫專案的維護者。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;tonsky/rum&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/tonsky&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tonsky&lt;/a&gt; 一開始介紹幾種不同在 ClojureScript 上對於 React.js 的封裝函式庫，然後介紹自己設計  &lt;a href=&quot;https://github.com/tonsky/rum&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rum&lt;/a&gt;  的幾個動機，其中一個是更好的與 &lt;a href=&quot;https://github.com/tonsky/datascript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;datascript&lt;/a&gt; 或是其他資料儲存函式庫相容。
&lt;/p&gt;

&lt;p&gt;
所以基本的 rum 程式長怎樣呢?
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;rum&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defc&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;label&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;text class&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:div.lbl&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:class&lt;/span&gt; class&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt; text&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;rum&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;mount &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;label &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #fff59d;&quot;&gt;js&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;document.body&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
包含 state 的複雜點的範例則是:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;mixin&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:will-mount&lt;/span&gt;
   &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;state&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
     &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;assoc state &lt;span style=&quot;color: #ccaaff;&quot;&gt;:key&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;atom &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;rum&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defc&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;label&lt;/span&gt; &amp;lt; mixin &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;text class&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:div.label&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:class&lt;/span&gt; class&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt; text&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 rum 也支援 serveri-side 渲染 (&lt;a href=&quot;https://anmonteiro.com/2016/09/om-next-server-side-rendering/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Om.Next 也支援囉~&lt;/a&gt;)，運作的流程是這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/rum1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
那用 rum 有什麼好處呢？講者提出了以下幾點:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Complex single-page apps with fine control&lt;/li&gt;
&lt;li&gt;Custom/mixed state models&lt;/li&gt;
&lt;li&gt;Server-side rendering and templating&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
而用 rum 的壞處則是:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Doesn&#39;t teach you how to write apps&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org90257ea&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org90257ea&quot;&gt;The Story of Sir Owl Lisp&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org90257ea&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/utOVF0U7Zd8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;

&lt;p&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Owl_Lisp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Owl Lisp&lt;/a&gt; 是一個純函數式的 Scheme 實現，講者為 &lt;a href=&quot;https://github.com/aoh/owl-lisp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;owl-lisp&lt;/a&gt; 作者，此一專案作為寵物專案 (pet project, 閒暇時做的好玩專案或是殺時間用) 從 2011 年開始自今。
&lt;/p&gt;

&lt;p&gt;
這場演講前面基本上在講古，包含了一些圖靈機、lambda 演算法以及 LISP 語言的故事，後面開始介紹  &lt;a href=&quot;https://github.com/aoh/owl-lisp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;owl-lisp&lt;/a&gt; ，這是一個依照 R7RS 標準的 Scheme 語言。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;aoh/owl-lisp&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd75da3f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd75da3f&quot;&gt;Doing data science with Clojure: the good, the bad, the ugly&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd75da3f&quot;&gt;
&lt;br&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xtmggfGD3RQ?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;br&gt;

&lt;p&gt;
投影片連結: &lt;a href=&quot;https://www.slideshare.net/mobile/simonbelak/doing-data-science-with-clojure-65886938&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;線上看&lt;/a&gt;
&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;
Easy things should be easy and hard things should be possible.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; L. Wall
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
老實說我聽不太懂講者在講什麼&amp;#x2026;.. Orz&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
不過講者提到一個他寫的函式庫:
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;sbelak/huri&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;


&lt;p&gt;
然後&amp;#x2026;我還是聽不懂，所以只好把他 quote 的名言秀一下了 orz&amp;#x2026;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
This is possibly Clojure&#39;s most important property: the syntax expresses the code&#39;s semantic layers. An experienced reader of Clojure can skip over most of the code and have a lossless understanding of its highlevel intent.
&lt;/p&gt;

&lt;p&gt;
&amp;#x2013; Z.Tellman, Elements of Clojure
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;
接下來講者稍微提到了 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 這個預計要在 Clojure 1.9 加入的函式庫，可以減少查找問題的時間，以及 &lt;a href=&quot;http://gorilla-repl.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gorilla-repl&lt;/a&gt; 這種類似 ipython notebook 的工具。
&lt;/p&gt;


&lt;p&gt;
在後面，講者終於講到前面他說的函式庫 &lt;a href=&quot;https://github.com/sbelak/huri&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;huri&lt;/a&gt;， 你可以透過他在  &lt;a href=&quot;http://gorilla-repl.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gorilla-repl&lt;/a&gt; 上畫圖。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org7db3b52&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7db3b52&quot;&gt;Interactive Clojure code snippets in any web page with KLIPSE&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org7db3b52&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/33mTFjPIN10?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
投影片連結: &lt;a href=&quot;http://slides.klipse.tech/klipse-clojutre-2016/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;線上看&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://app.klipse.tech&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;klipse&lt;/a&gt; 是一個完全運作在瀏覽器上的 cljs REPL，可以動態的驗證 ClojureScript 的運作，該作者同時也寫了不少關於 ClojureScript 運作的文章。
&lt;/p&gt;

&lt;p&gt;
本次演講除了說到 ClojoureScript 的部份，也提到 klipse 可以執行 ruby, python 程式碼，我猜他大概有實現一個簡單的解釋器才對，還沒去看這部份的程式碼。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;viebel/klipse&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3cc726f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3cc726f&quot;&gt;Distributed transducers&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3cc726f&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/_9jdb5TOShk?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
投影片連結: &lt;a href=&quot;https://github.com/mhjort/distributed-transducers-poc/releases/download/v1.0/Distributed.Transducers.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;點我下載&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
本篇講述講者實作分佈式版的 fold 函式，並透過 AWS lambda 來加速運作。
&lt;/p&gt;

&lt;p&gt;
講者提供了一個查找類似詞的函式來描述整個要解決問題的狀況:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-1&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; words
       &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
       &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
       &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;reduce group-by-distance &lt;span style=&quot;color: #aaeecc;&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;similar-words-1 &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;word&quot;&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sword&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;lord&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;card&quot;&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;cat&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; 2&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {1 #{&quot;sword&quot; &quot;lord&quot;}, 2 #{&quot;card&quot;}}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
當然我們可以把這樣的程式改用 transducer 改寫，來提昇程式的效能
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-2&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;transduce &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
                &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
             group-by-distance
             words&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
但是這樣的程式無法並行運算，因此我們再用 fold 來改寫
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-3&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          group-by-distance
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;folder words
                    &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
不過有一個問題，fold 會同時執行兩個函式，一個用來執行 reduce，稱為 &lt;code&gt;reducing function&lt;/code&gt; ，另外一個則是用來合併結果，稱為 &lt;code&gt;combining function&lt;/code&gt; ，而 &lt;code&gt;reducing function&lt;/code&gt; 會並行的執行。(&lt;a href=&quot;https://adambard.com/blog/clojure-reducers-for-mortals/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;參考資料&lt;/a&gt;)
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
fold uses two functions: a &quot;reducing&quot; function, which it calls as a regular reduce across segments of the input collection, and a &quot;combining&quot; function, which combines the results of these reductions.
&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;
因此我們可以再把這個程式改寫
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-4&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; group-by-distance&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          words&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣改寫後，效果好多了，但是還有最後一個問題: 並行化的 fold 只能運作在 non-lazy sequence 上，於是再加一些手腳。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-5&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
              &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; group-by-distance&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
          &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vec words&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
跑出來的結果如下，在講者的 HP zBook 筆電 (i7 雙核)上執行的結果是這樣的
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;一般版本:  ~175 s&lt;/li&gt;
&lt;li&gt;Transducer: ~170 s&lt;/li&gt;
&lt;li&gt;Parallel fold: ~108 s&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
做完這些測試後，講者想到了，是否分佈式的 fold 可以提供更好的效能?
&lt;/p&gt;

&lt;p&gt;
講者選用了 AWS Lambda 以及 Amazon SQS 來進行這個測試，整體的架構是這個樣子的:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/fec9a5ee/ar1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
接下來你要在你的 project.clj 加入以下這些設定
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:plugins&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;lein-clj-lambda &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;0.5.1&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;span style=&quot;color: #ccaaff;&quot;&gt;:lambda&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;demo&quot;&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:handler&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;distributed-transducers-poc.LambdaFn&quot;&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:memory-size&lt;/span&gt; 1536
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:timeout&lt;/span&gt; 300
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:function-name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;distributed-transducers-poc&quot;&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:region&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;eu-west-1&quot;&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:policy-statements&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:Effect&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Allow&quot;&lt;/span&gt;
                                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:Action&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sqs:*&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;
                                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:Resource&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;arn:aws:sqs:eu-west-1:*&quot;&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
                  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:s3&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:bucket&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;mhjort-distributed-transducers-poc&quot;&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:object-key&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;lambda.jar&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
然後使用下面命令進行 deploy
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
lein lambda install demo

&lt;/pre&gt;

&lt;p&gt;
講者給出了範例，示範用 fold 以及 dfold 執行程式的狀況
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;distributed-transducers-poc.demo&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:require&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;distributed-transducers-ppc.rc&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;dfold&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
            &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core.reducers&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; r&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fold + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;map inc&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; +&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 100000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;dfold + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;map inc&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; +&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 100000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; 2&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;; &amp;lt;= 2 is how many instance you run&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
那&amp;#x2026; 哪些資料會被送到 SQS 呢?
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;要被執行的東西 (Chunk of items to be processed)&lt;/li&gt;

&lt;li&gt;Reduct function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
而在最後，使用分佈式 fold 的程式會變成這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;similar-words-6&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;word words min-distance&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;dfold &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;partial merge-with concat&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;comp &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;map &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;partial levensthein-distance word&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
               &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;filter &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #795548;&quot;&gt;[&lt;/span&gt;d _&lt;span style=&quot;color: #795548;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&amp;lt;= d min-distance&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; group-by-distance&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
           &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vec words&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
           10&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而最後整體測試結果則是:
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;筆電 (一般): ~175 s&lt;/li&gt;
&lt;li&gt;筆電 (transducer): ~170 s&lt;/li&gt;
&lt;li&gt;筆電 (parallel fold): ~108 s&lt;/li&gt;
&lt;li&gt;AWS Lambda (10 nodes, cost 0.01 $): ~40 s&lt;/li&gt;
&lt;li&gt;AWS Lambda (20 nodes, cost 0.02 $): ~28 s&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org482fbc8&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org482fbc8&quot;&gt;Introduction to clojure.spec - Arne Brasseur&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org482fbc8&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-MeOPF94LhI?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;
講者為 &lt;a href=&quot;https://lambdaisland.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LambdaIsland&lt;/a&gt; 的維護者，該網站提供了一系列的 Clojure/ClojureScript 教學，若有興趣的話可以付費訂閱。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;p&gt;
&lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 是 Clojure 預計在 1.9 版加入的新功能，對於 Clojure 這種動態型別語言而言，雖然容易開發，但是一旦你傳送給函式的型別不對，就很可能造成除錯不易。
&lt;/p&gt;

&lt;p&gt;
在 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 出現之前，比較有名的型別檢查是 &lt;a href=&quot;https://github.com/clojure/core.typed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;core.typed&lt;/a&gt; 以及 &lt;a href=&quot;https://github.com/plumatic/schema&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;schema&lt;/a&gt; ，而 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 將會成為 buildin 在 Clojure 的一部分函式。
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 的加入並不會導致程式執行變慢，用到他的時間只有在開發時使用 REPL 以及編譯的時候，所以到底要怎樣用呢？
&lt;/p&gt;

&lt;p&gt;
如果你是 leinigen 的用戶，更改你的 &lt;code&gt;project.clj&lt;/code&gt; 成如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defperoject&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;myproject&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;0.1.0-SNAPAHOT&quot;&lt;/span&gt;
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:dependencies&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;org.clojure&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;clojure &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1.9.0-alpha13&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
boot 的用戶則是在你的 &lt;code&gt;build.boot&lt;/code&gt; 加入
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;set-env!
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:dependencies&lt;/span&gt; &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;org.clojure&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;clojure &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1.9.0-alpha13&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
於是讓我們開始使用 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 吧! 講者假設現在有一個機器人主廚 (Robot Chef) 正在弄一份菜單 (recipes)，而這份菜單內容是這樣的:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;tomato-sauce-recipe&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;250 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;peeled tomatoes&quot;&lt;/span&gt;
                          3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:clove&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;garlic&quot;&lt;/span&gt;
                          5 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;pepper&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
   &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;steps&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;heat a pan&quot;&lt;/span&gt;
                    &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;throw everything in&quot;&lt;/span&gt;
                    &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;stir&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
像這種透過 / (slash) 組成的 keyword (關鍵字)，我們稱呼為 namespace keyword
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;grettings&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;kittos&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:grettings/kittos&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
為何要用 namespace keyword 呢？一個原因是可以避免到名稱衝突，所以我們可以把所有的 keyword 合併在同一個 map 中
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;http&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;method&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:get&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;method&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:stir&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
實際上在 Clojure 中，變數也是包含在 namespace 中的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;robochef.core&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;ingredents&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef.core/ingredients&lt;/span&gt;

&lt;span style=&quot;color: #ccaaff;&quot;&gt;::ingredients&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef.core/ingredients&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
也因此，在一個 map 中使用 namespace 作為 prefix 是很常見的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;recipe-name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;...&quot;&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;steps&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;cooking-time&lt;/span&gt; 30&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而在 Clojure 1.9 中，將會有新的語法可以把上面的東西變成這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;recipe&lt;/span&gt; #&lt;span style=&quot;color: #ccaaff;&quot;&gt;:robochef&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:recipes-name&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;&quot;&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ingredients&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:steps&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;,,,&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                       &lt;span style=&quot;color: #ccaaff;&quot;&gt;:cooking-time&lt;/span&gt; 30&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;keys&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;steps serves&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt; recipe&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;doseq&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;s steps&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    ,,,&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
在了解這些前置訊息後，我們終於可以來到 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 了，首先我們把 &lt;a href=&quot;http://clojure.org/about/spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.spec&lt;/a&gt; 的命名空間(namespace) 指定為 &lt;code&gt;s&lt;/code&gt; ，接下來我們加入以下這些 spec，這會將這些 spec 加入到全域去 (global registry)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;ns&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;robochef.core&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:require&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.spec&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; s&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;keep in mind &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;::recipe&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; == &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef.core/recipe&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;::recipe&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;keys &lt;span style=&quot;color: #ccaaff;&quot;&gt;:req&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;::ingredients&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
                        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:opt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;::steps&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;::ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;* &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;cat &lt;span style=&quot;color: #ccaaff;&quot;&gt;:amount&lt;/span&gt; number?
                                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:unit&lt;/span&gt; keyword?
                                 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; string?&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;::steps&lt;/span&gt; ,,,&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，我們就可以這樣去驗證，符合 spec 的狀況是這樣的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;valid? &lt;span style=&quot;color: #ccaaff;&quot;&gt;::robochef/ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;5 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;conform &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;5 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;[{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:amount&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 5, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:unit&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:g&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;tea&quot;}]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
那錯誤的情況呢? 我們可以透過 &lt;code&gt;clojure.spec/explain&lt;/code&gt; 來幫我們找出狀況
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;valid? &lt;span style=&quot;color: #ccaaff;&quot;&gt;::robochef/ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;conform &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:clojure.spec/invalid&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;explain &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;tea&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;In: [0] val: &quot;10&quot; fails spec:&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:robochef/ingredients&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; at: [&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:amount&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;] predicate: number?&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我們也可以用 generator 去產生符合數量並可以通過測試的結果
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;exercise &lt;span style=&quot;color: #ccaaff;&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;robochef&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;ingredients&lt;/span&gt; 2&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;([() []]&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;  &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;[(0 &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:Hi&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;0&quot;) [{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:amount&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 0, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:unit&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:Hi&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;0&quot;}]])&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
更多的內容我還在消化中，就請看影片吧 ~
&lt;/p&gt;

&lt;p&gt;
後面演講則稍微提到一下 &lt;a href=&quot;https://github.com/clojure/test.check&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;test.check&lt;/a&gt; 這個測試用的函式庫。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;clojure/test.check&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb0a783b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb0a783b&quot;&gt;Clojure of Things&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb0a783b&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FUV_5Hwi5FU?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
講者提及自己的經驗，如何用 Clojure 在目前火紅的 IoT (Internet of things) 上，並使用了 &lt;a href=&quot;http://pibrella.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pibrella&lt;/a&gt; 這個 Raspberry Pi 的擴充板進行展示，透過 Clojure REPL 動態的控制 pibrella 的 I/O。
&lt;/p&gt;

&lt;p&gt;
作者使用的函式庫目前我沒在網路上找到，但是我猜他是用 &lt;a href=&quot;https://github.com/Pi4J/pi4j&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pi4j&lt;/a&gt; 來作為 Clojure 控制 Raspberry pi 的函式庫。
&lt;/p&gt;

&lt;div class=&quot;github-card&quot; data-github=&quot;Pi4J/pi4j&quot; data-width=&quot;400&quot; data-height=&quot;&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org13b2663&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org13b2663&quot;&gt;The Next Five Years of ClojureScript&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org13b2663&quot;&gt;
&lt;br&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mty0RwkPmE8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br&gt;
&lt;p&gt;
這場是目前 ClojureScript 主要維護者 David Nolen 環顧了過去幾年 ClojureScript 開始開發的狀況，以及未來的情況。
&lt;/p&gt;

&lt;p&gt;
在這場演講後半段也提及到如何參與 ClojureScript 推廣/開發等議題，也有人提問 David Nolen 對於 WebAssembly 的看法等等。
&lt;/p&gt;

&lt;p&gt;
這場演講我覺的蠻不錯的，很喜歡這種有講故事風格的演講。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/fec9a5ee/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Unknown perls from the Clojure standard library 筆記</title>
      <link>https://coldnew.github.io/eea89759/</link>
      <guid>https://coldnew.github.io/eea89759/</guid>
      <pubDate>Tue, 27 Sep 2016 10:58:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
看完 &lt;a href=&quot;http://clojutre.org/2015/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ClojuTRE 2015&lt;/a&gt; 的 &lt;a href=&quot;https://www.youtube.com/watch?v=QI9Fc5TT87A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unknown pearls from the Clojure standard library - Renzo Borgatti&lt;/a&gt; 演講後，來紀錄個筆記。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/QI9Fc5TT87A&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
這場演講介紹了一些在 clojure.core 裡面的函式，這些函式平常可能不太有機會用到，但是可以協助我們除錯程式的問題。
&lt;/p&gt;

&lt;p&gt;
投影片: &lt;a href=&quot;https://github.com/reborg/clojuTRE-2015/raw/master/slides/renzo-borgatti-stdlib.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下載連結&lt;/a&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-org1c5b777&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org1c5b777&quot;&gt;destructure&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org1c5b777&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://clojure.org/guides/destructuring&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;destructure&lt;/a&gt; (解構) 在 Clojure 裡面是個非常實用的功能，可以方便我們對資料直接指派變數去代替它，如下:
&lt;/p&gt;

&lt;div class=&quot;row &quot;&gt;&lt;div class=&quot;col-md-6 &quot;&gt;

&lt;p&gt;
&lt;b&gt;No destructuring&lt;/b&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;data &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
      a &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;nth data 0&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
      b &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;nth data 1&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
      c &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;nth data 2&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;a:&quot;&lt;/span&gt; a &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;b:&quot;&lt;/span&gt; b &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;c:&quot;&lt;/span&gt; c&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; a: 1 b: 2 c: 3&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt;

&lt;p&gt;
&lt;b&gt;With destructuring&lt;/b&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;a b c&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
   &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;a:&quot;&lt;/span&gt; a &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;b:&quot;&lt;/span&gt; b &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;c:&quot;&lt;/span&gt; c&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
 &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; a: 1 b: 2 c: 3&lt;/span&gt;
 &amp;#65279;
 &amp;#65279;
 &amp;#65279;
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;
我們可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.core/destructure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;destructure&lt;/a&gt; 去觀察一個東西是如何被解構的，這邊是投影片給的範例:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;destructure &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;x y &amp;amp; others&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt; v&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [v2 v&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;     &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;x (nth v2 0 nil)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;     &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;y (nth v2 1 nil)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;     &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;others (nthnext v2 2)]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
當然投影片給的是整理後的結果，實際上我執行得到的結果是這樣的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;vec__23596
 v
 seq__23597
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;seq vec__23596&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 first__23598
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;first seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 seq__23597
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;next seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 x
 first__23598
 first__23598
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;first seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 seq__23597
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;next seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 y
 first__23598
 others
 seq__23597&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org338e561&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org338e561&quot;&gt;reductions&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org338e561&quot;&gt;
&lt;p&gt;
我們在 Clojure 中很常用 &lt;a href=&quot;http://clojuredocs.org/clojure.core/reduce&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reduce&lt;/a&gt; 去將一個函數作用到 list 上的每兩個元素上，然後返回最後的結果，最常見的簡單函數就是一個 list 的元素全部相加
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reduce + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 10&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 45&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 &lt;a href=&quot;http://clojuredocs.org/clojure.core/reduce&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reduce&lt;/a&gt; 的運作過程，則可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.core/reductions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reductions&lt;/a&gt; 來協助我們進行查看，可以看到這邊最後得到的 &lt;code&gt;45&lt;/code&gt; 就是我們想要的結果。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reductions + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 10&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  (0 1 3 6 10 15 21 28 36 45)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9c0f0e0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9c0f0e0&quot;&gt;test&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9c0f0e0&quot;&gt;
&lt;p&gt;
在 Clojure 中，我們可以在 &lt;a href=&quot;http://clojure.org/reference/metadata&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;metadata&lt;/a&gt; 中設定好對一個函數的測試方式，然後呼叫 &lt;a href=&quot;https://clojuredocs.org/clojure.core/test&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;test&lt;/a&gt; 對該函數進行測試，這項功能很適合用在小函式的一些 assertion 測試上。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;add+&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:test&lt;/span&gt; #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;do&lt;/span&gt;
            &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;assert &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;= &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;add+ 2 3&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 5&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
            &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;assert &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;= &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;add+ 4 4&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 8&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;x y&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;+ x y&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;test #&#39;add+&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt;= trigger&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:ok&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
你也可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.core/meta&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meta&lt;/a&gt; 去查看你這個函式的 metadata 或是測試用的函式資訊
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;meta #&#39;addd+&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:arglists&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;x y&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:test&lt;/span&gt; #function&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;hello.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fn--23678&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:line&lt;/span&gt; 350,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:column&lt;/span&gt; 4,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:file&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;/home/coldnew/Workspace/hello/src/hello/cpre.clj&quot;&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; add+,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ns&lt;/span&gt; #namespace&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;hello.core&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdccc5e2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdccc5e2&quot;&gt;clojure.pprint/cl-format&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdccc5e2&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.pprint/cl-format&lt;/a&gt; 是 Clojure 移植 Common Lisp 的 format 函式，對於同時寫 Clojure 和 ClojureScript 的開發者而言， &lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cl-format&lt;/a&gt; 可以同時用於 Clojure 和 ClojureScript 上，方便了不少。
&lt;/p&gt;

&lt;p&gt;
(註:  &lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-324&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CLJS-324 ISSUE&lt;/a&gt; 尚未被解決前，Clojure 的 &lt;a href=&quot;https://clojuredocs.org/clojure.core/format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;format&lt;/a&gt; 是無法用於 ClojureScript 上的)
&lt;/p&gt;

&lt;p&gt;
如果要更多關於 &lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cl-format&lt;/a&gt; 的使用，可以看看  &lt;a href=&quot;http://www.gigamonkeys.com/book/a-few-format-recipes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Praticle Common Lisp&lt;/a&gt; 一書，我在 &lt;a href=&quot;http://coldnew.github.io/blog/2016/03-27_leftpad/&quot;&gt;clojure/clojurescript 與 left-pad&lt;/a&gt; 一文亦有提到如何透過 &lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cl-format&lt;/a&gt; 實作 Clojure/ClojureScript 皆可以用的 leftpad 函式。
&lt;/p&gt;

&lt;p&gt;
投影片上給的範例則是這樣:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;cl-format &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;~&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;:r&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;&lt;/span&gt; 1234&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; one thousand, two hundred thirty-fourth&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;cl-format &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;~@r&quot;&lt;/span&gt; 1234&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; MCCXXXIV&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgba90eee&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgba90eee&quot;&gt;clojure.java.browse/browse-url&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgba90eee&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.java.browse/browse-url&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.java.browse/browse-url&lt;/a&gt; 會呼叫系統預設的瀏覽器，開啟你所指定的網頁。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.java.browse&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;browse-url &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;http://localhost:3000&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org97acd49&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org97acd49&quot;&gt;clojure.java.javadoc/javadoc&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org97acd49&quot;&gt;
&lt;p&gt;
Clojure 畢竟是 JVM 上的語言，有時候我們需要查看一些 javadoc，或是查看 Clojure 內部的 Java 實現，可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.java.javadoc/javadoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.java.javadoc/javadoc&lt;/a&gt; 來查看
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.java.javadoc&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;javadoc &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;list* 1 &lt;span style=&quot;color: #aaccff;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; open clojure.lang.Cons Javadoc&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3498046&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3498046&quot;&gt;clojure.reflect/reflect&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3498046&quot;&gt;
&lt;p&gt;
老實說我看了還是不知道這是什麼，也許是和 Java 的 &lt;a href=&quot;http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reflection&lt;/a&gt; 有關，不過我們還是可以在 &lt;a href=&quot;https://clojuredocs.org/clojure.reflect/reflect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.reflect/reflect&lt;/a&gt; 的文檔中看出一些東西
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.reflect&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;reflect&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;print-table&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Here we have a simple function that prints the&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;important bits of the class definition in a table.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;String&lt;/span&gt;
     reflect
     &lt;span style=&quot;color: #ccaaff;&quot;&gt;:members&lt;/span&gt;
     print-table&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                    &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |           &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:return-type&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; | &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:declaring-class&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |                                       &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:parameter-types&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |                       &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:exception-types&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |                        &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:flags&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|--------------------------+------------------------+------------------+--------------------------------------------------------+----------------------------------------+-------------------------------|&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|               replaceAll |       java.lang.String | java.lang.String |                    [java.lang.String java.lang.String] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|   CASE_INSENSITIVE_ORDER |                        | java.lang.String |                                                        |                                        |     #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:static&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:final&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                  indexOf |                    int | java.lang.String |                    [char&amp;lt;&amp;gt; int int char&amp;lt;&amp;gt; int int int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:static&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|           codePointCount |                    int | java.lang.String |                                              [int int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                 getChars |                   void | java.lang.String |                                   [int int char&amp;lt;&amp;gt; int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|            regionMatches |                boolean | java.lang.String |                         [int java.lang.String int int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                  isEmpty |                boolean | java.lang.String |                                                     [] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|              codePointAt |                    int | java.lang.String |                                                  [int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|              lastIndexOf |                    int | java.lang.String |                                     [java.lang.String] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|               startsWith |                boolean | java.lang.String |                                 [java.lang.String int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;...etc&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
講者在投影片中給的範例則是這個: (注意到結果是節錄呦~)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.reflect&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;reflect&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;with-out-str &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;write &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;reflect &lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;extract from a typical output:&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; invoke,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:return-type&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;java.lang.Object&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:declaring-class&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.Keyword&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:parameter-types&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;java.lang.Object&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;java.lang.Object&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:exception-types&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:flags&lt;/span&gt; #&lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:public&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:final&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9004ca2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9004ca2&quot;&gt;clojure.inspector/inspect-tree&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9004ca2&quot;&gt;
&lt;p&gt;
我們在處理一些樹狀資料時(ex: JSON 格式)，有個圖示化的工具可以方便瀏覽所有資訊，這邊可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.inspector/inspect-tree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.inspector/inspect-tree&lt;/a&gt; 來查看
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.inspector&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; i&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;m&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;a&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;c&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #ccaaff;&quot;&gt;:d&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
            &lt;span style=&quot;color: #ccaaff;&quot;&gt;:e&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:f&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;f&quot;&lt;/span&gt;
                &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;g&quot;&lt;/span&gt;
                &lt;span style=&quot;color: #ccaaff;&quot;&gt;:h&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;h&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:i&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:l&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:m&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;m&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #ccaaff;&quot;&gt;:n&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:o&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:p&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;p&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:q&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;q&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;i&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;inspect-tree m&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣呼叫，會得到如下的視窗
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/eea89759/inspect-tree.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org98dd382&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org98dd382&quot;&gt;clojure.lang.PersistentQueue&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org98dd382&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentQueue.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.lang.persistentQueue&lt;/a&gt; 是 Clojure 下並未寫在 doc 上面的 Queue 實現 (java) ，我們可以用它來實作我們需要的 queue (佇列) 功能
&lt;/p&gt;


&lt;p&gt;
基本上，你有以下幾種方法可以對你的 PersistentQueue 進行處理
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
peek
&lt;/p&gt;

&lt;p&gt;
取得 queue 最頂端的資料(head)
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
pop
&lt;/p&gt;

&lt;p&gt;
回傳不包含最頂端資料(head)的一個新的 PersistentQueue
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
conj
&lt;/p&gt;

&lt;p&gt;
將資料加入到 queue 的尾巴
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
empty?
&lt;/p&gt;

&lt;p&gt;
檢測 queue 是否為空的
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
seq
&lt;/p&gt;

&lt;p&gt;
將 queue 的資料變成序列 (sequence)
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
投影片上，講者是舉這範例:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;EMPTY&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;buf&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;reduce conj e &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;range 10&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;peek buf&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 0&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;peek &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;pop buf&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 1&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;peek &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;pop &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;pop buf&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 &lt;a href=&quot;http://stackoverflow.com/questions/3136453/immutable-queue-in-clojure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverflow&lt;/a&gt; 則是有人舉出了如何透過  &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentQueue.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.lang.persistentQueue&lt;/a&gt; 實現自己的 queue 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;queue&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;EMPTY&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;coll&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;reduce conj &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;EMPTY&lt;/span&gt; coll&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;print-method&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;q ^&lt;span style=&quot;color: #fff59d;&quot;&gt;java.io.Writer&lt;/span&gt; w&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;.write&lt;/span&gt; w &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;#queue &quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;print-method &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;sequence q&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; w&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;comment
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;*data-readers*&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&#39;queue #&#39;queue&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;read-string &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;pr-str &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;queue &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org95ce23a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org95ce23a&quot;&gt;fnil&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org95ce23a&quot;&gt;
&lt;p&gt;
我們在用 Clojure 處理東西的時候，有時候可能是資料本身就是 nil 的情況，這種狀況下對 nil 進行處理可能就會導致 Exception 的狀況發生
&lt;/p&gt;

&lt;p&gt;
在傳統的 LISP 中，常以 &lt;code&gt;or&lt;/code&gt; 作為一個保護，一旦遇到 nil 的情況，則回傳預設值
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;or&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt; 10&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 10&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/fnil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fnil&lt;/a&gt; 則是用來替你的函式多加一層保護，讓函式遇到 nil 的狀況可以避免一些 Exception 的發生
&lt;/p&gt;

&lt;p&gt;
講者在投影片上提供的範例是這樣的:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;m&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:host&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;update m &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;fnil #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;80&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:host&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;127.0.0.1&quot;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:port&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 80}&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;m&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:host&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;8008&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;update m &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;fnil #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;80&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:host&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;127.0.0.1&quot;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:port&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 8008}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
不過我們也可以將其拆開來看，這樣會更好理解
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 10&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  Unhandled java.lang.NumberFormatException&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;fnil #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; 80&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 1000&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org1dc2a98&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org1dc2a98&quot;&gt;counted?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org1dc2a98&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/counted_q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;counted?&lt;/a&gt; 是 O(1) 的操作，用來查看目標是否具有實作 &lt;a href=&quot;https://clojuredocs.org/clojure.core/count&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;count&lt;/a&gt; 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt; 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? #&lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;into-array &lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;TYPE&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org22564c4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org22564c4&quot;&gt;reversible?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org22564c4&quot;&gt;
&lt;p&gt;
[[&lt;a href=&quot;https://clojuredocs.org/clojure.core/reversible_q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://clojuredocs.org/clojure.core/reversible_q&lt;/a&gt;][reversibl[[file:][]]] 也是 O(1) 的操作，用來查看目標是否有實作 &lt;a href=&quot;https://clojuredocs.org/clojure.core/reversible_q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reversible&lt;/a&gt; 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;sorted-map&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;sorted-set&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? #&lt;span style=&quot;color: #81d4fa;&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdedb173&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdedb173&quot;&gt;vector-of&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdedb173&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/vector-of&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vector-of&lt;/a&gt; 會根據你提供的類型 (permitive type) 來將參數轉換成相對應型別的向量 (vector)
&lt;/p&gt;

&lt;p&gt;
可以使用的類型有 &lt;code&gt;:int&lt;/code&gt; , &lt;code&gt;:long&lt;/code&gt; , &lt;code&gt;:float&lt;/code&gt; , &lt;code&gt;:double&lt;/code&gt; , &lt;code&gt;:byte&lt;/code&gt; , &lt;code&gt;:short&lt;/code&gt; , &lt;code&gt;:char&lt;/code&gt; , &lt;code&gt;:boolean&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;conj &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:int&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [1 2 3]  ; &amp;lt;-- note, these are unboxed internally&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:int&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [1 2 3]  ; same here&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:float&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [1.0 2.0 3.0]&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;type &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;conj &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:int&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; clojure.core.Vec&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;type &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;conj &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:float&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; clojure.core.Vec&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd9ff4a3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd9ff4a3&quot;&gt;clojure.set/rename-keys&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd9ff4a3&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.set/rename-keys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.set/rename-keys&lt;/a&gt; 可以用來改變目前現有的 hash-map 的關鍵字 (keyword) 名稱
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1, &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:new-a&lt;/span&gt;, &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:new-b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:new-a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:new-b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 2}&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;cloure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:new-b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1}&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;You need to be careful about key collisions.  You probably shouldn&#39;t&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;depend on the exact behavior.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1}&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org203f0d7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org203f0d7&quot;&gt;clojure.data/diff&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org203f0d7&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.data/diff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.data/diff&lt;/a&gt; 用來對兩個序列(sequence)進行比較，並回傳比較的結果
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;diff &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt; 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; ({&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1} {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 3, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 3} {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 2})&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;diff &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;5 9 3 2 3 7&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [[1 2] [5 9 nil 2 3 7] [nil nil 3]]&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;diff &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;set &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;set &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;5 9 3 2 3 7&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [#{1}  #{7 9 5}        #{3 2}]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org23cf5b1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org23cf5b1&quot;&gt;munge&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org23cf5b1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/munge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;munge&lt;/a&gt; 這個函式並未有文檔，因此只能實際看看用途了
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;foo&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  #&#39;user/foo&lt;/span&gt;

foo
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; #&amp;lt;user$foo user$foo@a0dc71&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;munge foo&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &quot;user_DOLLARSIGN_foo_CIRCA_a0dc71&quot;&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;doseq&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;c &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;remove #&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Character&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;isLetterOrDigit&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;map char &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;range 32 127&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println c &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;-&amp;gt;&quot;&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;munge c&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Prints:&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;! -&amp;gt; _BANG_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&quot; -&amp;gt; _DOUBLEQUOTE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# -&amp;gt; _SHARP_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;$ -&amp;gt; $&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;% -&amp;gt; _PERCENT_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;amp; -&amp;gt; _AMPERSAND_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&#39; -&amp;gt; _SINGLEQUOTE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;( -&amp;gt; (&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;) -&amp;gt; )&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;* -&amp;gt; _STAR_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;+ -&amp;gt; _PLUS_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;, -&amp;gt; ,&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;- -&amp;gt; _&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;. -&amp;gt; .&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;/ -&amp;gt; _SLASH_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;: -&amp;gt; _COLON_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;; -&amp;gt; ;&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt; -&amp;gt; _LT_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;= -&amp;gt; _EQ_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;gt; -&amp;gt; _GT_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;? -&amp;gt; _QMARK_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;@ -&amp;gt; _CIRCA_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;[ -&amp;gt; _LBRACK_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;\ -&amp;gt; _BSLASH_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;] -&amp;gt; _RBRACK_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;^ -&amp;gt; _CARET_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;_ -&amp;gt; _&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;` -&amp;gt; `&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;{ -&amp;gt; _LBRACE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;| -&amp;gt; _BAR_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} -&amp;gt; _RBRACE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;~ -&amp;gt; _TILDE_&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orga399af9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga399af9&quot;&gt;gensym&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga399af9&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/gensym&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gensym&lt;/a&gt; 會產生不衝突名稱的 symbol，這個應該是在 macro 實現時，Clojure 所使用到的函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;gensym &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; foo2020&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;gensym &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; foo2027&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2337c1b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2337c1b&quot;&gt;seque&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2337c1b&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/seque&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;seque&lt;/a&gt; 是一種 &lt;code&gt;阻塞隊列(Linked Blocking Queue, LBQ)&lt;/code&gt; 的實作，這種實現是線程安全(thread safe)的，可以確保資料先進先出(first in first out, FIFO) 的狀況。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;start &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;nanoTime&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
      q &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;seque
         &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;iterate
          #&lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Thread&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;sleep 400&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;inc &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
          0&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sleep five seconds...&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Thread&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;sleep 5000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;doseq&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;i &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;take 20 q&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;int &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;/ &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;- &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;nanoTime&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt; start&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 1e7&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;:&quot;&lt;/span&gt; i&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;


&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;The iterate form returns a lazy seq that delays nearly a half-second&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;before returning each subsequent item.  Here seque starts a thread&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;generating the lazy seq.&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;The body of the let allows the seque thread to get ahead by five seconds&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;before it begins consuming the seq using doseq.  The doseq prints a&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;timestamp and the value from the seq when it becomes available.  The&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;first 11 or so are available almost instantly, until the consuming&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;doseq catches up with the producing iterate, at which point the consumer&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;blocks for 400ms before each item can be printed.&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;sleep five seconds...&lt;/span&gt;
500 : 0
500 : 1
500 : 2
500 : 3
500 : 4
500 : 5
500 : 6
500 : 7
500 : 8
500 : 9
500 : 10
500 : 11
520 : 12
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;......&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org964ac17&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org964ac17&quot;&gt;clojure.zip/zippers&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org964ac17&quot;&gt;
&lt;p&gt;
clojure.zip 是用來處理樹狀結構用函式庫，這篇文章有很好的解釋: &lt;a href=&quot;http://blog.lambdaliu.com/posts-output/2016-04-05-understand-clojure-zipper-with-picture/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(λx.Liu)Blog=Hacking: Understand clojure.zip with picture&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.zip/zipper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.zip/zipper&lt;/a&gt; 則是用來將資料包裝起來，這樣我們就可以透過 clojure.zip 來處理這些樹狀資料
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;zp&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;zipper vector? seq &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;_ c&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; c&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
                            &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [[[1 2 3] [&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;] 2 3 [40 50 60]] nil]&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;down zp&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:l&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:pnodes&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ppath&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:r&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&lt;/span&gt; zp
    &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;down
    first&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&lt;/span&gt; zp
    &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;down
    &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;right&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:l&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:pnodes&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ppath&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:r&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;2 3 &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
看完 &lt;a href=&quot;http://clojutre.org/2015/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ClojuTRE 2015&lt;/a&gt; 的 &lt;a href=&quot;https://www.youtube.com/watch?v=QI9Fc5TT87A&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Unknown pearls from the Clojure standard library - Renzo Borgatti&lt;/a&gt; 演講後，來紀錄個筆記。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/QI9Fc5TT87A&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
這場演講介紹了一些在 clojure.core 裡面的函式，這些函式平常可能不太有機會用到，但是可以協助我們除錯程式的問題。
&lt;/p&gt;

&lt;p&gt;
投影片: &lt;a href=&quot;https://github.com/reborg/clojuTRE-2015/raw/master/slides/renzo-borgatti-stdlib.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下載連結&lt;/a&gt;
&lt;/p&gt;

&lt;div id=&quot;outline-container-org1c5b777&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org1c5b777&quot;&gt;destructure&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org1c5b777&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://clojure.org/guides/destructuring&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;destructure&lt;/a&gt; (解構) 在 Clojure 裡面是個非常實用的功能，可以方便我們對資料直接指派變數去代替它，如下:
&lt;/p&gt;

&lt;div class=&quot;row &quot;&gt;&lt;div class=&quot;col-md-6 &quot;&gt;

&lt;p&gt;
&lt;b&gt;No destructuring&lt;/b&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;data &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
      a &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;nth data 0&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
      b &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;nth data 1&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
      c &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;nth data 2&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;a:&quot;&lt;/span&gt; a &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;b:&quot;&lt;/span&gt; b &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;c:&quot;&lt;/span&gt; c&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; a: 1 b: 2 c: 3&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;div class=&quot;col-md-6&quot;&gt;

&lt;p&gt;
&lt;b&gt;With destructuring&lt;/b&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;a b c&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
   &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;a:&quot;&lt;/span&gt; a &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;b:&quot;&lt;/span&gt; b &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;c:&quot;&lt;/span&gt; c&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
 &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; a: 1 b: 2 c: 3&lt;/span&gt;
 &amp;#65279;
 &amp;#65279;
 &amp;#65279;
&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt; &lt;/div&gt;

&lt;p&gt;
我們可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.core/destructure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;destructure&lt;/a&gt; 去觀察一個東西是如何被解構的，這邊是投影片給的範例:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;destructure &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;x y &amp;amp; others&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt; v&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [v2 v&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;     &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;x (nth v2 0 nil)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;     &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;y (nth v2 1 nil)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;     &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;others (nthnext v2 2)]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
當然投影片給的是整理後的結果，實際上我執行得到的結果是這樣的
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;vec__23596
 v
 seq__23597
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;seq vec__23596&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 first__23598
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;first seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 seq__23597
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;next seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 x
 first__23598
 first__23598
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;first seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 seq__23597
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;next seq__23597&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
 y
 first__23598
 others
 seq__23597&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org338e561&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org338e561&quot;&gt;reductions&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org338e561&quot;&gt;
&lt;p&gt;
我們在 Clojure 中很常用 &lt;a href=&quot;http://clojuredocs.org/clojure.core/reduce&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reduce&lt;/a&gt; 去將一個函數作用到 list 上的每兩個元素上，然後返回最後的結果，最常見的簡單函數就是一個 list 的元素全部相加
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reduce + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 10&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 45&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 &lt;a href=&quot;http://clojuredocs.org/clojure.core/reduce&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reduce&lt;/a&gt; 的運作過程，則可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.core/reductions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reductions&lt;/a&gt; 來協助我們進行查看，可以看到這邊最後得到的 &lt;code&gt;45&lt;/code&gt; 就是我們想要的結果。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reductions + &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;range 10&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  (0 1 3 6 10 15 21 28 36 45)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9c0f0e0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9c0f0e0&quot;&gt;test&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9c0f0e0&quot;&gt;
&lt;p&gt;
在 Clojure 中，我們可以在 &lt;a href=&quot;http://clojure.org/reference/metadata&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;metadata&lt;/a&gt; 中設定好對一個函數的測試方式，然後呼叫 &lt;a href=&quot;https://clojuredocs.org/clojure.core/test&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;test&lt;/a&gt; 對該函數進行測試，這項功能很適合用在小函式的一些 assertion 測試上。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;add+&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:test&lt;/span&gt; #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;do&lt;/span&gt;
            &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;assert &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;= &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;add+ 2 3&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 5&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
            &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;assert &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;= &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;add+ 4 4&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 8&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;x y&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;+ x y&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;test #&#39;add+&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt;= trigger&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:ok&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
你也可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.core/meta&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meta&lt;/a&gt; 去查看你這個函式的 metadata 或是測試用的函式資訊
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;meta #&#39;addd+&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:arglists&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;x y&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:test&lt;/span&gt; #function&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;hello.core&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;fn--23678&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:line&lt;/span&gt; 350,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:column&lt;/span&gt; 4,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:file&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;/home/coldnew/Workspace/hello/src/hello/cpre.clj&quot;&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; add+,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ns&lt;/span&gt; #namespace&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;hello.core&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdccc5e2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdccc5e2&quot;&gt;clojure.pprint/cl-format&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdccc5e2&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.pprint/cl-format&lt;/a&gt; 是 Clojure 移植 Common Lisp 的 format 函式，對於同時寫 Clojure 和 ClojureScript 的開發者而言， &lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cl-format&lt;/a&gt; 可以同時用於 Clojure 和 ClojureScript 上，方便了不少。
&lt;/p&gt;

&lt;p&gt;
(註:  &lt;a href=&quot;http://dev.clojure.org/jira/browse/CLJS-324&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CLJS-324 ISSUE&lt;/a&gt; 尚未被解決前，Clojure 的 &lt;a href=&quot;https://clojuredocs.org/clojure.core/format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;format&lt;/a&gt; 是無法用於 ClojureScript 上的)
&lt;/p&gt;

&lt;p&gt;
如果要更多關於 &lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cl-format&lt;/a&gt; 的使用，可以看看  &lt;a href=&quot;http://www.gigamonkeys.com/book/a-few-format-recipes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Praticle Common Lisp&lt;/a&gt; 一書，我在 &lt;a href=&quot;http://coldnew.github.io/blog/2016/03-27_leftpad/&quot;&gt;clojure/clojurescript 與 left-pad&lt;/a&gt; 一文亦有提到如何透過 &lt;a href=&quot;https://clojuredocs.org/clojure.pprint/cl-format&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cl-format&lt;/a&gt; 實作 Clojure/ClojureScript 皆可以用的 leftpad 函式。
&lt;/p&gt;

&lt;p&gt;
投影片上給的範例則是這樣:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;cl-format &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;~&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;:r&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;&lt;/span&gt; 1234&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; one thousand, two hundred thirty-fourth&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;cl-format &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;~@r&quot;&lt;/span&gt; 1234&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; MCCXXXIV&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgba90eee&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgba90eee&quot;&gt;clojure.java.browse/browse-url&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgba90eee&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.java.browse/browse-url&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.java.browse/browse-url&lt;/a&gt; 會呼叫系統預設的瀏覽器，開啟你所指定的網頁。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.java.browse&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;browse-url &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;http://localhost:3000&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org97acd49&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org97acd49&quot;&gt;clojure.java.javadoc/javadoc&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org97acd49&quot;&gt;
&lt;p&gt;
Clojure 畢竟是 JVM 上的語言，有時候我們需要查看一些 javadoc，或是查看 Clojure 內部的 Java 實現，可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.java.javadoc/javadoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.java.javadoc/javadoc&lt;/a&gt; 來查看
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.java.javadoc&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;javadoc &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;list* 1 &lt;span style=&quot;color: #aaccff;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; open clojure.lang.Cons Javadoc&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3498046&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3498046&quot;&gt;clojure.reflect/reflect&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3498046&quot;&gt;
&lt;p&gt;
老實說我看了還是不知道這是什麼，也許是和 Java 的 &lt;a href=&quot;http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reflection&lt;/a&gt; 有關，不過我們還是可以在 &lt;a href=&quot;https://clojuredocs.org/clojure.reflect/reflect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.reflect/reflect&lt;/a&gt; 的文檔中看出一些東西
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.reflect&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;reflect&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;print-table&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Here we have a simple function that prints the&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;important bits of the class definition in a table.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;String&lt;/span&gt;
     reflect
     &lt;span style=&quot;color: #ccaaff;&quot;&gt;:members&lt;/span&gt;
     print-table&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                    &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:name&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |           &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:return-type&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; | &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:declaring-class&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |                                       &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:parameter-types&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |                       &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:exception-types&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |                        &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:flags&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|--------------------------+------------------------+------------------+--------------------------------------------------------+----------------------------------------+-------------------------------|&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|               replaceAll |       java.lang.String | java.lang.String |                    [java.lang.String java.lang.String] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|   CASE_INSENSITIVE_ORDER |                        | java.lang.String |                                                        |                                        |     #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:static&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:final&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                  indexOf |                    int | java.lang.String |                    [char&amp;lt;&amp;gt; int int char&amp;lt;&amp;gt; int int int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:static&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|           codePointCount |                    int | java.lang.String |                                              [int int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                 getChars |                   void | java.lang.String |                                   [int int char&amp;lt;&amp;gt; int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|            regionMatches |                boolean | java.lang.String |                         [int java.lang.String int int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|                  isEmpty |                boolean | java.lang.String |                                                     [] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|              codePointAt |                    int | java.lang.String |                                                  [int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|              lastIndexOf |                    int | java.lang.String |                                     [java.lang.String] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;|               startsWith |                boolean | java.lang.String |                                 [java.lang.String int] |                                     [] |                    #{&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:public&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} |&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;...etc&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
講者在投影片中給的範例則是這個: (注意到結果是節錄呦~)
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.reflect&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:refer&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;reflect&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;with-out-str &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.pprint&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;write &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;reflect &lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;extract from a typical output:&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:name&lt;/span&gt; invoke,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:return-type&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;java.lang.Object&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:declaring-class&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.Keyword&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:parameter-types&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;java.lang.Object&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;java.lang.Object&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:exception-types&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;,
 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:flags&lt;/span&gt; #&lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:public&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:final&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9004ca2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9004ca2&quot;&gt;clojure.inspector/inspect-tree&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9004ca2&quot;&gt;
&lt;p&gt;
我們在處理一些樹狀資料時(ex: JSON 格式)，有個圖示化的工具可以方便瀏覽所有資訊，這邊可以透過 &lt;a href=&quot;https://clojuredocs.org/clojure.inspector/inspect-tree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.inspector/inspect-tree&lt;/a&gt; 來查看
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.inspector&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:as&lt;/span&gt; i&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;m&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;a&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;c&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #ccaaff;&quot;&gt;:d&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;
            &lt;span style=&quot;color: #ccaaff;&quot;&gt;:e&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:f&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;f&quot;&lt;/span&gt;
                &lt;span style=&quot;color: #ccaaff;&quot;&gt;:g&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;g&quot;&lt;/span&gt;
                &lt;span style=&quot;color: #ccaaff;&quot;&gt;:h&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;h&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:i&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:l&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:m&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;m&quot;&lt;/span&gt;
            &lt;span style=&quot;color: #ccaaff;&quot;&gt;:n&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;n&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;}&lt;/span&gt;
        &lt;span style=&quot;color: #ccaaff;&quot;&gt;:o&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:p&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;p&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:q&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;q&quot;&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;i&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;inspect-tree m&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣呼叫，會得到如下的視窗
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/eea89759/inspect-tree.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org98dd382&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org98dd382&quot;&gt;clojure.lang.PersistentQueue&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org98dd382&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentQueue.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.lang.persistentQueue&lt;/a&gt; 是 Clojure 下並未寫在 doc 上面的 Queue 實現 (java) ，我們可以用它來實作我們需要的 queue (佇列) 功能
&lt;/p&gt;


&lt;p&gt;
基本上，你有以下幾種方法可以對你的 PersistentQueue 進行處理
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
peek
&lt;/p&gt;

&lt;p&gt;
取得 queue 最頂端的資料(head)
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
pop
&lt;/p&gt;

&lt;p&gt;
回傳不包含最頂端資料(head)的一個新的 PersistentQueue
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
conj
&lt;/p&gt;

&lt;p&gt;
將資料加入到 queue 的尾巴
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
empty?
&lt;/p&gt;

&lt;p&gt;
檢測 queue 是否為空的
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
seq
&lt;/p&gt;

&lt;p&gt;
將 queue 的資料變成序列 (sequence)
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
投影片上，講者是舉這範例:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;e&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;EMPTY&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;buf&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;reduce conj e &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;range 10&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;peek buf&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 0&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;peek &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;pop buf&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 1&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;peek &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;pop &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;pop buf&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 2&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
而 &lt;a href=&quot;http://stackoverflow.com/questions/3136453/immutable-queue-in-clojure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StackOverflow&lt;/a&gt; 則是有人舉出了如何透過  &lt;a href=&quot;https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentQueue.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.lang.persistentQueue&lt;/a&gt; 實現自己的 queue 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;queue&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;EMPTY&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;coll&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;reduce conj &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;EMPTY&lt;/span&gt; coll&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defmethod&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;print-method&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.lang.PersistentQueue&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;q ^&lt;span style=&quot;color: #fff59d;&quot;&gt;java.io.Writer&lt;/span&gt; w&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;.write&lt;/span&gt; w &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;#queue &quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;print-method &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;sequence q&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; w&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;comment
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;*data-readers*&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;{&lt;/span&gt;&#39;queue #&#39;queue&lt;span style=&quot;color: #aaeecc;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;read-string &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;pr-str &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;queue &lt;span style=&quot;color: #fff59d;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #fff59d;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org95ce23a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org95ce23a&quot;&gt;fnil&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org95ce23a&quot;&gt;
&lt;p&gt;
我們在用 Clojure 處理東西的時候，有時候可能是資料本身就是 nil 的情況，這種狀況下對 nil 進行處理可能就會導致 Exception 的狀況發生
&lt;/p&gt;

&lt;p&gt;
在傳統的 LISP 中，常以 &lt;code&gt;or&lt;/code&gt; 作為一個保護，一旦遇到 nil 的情況，則回傳預設值
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;or&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt; 10&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 10&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/fnil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fnil&lt;/a&gt; 則是用來替你的函式多加一層保護，讓函式遇到 nil 的狀況可以避免一些 Exception 的發生
&lt;/p&gt;

&lt;p&gt;
講者在投影片上提供的範例是這樣的:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;m&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:host&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;update m &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;fnil #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;80&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:host&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;127.0.0.1&quot;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:port&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 80}&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;m&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:host&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;8008&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;update m &lt;span style=&quot;color: #ccaaff;&quot;&gt;:port&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;fnil #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;80&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:host&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &quot;127.0.0.1&quot;, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:port&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 8008}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
不過我們也可以將其拆開來看，這樣會更好理解
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 10&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  Unhandled java.lang.NumberFormatException&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;fnil #&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;parseInt&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; 80&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;1000&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; 1000&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org1dc2a98&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org1dc2a98&quot;&gt;counted?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org1dc2a98&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/counted_q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;counted?&lt;/a&gt; 是 O(1) 的操作，用來查看目標是否具有實作 &lt;a href=&quot;https://clojuredocs.org/clojure.core/count&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;count&lt;/a&gt; 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt; 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? #&lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;asdf&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counted? &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;into-array &lt;span style=&quot;color: #fff59d;&quot;&gt;Integer&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;TYPE&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org22564c4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org22564c4&quot;&gt;reversible?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org22564c4&quot;&gt;
&lt;p&gt;
[[&lt;a href=&quot;https://clojuredocs.org/clojure.core/reversible_q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://clojuredocs.org/clojure.core/reversible_q&lt;/a&gt;][reversibl[[file:][]]] 也是 O(1) 的操作，用來查看目標是否有實作 &lt;a href=&quot;https://clojuredocs.org/clojure.core/reversible_q&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reversible&lt;/a&gt; 函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;sorted-map&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;sorted-set&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  true&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &#39;&lt;span style=&quot;color: #81d4fa;&quot;&gt;()&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? &lt;span style=&quot;color: #81d4fa;&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  false&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;reversible? #&lt;span style=&quot;color: #81d4fa;&quot;&gt;{}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdedb173&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdedb173&quot;&gt;vector-of&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdedb173&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/vector-of&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vector-of&lt;/a&gt; 會根據你提供的類型 (permitive type) 來將參數轉換成相對應型別的向量 (vector)
&lt;/p&gt;

&lt;p&gt;
可以使用的類型有 &lt;code&gt;:int&lt;/code&gt; , &lt;code&gt;:long&lt;/code&gt; , &lt;code&gt;:float&lt;/code&gt; , &lt;code&gt;:double&lt;/code&gt; , &lt;code&gt;:byte&lt;/code&gt; , &lt;code&gt;:short&lt;/code&gt; , &lt;code&gt;:char&lt;/code&gt; , &lt;code&gt;:boolean&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;conj &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:int&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [1 2 3]  ; &amp;lt;-- note, these are unboxed internally&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:int&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [1 2 3]  ; same here&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:float&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [1.0 2.0 3.0]&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;type &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;conj &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:int&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; clojure.core.Vec&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;type &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;conj &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;vector-of &lt;span style=&quot;color: #ccaaff;&quot;&gt;:float&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt; 1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; clojure.core.Vec&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd9ff4a3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd9ff4a3&quot;&gt;clojure.set/rename-keys&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd9ff4a3&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.set/rename-keys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.set/rename-keys&lt;/a&gt; 可以用來改變目前現有的 hash-map 的關鍵字 (keyword) 名稱
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1, &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:new-a&lt;/span&gt;, &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:new-b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:new-a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:new-b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 2}&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;cloure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:new-b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1}&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;You need to be careful about key collisions.  You probably shouldn&#39;t&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;depend on the exact behavior.&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1}&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.set&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;rename-keys  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;  &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org203f0d7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org203f0d7&quot;&gt;clojure.data/diff&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org203f0d7&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.data/diff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.data/diff&lt;/a&gt; 用來對兩個序列(sequence)進行比較，並回傳比較的結果
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;require &#39;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;diff &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 1 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; 3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt; 2 &lt;span style=&quot;color: #ccaaff;&quot;&gt;:c&lt;/span&gt; 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; ({&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 1} {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 3, &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:c&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 3} {&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; 2})&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;diff &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;5 9 3 2 3 7&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [[1 2] [5 9 nil 2 3 7] [nil nil 3]]&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.data&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;diff &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;set &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;set &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;5 9 3 2 3 7&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [#{1}  #{7 9 5}        #{3 2}]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org23cf5b1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org23cf5b1&quot;&gt;munge&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org23cf5b1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/munge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;munge&lt;/a&gt; 這個函式並未有文檔，因此只能實際看看用途了
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;defn&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;foo&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;  #&#39;user/foo&lt;/span&gt;

foo
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; #&amp;lt;user$foo user$foo@a0dc71&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;munge foo&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; &quot;user_DOLLARSIGN_foo_CIRCA_a0dc71&quot;&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;doseq&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;c &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;remove #&lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Character&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;isLetterOrDigit&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;map char &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;range 32 127&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println c &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;-&amp;gt;&quot;&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;munge c&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Prints:&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;   &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;! -&amp;gt; _BANG_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&quot; -&amp;gt; _DOUBLEQUOTE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;# -&amp;gt; _SHARP_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;$ -&amp;gt; $&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;% -&amp;gt; _PERCENT_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;amp; -&amp;gt; _AMPERSAND_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&#39; -&amp;gt; _SINGLEQUOTE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;( -&amp;gt; (&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;) -&amp;gt; )&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;* -&amp;gt; _STAR_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;+ -&amp;gt; _PLUS_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;, -&amp;gt; ,&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;- -&amp;gt; _&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;. -&amp;gt; .&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;/ -&amp;gt; _SLASH_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;: -&amp;gt; _COLON_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;; -&amp;gt; ;&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;lt; -&amp;gt; _LT_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;= -&amp;gt; _EQ_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;&amp;gt; -&amp;gt; _GT_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;? -&amp;gt; _QMARK_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;@ -&amp;gt; _CIRCA_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;[ -&amp;gt; _LBRACK_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;\ -&amp;gt; _BSLASH_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;] -&amp;gt; _RBRACK_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;^ -&amp;gt; _CARET_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;_ -&amp;gt; _&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;` -&amp;gt; `&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;{ -&amp;gt; _LBRACE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;| -&amp;gt; _BAR_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;} -&amp;gt; _RBRACE_&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;~ -&amp;gt; _TILDE_&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orga399af9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga399af9&quot;&gt;gensym&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orga399af9&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/gensym&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gensym&lt;/a&gt; 會產生不衝突名稱的 symbol，這個應該是在 macro 實現時，Clojure 所使用到的函式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;gensym &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; foo2020&lt;/span&gt;

&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;gensym &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; foo2027&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2337c1b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2337c1b&quot;&gt;seque&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2337c1b&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.core/seque&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;seque&lt;/a&gt; 是一種 &lt;code&gt;阻塞隊列(Linked Blocking Queue, LBQ)&lt;/code&gt; 的實作，這種實現是線程安全(thread safe)的，可以確保資料先進先出(first in first out, FIFO) 的狀況。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;let&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;start &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;nanoTime&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
      q &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;seque
         &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;iterate
          #&lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;do&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Thread&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;sleep 400&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;inc &lt;span style=&quot;color: #aaccff;&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;
          0&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;sleep five seconds...&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;Thread&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;sleep 5000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;
  &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;doseq&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;i &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;take 20 q&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;
    &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;println &lt;span style=&quot;color: #aaeecc;&quot;&gt;(&lt;/span&gt;int &lt;span style=&quot;color: #ccaaff;&quot;&gt;(&lt;/span&gt;/ &lt;span style=&quot;color: #fff59d;&quot;&gt;(&lt;/span&gt;- &lt;span style=&quot;color: #ff8888;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;System&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;nanoTime&lt;/span&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;)&lt;/span&gt; start&lt;span style=&quot;color: #fff59d;&quot;&gt;)&lt;/span&gt; 1e7&lt;span style=&quot;color: #ccaaff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;)&lt;/span&gt;
             &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;:&quot;&lt;/span&gt; i&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;


&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;The iterate form returns a lazy seq that delays nearly a half-second&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;before returning each subsequent item.  Here seque starts a thread&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;generating the lazy seq.&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;The body of the let allows the seque thread to get ahead by five seconds&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;before it begins consuming the seq using doseq.  The doseq prints a&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;timestamp and the value from the seq when it becomes available.  The&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;first 11 or so are available almost instantly, until the consuming&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;doseq catches up with the producing iterate, at which point the consumer&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;blocks for 400ms before each item can be printed.&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;;&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;sleep five seconds...&lt;/span&gt;
500 : 0
500 : 1
500 : 2
500 : 3
500 : 4
500 : 5
500 : 6
500 : 7
500 : 8
500 : 9
500 : 10
500 : 11
520 : 12
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;......&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org964ac17&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org964ac17&quot;&gt;clojure.zip/zippers&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org964ac17&quot;&gt;
&lt;p&gt;
clojure.zip 是用來處理樹狀結構用函式庫，這篇文章有很好的解釋: &lt;a href=&quot;http://blog.lambdaliu.com/posts-output/2016-04-05-understand-clojure-zipper-with-picture/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(λx.Liu)Blog=Hacking: Understand clojure.zip with picture&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://clojuredocs.org/clojure.zip/zipper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;clojure.zip/zipper&lt;/a&gt; 則是用來將資料包裝起來，這樣我們就可以透過 clojure.zip 來處理這些樹狀資料
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-clojure&quot;&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;zp&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;zipper vector? seq &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;fn&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;_ c&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; c&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;
                            &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt; [[[1 2 3] [&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:a&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;] 2 3 [40 50 60]] nil]&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;down zp&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:l&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:pnodes&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ppath&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:r&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&lt;/span&gt; zp
    &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;down
    first&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;


&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;-&amp;gt;&lt;/span&gt; zp
    &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;down
    &lt;span style=&quot;color: #fff59d;&quot;&gt;clojure.zip&lt;/span&gt;&lt;span style=&quot;color: #c6cccc; background-color: #202020;&quot;&gt;/&lt;/span&gt;right&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;=&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;
 &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:l&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:pnodes&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;1 2 3&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;:a&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;:b&lt;/span&gt;&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt; 2 3 &lt;span style=&quot;color: #ccaaff;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #ccaaff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:ppath&lt;/span&gt; &lt;span style=&quot;color: #ccaaff;&quot;&gt;nil&lt;/span&gt;,
  &lt;span style=&quot;color: #ccaaff;&quot;&gt;:r&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;2 3 &lt;span style=&quot;color: #aaeecc;&quot;&gt;[&lt;/span&gt;40 50 60&lt;span style=&quot;color: #aaeecc;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/eea89759/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 使用 Yocto 建立系統</title>
      <link>https://coldnew.github.io/c3e8558e/</link>
      <guid>https://coldnew.github.io/c3e8558e/</guid>
      <pubDate>Sun, 11 Sep 2016 13:47:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/zynq_linux_simple/&quot;&gt;zybo board 開發記錄: 執行 Linux 作業系統&lt;/a&gt; 一文中，我們提到了如何自行編譯 u-boot、Linux kernel、busybox 來讓 Zybo Board 可以開機進到 SD 卡上的 Linux 系統。這一次，我們要來談談怎樣使用 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 來建立 Zybo board 的 Linux 系統。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 是近年來各大 SoC 商以及開發板商皆參與的 Linux 系統構件工具，透過 Yocto Project 的協助，使用者可以針對自己的需求構件想要的映像檔(image)或是 Root File System，和 Yocto 類似功能的工具則是 &lt;a href=&quot;https://buildroot.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;buildroot&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
本文將以 &lt;a href=&quot;http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zybo Board&lt;/a&gt; 作為目標開發板，示範如何使用 Yocto 來構件他的系統。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org71d75bf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org71d75bf&quot;&gt;預先準備&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org71d75bf&quot;&gt;
&lt;p&gt;
根據你使用的 Linux 發行板的不同，你需要安裝一些套件，這邊列出一些發行板的資訊，詳細請參考 &lt;a href=&quot;http://www.yoctoproject.org/docs/2.0/ref-manual/ref-manual.html#intro-requirements&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt;
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Debian/Ubuntu
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@debian ~ $ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Fedora
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@fedora ~ $ sudo dnf install gawk make wget tar bzip2 gzip python unzip perl patch diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue socat findutils which
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Gentoo
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ emerge -v dev-vcs/git dev-util/diffstat app-arch/unzip sys-apps/texinfo app-admin/chrpath media-libs/libsdl2 sys-apps/iproute2 x11-terms/xterm net-nds/rpcbind
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你和我一樣，使用 Gentoo Linux 的話，在 Gentoo Linux 下要確認你使用的是 Python 2.7
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ eselect python set python2.7

eselect python list
Available Python interpreters:
  &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;   python2.7 *
  &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;   python3.2
  &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;   python3.3

python
Python 2.7.5 &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;default, Oct 19 2013, 22:52:27&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc54328c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc54328c&quot;&gt;格式化 MicroSD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc54328c&quot;&gt;
&lt;p&gt;
在這次的開發中，我們要設定 MicroSD 卡片成兩個分區，第一個是 &lt;code&gt;fat32&lt;/code&gt; 格式，第二個則使用 &lt;code&gt;ext4&lt;/code&gt; 格式，若不會使用 &lt;code&gt;fdisk&lt;/code&gt; 命令的話，可以透過 &lt;code&gt;gparted&lt;/code&gt; 來進行格式化，以下是我格式化卡片的範例 (8GB 卡片)。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/c3e8558e/format.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc1f348f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc1f348f&quot;&gt;下載 Poky&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc1f348f&quot;&gt;
&lt;p&gt;
在開始用 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 之前，我們需要下載 Poky, Poky 是 Yocto 的構建系統，基本上我們會用到的東西都會在 poky 資料夾內
&lt;/p&gt;

&lt;p&gt;
注意到我們這邊切換到 &lt;code&gt;krogoth&lt;/code&gt; 這個分支，Yocto 裡面不同的分支(branch) 代表了不同版本。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ git clone git://git.yoctoproject.org/poky -b krogoth
&lt;/pre&gt;

&lt;p&gt;
好了後，進入到 poky 資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky $ cd poky
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0870ee3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0870ee3&quot;&gt;下載 meta-xilinx&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0870ee3&quot;&gt;
&lt;p&gt;
Yocto 對於不同的 SoC 廠商，會有提供不同的 layer 來對特定的開源程式加上合適的 patch，或是添加不同 SoC 廠各自需要的韌體(firmware)，以及各開發板特定的設定。
在 Xilinx 平台上，我們需要下載 &lt;code&gt;meta-xilinx&lt;/code&gt; ，我們需要的 kernel 以及 Zybo board 的設定資訊都在裡面。
&lt;/p&gt;

&lt;p&gt;
這邊一樣切換到 &lt;code&gt;krogoth&lt;/code&gt; 這個分支(branch)
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky $ git clone git://github.com/Xilinx/meta-xilinx -b krogoth
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org76c4f2d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org76c4f2d&quot;&gt;切換到編譯用目錄&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org76c4f2d&quot;&gt;
&lt;p&gt;
接下來，我們將透過 &lt;code&gt;source&lt;/code&gt; 指令暫時修改當前 shell 的環境變數，並切換到 &lt;code&gt;build&lt;/code&gt; 資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky $ source oe-init-build-env build
You had no conf/local.conf file. This configuration file has therefore been
created for you with some default values. You may wish to edit it to, for
example, select a different MACHINE (target hardware). See conf/local.conf
for more information as common configuration options are commented.

You had no conf/bblayers.conf file. This configuration file has therefore been
created for you with some default values. To add additional metadata layers
into your configuration please add entries to conf/bblayers.conf.

The Yocto Project has extensive documentation about OE including a reference
manual which can be found at:
    http://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    http://www.openembedded.org/


### Shell environment set up for builds. ###

You can now run &#39;bitbake &amp;lt;target&amp;gt;&#39;

Common targets are:
    core-image-minimal
    core-image-sato
    meta-toolchain
    meta-ide-support

You can also run generated qemu images with a command like &#39;runqemu qemux86&#39;
&lt;/pre&gt;

&lt;p&gt;
預設的目標機器是 &lt;code&gt;qemux86&lt;/code&gt; 因此我們需要修改一下，不過先看一下當前目錄結構
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky/build $ tree  .
. &amp;lt;b&amp;gt;
└── conf &amp;lt;b&amp;gt;
    ├── bblayers.conf
    ├── local.conf
    └── templateconf.cfg

1 directory, 3 files
&lt;/pre&gt;

&lt;p&gt;
我們首先要修改 &lt;code&gt;conf/bblayers.conf&lt;/code&gt; ，在上面添加我們剛剛下載的 &lt;code&gt;meta-xilinx&lt;/code&gt; ，修改完會像這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;changes incompatibly&lt;/span&gt;
POKY_BBLAYERS_CONF_VERSION = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;2&quot;&lt;/span&gt;

BBPATH = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;${TOPDIR}&quot;&lt;/span&gt;
BBFILES ?= &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;&quot;&lt;/span&gt;

BBLAYERS ?= &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot; \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta-poky \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta-yocto-bsp \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta-xilinx \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  &quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來，修改 &lt;code&gt;conf/local.conf&lt;/code&gt; ，這份檔案可以用來設定要編譯的目標機器，在這邊，我們將目標機器改成 &lt;code&gt;zybo-linux-bd-zynq7&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;MACHINE ??= &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;zybo-linux-bd-zynq7&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
都改好了後，就可以開始準備編譯了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgccf6a4b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgccf6a4b&quot;&gt;編譯 core-image-minimal&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgccf6a4b&quot;&gt;
&lt;p&gt;
Yocto 下有許多預設的 image 可以進行編譯，其中最基本的 image 就是 &lt;code&gt;core-image-minimal&lt;/code&gt; 了，裡面只會包含一些幾本的組件而已，我們可以透過他來確認我們編譯出來的 rootfs 是否能用。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky/build $ bitbake core-image-minimal
Parsing recipes: 100% |#######################################################################################################################| Time: 00:01:03
Parsing of 883 .bb files complete (0 cached, 883 parsed). 1313 targets, 71 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION        = &quot;1.30.0&quot;
BUILD_SYS         = &quot;x86_64-linux&quot;
NATIVELSBSTRING   = &quot;Gentoo-2.3&quot;
TARGET_SYS        = &quot;arm-poky-linux-gnueabi&quot;
MACHINE           = &quot;zybo-linux-bd-zynq7&quot;
DISTRO            = &quot;poky&quot;
DISTRO_VERSION    = &quot;2.1.1&quot;
TUNE_FEATURES     = &quot;arm armv7a vfp thumb neon       callconvention-hard       cortexa9&quot;
TARGET_FPU        = &quot;hard&quot;
meta
meta-poky
meta-yocto-bsp    = &quot;krogoth:aad7166704021d82ad3a5ec468552f8f10360d41&quot;
meta-xilinx       = &quot;krogoth:dcd1c218f943c3657b138cb05012c90c65f32a35&quot;

NOTE: Fetching uninative binary shim from http://downloads.yoctoproject.org/releases/uninative/1.0.1/x86_64-nativesdk-libc.tar.bz2;sha256sum=acf1e44a0ac2e855e81da6426197d36358bf7b4e88e552ef933128498c8910f8
NOTE: Preparing RunQueue
NOTE: Executing SetScene Tasks
NOTE: Executing RunQueue Tasks
Currently 4 running tasks (78 of 2127):
0: gcc-source-5.3.0-5.3.0-r0 do_unpack (pid 10582)
1: m4-native-1.4.17-r0 do_configure (pid 14097)
2: binutils-cross-arm-2.26-r0 do_unpack (pid 14533)
3: glibc-initial-2.23-r0 do_fetch (pid 15428)
&lt;/pre&gt;

&lt;p&gt;
接下來因為這是第一次編譯，Yocto 需要下載原始碼以及進行編譯，會花很多時間，所以這時候可以去睡個覺或是看看書等它編譯完成，第二次編譯後會因為有快取機制 (cache)，就不須要花這樣多的時間來進行編譯囉~
&lt;/p&gt;

&lt;p&gt;
編譯好了以後，我們切入到 &lt;code&gt;tmp/deploy/images/zybo-linux-bd-zynq7/&lt;/code&gt; 資料夾，裡面有的就是我們需要的檔案
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky/build $ ls tmp/deploy/images/zybo-linux-bd-zynq7/
bitstream                                                                    modules--4.4-xilinx+git0+89cc643aff-r0-zybo-linux-bd-zynq7-20160910030958.tgz
bitstream-+gitAUTOINC+63ca49fe02-r0.bit                                      modules-zybo-linux-bd-zynq7.tgz
boot.bin                                                                     README_-_DO_NOT_DELETE_FILES_IN_THIS_DIRECTORY.txt
boot.bin-zybo-linux-bd-zynq7                                                 u-boot-dtb.img
boot.bin-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0               u-boot.elf
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.cpio            u-boot-zybo-linux-bd-zynq7.elf
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.cpio.gz.u-boot  u-boot-zybo-linux-bd-zynq7.img
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.manifest        u-boot-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0.elf
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.tar.gz          u-boot-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0.img
core-image-minimal-zybo-linux-bd-zynq7.cpio                                  uImage
core-image-minimal-zybo-linux-bd-zynq7.cpio.gz.u-boot                        uImage--4.4-xilinx+git0+89cc643aff-r0-zybo-linux-bd-zynq7-20160910030958.bin
core-image-minimal-zybo-linux-bd-zynq7.manifest                              uImage-zybo-linux-bd-zynq7.bin
core-image-minimal-zybo-linux-bd-zynq7.tar.gz                                zybo-linux-bd-zynq7.dtb
download.bit
&lt;/pre&gt;

&lt;p&gt;
我們將以下這些檔案複製到 SD 卡的第一個分區
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
bitstream  boot.bin  u-boot-dtb.img  uImage  zybo-linux-bd-zynq7.dtb
&lt;/pre&gt;

&lt;p&gt;
接下來，在 SD 卡的第一個分割區 (fat32) 建立 &lt;code&gt;uEnv.txt&lt;/code&gt; 檔案，用來告訴 u-boot 開機的方式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;kernel_image&lt;/span&gt;=uImage
&lt;span style=&quot;color: #aaccff;&quot;&gt;devicetree_image&lt;/span&gt;=zybo-linux-bd-zynq7.dtb
&lt;span style=&quot;color: #aaccff;&quot;&gt;bootargs&lt;/span&gt;=&lt;span style=&quot;color: #aaccff;&quot;&gt;root&lt;/span&gt;=/dev/mmcblk0p2 rw rootwait
&lt;span style=&quot;color: #aaccff;&quot;&gt;uenvcmd&lt;/span&gt;=fatload mmc 0 0x3000000 $&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;kernel_image&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; &amp;amp;&amp;amp; fatload mmc 0 0x2A00000 $&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;devicetree_image&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; &amp;amp;&amp;amp; bootm 0x3000000 - 0x2A00000
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，將 &lt;code&gt;core-image-minimal-zybo-linux-bd-zynq7.tar.gz&lt;/code&gt; 解壓縮到 SD 卡的第二個分割區
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp/sdc2 $ sudo tar xvf ~/poky/build/tmp/deploy/images/zybo-linux-bd-zynq7/core-image-minimal-zybo-linux-bd-zynq7.tar.gz
&lt;/pre&gt;

&lt;p&gt;
如果你需要 kernel modules 的話，將 &lt;code&gt;modules-zybo-linux-bd-zynq7.tgz&lt;/code&gt; 解壓到 SD 卡的第二個分割區
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp/sdc2 $ sudo tar xvf ~/poky/build/tmp/deploy/images/zybo-linux-bd-zynq7/modules-zybo-linux-bd-zynq7.tgz
&lt;/pre&gt;

&lt;p&gt;
至此，我們 SD 卡開機的準備已經完成!!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org357a9e3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org357a9e3&quot;&gt;測試開機與結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org357a9e3&quot;&gt;
&lt;p&gt;
是時候來測試結果了，要注意到你的 Zybo Board 的 &lt;code&gt;JP5&lt;/code&gt; 要設定成下面這樣，這樣給電時，Zynq 才會讀取 SD 卡上面的 u-boot 並將位元流 (bitstream) 燒錄到 FPGA 中。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/c3e8558e/sdboot.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
插入剛剛建立好的 SD 卡，並提供電源後，我們可以使用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等，啟動它並開啟 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 後，設定 baudrate 為 &lt;code&gt;115200&lt;/code&gt; ，就可以看到開機並進入到 rootfs 囉。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/c3e8558e/console.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd50df78&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd50df78&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd50df78&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;https://github.com/Xilinx/meta-xilinx/blob/master/README.booting.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Booting meta-xilinx boards&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://www.yoctoproject.org/docs/2.0/ref-manual/ref-manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/zynq_linux_simple/&quot;&gt;zybo board 開發記錄: 執行 Linux 作業系統&lt;/a&gt; 一文中，我們提到了如何自行編譯 u-boot、Linux kernel、busybox 來讓 Zybo Board 可以開機進到 SD 卡上的 Linux 系統。這一次，我們要來談談怎樣使用 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 來建立 Zybo board 的 Linux 系統。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 是近年來各大 SoC 商以及開發板商皆參與的 Linux 系統構件工具，透過 Yocto Project 的協助，使用者可以針對自己的需求構件想要的映像檔(image)或是 Root File System，和 Yocto 類似功能的工具則是 &lt;a href=&quot;https://buildroot.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;buildroot&lt;/a&gt; 。
&lt;/p&gt;

&lt;p&gt;
本文將以 &lt;a href=&quot;http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zybo Board&lt;/a&gt; 作為目標開發板，示範如何使用 Yocto 來構件他的系統。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org71d75bf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org71d75bf&quot;&gt;預先準備&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org71d75bf&quot;&gt;
&lt;p&gt;
根據你使用的 Linux 發行板的不同，你需要安裝一些套件，這邊列出一些發行板的資訊，詳細請參考 &lt;a href=&quot;http://www.yoctoproject.org/docs/2.0/ref-manual/ref-manual.html#intro-requirements&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt;
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Debian/Ubuntu
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@debian ~ $ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Fedora
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@fedora ~ $ sudo dnf install gawk make wget tar bzip2 gzip python unzip perl patch diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue socat findutils which
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
Gentoo
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ emerge -v dev-vcs/git dev-util/diffstat app-arch/unzip sys-apps/texinfo app-admin/chrpath media-libs/libsdl2 sys-apps/iproute2 x11-terms/xterm net-nds/rpcbind
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你和我一樣，使用 Gentoo Linux 的話，在 Gentoo Linux 下要確認你使用的是 Python 2.7
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ eselect python set python2.7

eselect python list
Available Python interpreters:
  &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;   python2.7 *
  &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;   python3.2
  &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;   python3.3

python
Python 2.7.5 &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;default, Oct 19 2013, 22:52:27&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc54328c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc54328c&quot;&gt;格式化 MicroSD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc54328c&quot;&gt;
&lt;p&gt;
在這次的開發中，我們要設定 MicroSD 卡片成兩個分區，第一個是 &lt;code&gt;fat32&lt;/code&gt; 格式，第二個則使用 &lt;code&gt;ext4&lt;/code&gt; 格式，若不會使用 &lt;code&gt;fdisk&lt;/code&gt; 命令的話，可以透過 &lt;code&gt;gparted&lt;/code&gt; 來進行格式化，以下是我格式化卡片的範例 (8GB 卡片)。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/c3e8558e/format.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc1f348f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc1f348f&quot;&gt;下載 Poky&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc1f348f&quot;&gt;
&lt;p&gt;
在開始用 &lt;a href=&quot;https://www.yoctoproject.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project&lt;/a&gt; 之前，我們需要下載 Poky, Poky 是 Yocto 的構建系統，基本上我們會用到的東西都會在 poky 資料夾內
&lt;/p&gt;

&lt;p&gt;
注意到我們這邊切換到 &lt;code&gt;krogoth&lt;/code&gt; 這個分支，Yocto 裡面不同的分支(branch) 代表了不同版本。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ git clone git://git.yoctoproject.org/poky -b krogoth
&lt;/pre&gt;

&lt;p&gt;
好了後，進入到 poky 資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky $ cd poky
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0870ee3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0870ee3&quot;&gt;下載 meta-xilinx&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0870ee3&quot;&gt;
&lt;p&gt;
Yocto 對於不同的 SoC 廠商，會有提供不同的 layer 來對特定的開源程式加上合適的 patch，或是添加不同 SoC 廠各自需要的韌體(firmware)，以及各開發板特定的設定。
在 Xilinx 平台上，我們需要下載 &lt;code&gt;meta-xilinx&lt;/code&gt; ，我們需要的 kernel 以及 Zybo board 的設定資訊都在裡面。
&lt;/p&gt;

&lt;p&gt;
這邊一樣切換到 &lt;code&gt;krogoth&lt;/code&gt; 這個分支(branch)
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky $ git clone git://github.com/Xilinx/meta-xilinx -b krogoth
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org76c4f2d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org76c4f2d&quot;&gt;切換到編譯用目錄&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org76c4f2d&quot;&gt;
&lt;p&gt;
接下來，我們將透過 &lt;code&gt;source&lt;/code&gt; 指令暫時修改當前 shell 的環境變數，並切換到 &lt;code&gt;build&lt;/code&gt; 資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky $ source oe-init-build-env build
You had no conf/local.conf file. This configuration file has therefore been
created for you with some default values. You may wish to edit it to, for
example, select a different MACHINE (target hardware). See conf/local.conf
for more information as common configuration options are commented.

You had no conf/bblayers.conf file. This configuration file has therefore been
created for you with some default values. To add additional metadata layers
into your configuration please add entries to conf/bblayers.conf.

The Yocto Project has extensive documentation about OE including a reference
manual which can be found at:
    http://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    http://www.openembedded.org/


### Shell environment set up for builds. ###

You can now run &#39;bitbake &amp;lt;target&amp;gt;&#39;

Common targets are:
    core-image-minimal
    core-image-sato
    meta-toolchain
    meta-ide-support

You can also run generated qemu images with a command like &#39;runqemu qemux86&#39;
&lt;/pre&gt;

&lt;p&gt;
預設的目標機器是 &lt;code&gt;qemux86&lt;/code&gt; 因此我們需要修改一下，不過先看一下當前目錄結構
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky/build $ tree  .
. &amp;lt;b&amp;gt;
└── conf &amp;lt;b&amp;gt;
    ├── bblayers.conf
    ├── local.conf
    └── templateconf.cfg

1 directory, 3 files
&lt;/pre&gt;

&lt;p&gt;
我們首先要修改 &lt;code&gt;conf/bblayers.conf&lt;/code&gt; ，在上面添加我們剛剛下載的 &lt;code&gt;meta-xilinx&lt;/code&gt; ，修改完會像這樣
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;changes incompatibly&lt;/span&gt;
POKY_BBLAYERS_CONF_VERSION = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;2&quot;&lt;/span&gt;

BBPATH = &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;${TOPDIR}&quot;&lt;/span&gt;
BBFILES ?= &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;&quot;&lt;/span&gt;

BBLAYERS ?= &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot; \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta-poky \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta-yocto-bsp \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  /home/coldnew/poky/meta-xilinx \&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;  &quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來，修改 &lt;code&gt;conf/local.conf&lt;/code&gt; ，這份檔案可以用來設定要編譯的目標機器，在這邊，我們將目標機器改成 &lt;code&gt;zybo-linux-bd-zynq7&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;MACHINE ??= &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;zybo-linux-bd-zynq7&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
都改好了後，就可以開始準備編譯了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgccf6a4b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgccf6a4b&quot;&gt;編譯 core-image-minimal&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgccf6a4b&quot;&gt;
&lt;p&gt;
Yocto 下有許多預設的 image 可以進行編譯，其中最基本的 image 就是 &lt;code&gt;core-image-minimal&lt;/code&gt; 了，裡面只會包含一些幾本的組件而已，我們可以透過他來確認我們編譯出來的 rootfs 是否能用。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky/build $ bitbake core-image-minimal
Parsing recipes: 100% |#######################################################################################################################| Time: 00:01:03
Parsing of 883 .bb files complete (0 cached, 883 parsed). 1313 targets, 71 skipped, 0 masked, 0 errors.
NOTE: Resolving any missing task queue dependencies

Build Configuration:
BB_VERSION        = &quot;1.30.0&quot;
BUILD_SYS         = &quot;x86_64-linux&quot;
NATIVELSBSTRING   = &quot;Gentoo-2.3&quot;
TARGET_SYS        = &quot;arm-poky-linux-gnueabi&quot;
MACHINE           = &quot;zybo-linux-bd-zynq7&quot;
DISTRO            = &quot;poky&quot;
DISTRO_VERSION    = &quot;2.1.1&quot;
TUNE_FEATURES     = &quot;arm armv7a vfp thumb neon       callconvention-hard       cortexa9&quot;
TARGET_FPU        = &quot;hard&quot;
meta
meta-poky
meta-yocto-bsp    = &quot;krogoth:aad7166704021d82ad3a5ec468552f8f10360d41&quot;
meta-xilinx       = &quot;krogoth:dcd1c218f943c3657b138cb05012c90c65f32a35&quot;

NOTE: Fetching uninative binary shim from http://downloads.yoctoproject.org/releases/uninative/1.0.1/x86_64-nativesdk-libc.tar.bz2;sha256sum=acf1e44a0ac2e855e81da6426197d36358bf7b4e88e552ef933128498c8910f8
NOTE: Preparing RunQueue
NOTE: Executing SetScene Tasks
NOTE: Executing RunQueue Tasks
Currently 4 running tasks (78 of 2127):
0: gcc-source-5.3.0-5.3.0-r0 do_unpack (pid 10582)
1: m4-native-1.4.17-r0 do_configure (pid 14097)
2: binutils-cross-arm-2.26-r0 do_unpack (pid 14533)
3: glibc-initial-2.23-r0 do_fetch (pid 15428)
&lt;/pre&gt;

&lt;p&gt;
接下來因為這是第一次編譯，Yocto 需要下載原始碼以及進行編譯，會花很多時間，所以這時候可以去睡個覺或是看看書等它編譯完成，第二次編譯後會因為有快取機制 (cache)，就不須要花這樣多的時間來進行編譯囉~
&lt;/p&gt;

&lt;p&gt;
編譯好了以後，我們切入到 &lt;code&gt;tmp/deploy/images/zybo-linux-bd-zynq7/&lt;/code&gt; 資料夾，裡面有的就是我們需要的檔案
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/poky/build $ ls tmp/deploy/images/zybo-linux-bd-zynq7/
bitstream                                                                    modules--4.4-xilinx+git0+89cc643aff-r0-zybo-linux-bd-zynq7-20160910030958.tgz
bitstream-+gitAUTOINC+63ca49fe02-r0.bit                                      modules-zybo-linux-bd-zynq7.tgz
boot.bin                                                                     README_-_DO_NOT_DELETE_FILES_IN_THIS_DIRECTORY.txt
boot.bin-zybo-linux-bd-zynq7                                                 u-boot-dtb.img
boot.bin-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0               u-boot.elf
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.cpio            u-boot-zybo-linux-bd-zynq7.elf
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.cpio.gz.u-boot  u-boot-zybo-linux-bd-zynq7.img
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.manifest        u-boot-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0.elf
core-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.tar.gz          u-boot-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0.img
core-image-minimal-zybo-linux-bd-zynq7.cpio                                  uImage
core-image-minimal-zybo-linux-bd-zynq7.cpio.gz.u-boot                        uImage--4.4-xilinx+git0+89cc643aff-r0-zybo-linux-bd-zynq7-20160910030958.bin
core-image-minimal-zybo-linux-bd-zynq7.manifest                              uImage-zybo-linux-bd-zynq7.bin
core-image-minimal-zybo-linux-bd-zynq7.tar.gz                                zybo-linux-bd-zynq7.dtb
download.bit
&lt;/pre&gt;

&lt;p&gt;
我們將以下這些檔案複製到 SD 卡的第一個分區
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
bitstream  boot.bin  u-boot-dtb.img  uImage  zybo-linux-bd-zynq7.dtb
&lt;/pre&gt;

&lt;p&gt;
接下來，在 SD 卡的第一個分割區 (fat32) 建立 &lt;code&gt;uEnv.txt&lt;/code&gt; 檔案，用來告訴 u-boot 開機的方式
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;kernel_image&lt;/span&gt;=uImage
&lt;span style=&quot;color: #aaccff;&quot;&gt;devicetree_image&lt;/span&gt;=zybo-linux-bd-zynq7.dtb
&lt;span style=&quot;color: #aaccff;&quot;&gt;bootargs&lt;/span&gt;=&lt;span style=&quot;color: #aaccff;&quot;&gt;root&lt;/span&gt;=/dev/mmcblk0p2 rw rootwait
&lt;span style=&quot;color: #aaccff;&quot;&gt;uenvcmd&lt;/span&gt;=fatload mmc 0 0x3000000 $&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;kernel_image&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; &amp;amp;&amp;amp; fatload mmc 0 0x2A00000 $&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color: #aaccff;&quot;&gt;devicetree_image&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt; &amp;amp;&amp;amp; bootm 0x3000000 - 0x2A00000
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，將 &lt;code&gt;core-image-minimal-zybo-linux-bd-zynq7.tar.gz&lt;/code&gt; 解壓縮到 SD 卡的第二個分割區
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp/sdc2 $ sudo tar xvf ~/poky/build/tmp/deploy/images/zybo-linux-bd-zynq7/core-image-minimal-zybo-linux-bd-zynq7.tar.gz
&lt;/pre&gt;

&lt;p&gt;
如果你需要 kernel modules 的話，將 &lt;code&gt;modules-zybo-linux-bd-zynq7.tgz&lt;/code&gt; 解壓到 SD 卡的第二個分割區
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp/sdc2 $ sudo tar xvf ~/poky/build/tmp/deploy/images/zybo-linux-bd-zynq7/modules-zybo-linux-bd-zynq7.tgz
&lt;/pre&gt;

&lt;p&gt;
至此，我們 SD 卡開機的準備已經完成!!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org357a9e3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org357a9e3&quot;&gt;測試開機與結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org357a9e3&quot;&gt;
&lt;p&gt;
是時候來測試結果了，要注意到你的 Zybo Board 的 &lt;code&gt;JP5&lt;/code&gt; 要設定成下面這樣，這樣給電時，Zynq 才會讀取 SD 卡上面的 u-boot 並將位元流 (bitstream) 燒錄到 FPGA 中。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/c3e8558e/sdboot.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
插入剛剛建立好的 SD 卡，並提供電源後，我們可以使用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等，啟動它並開啟 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 後，設定 baudrate 為 &lt;code&gt;115200&lt;/code&gt; ，就可以看到開機並進入到 rootfs 囉。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/c3e8558e/console.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd50df78&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd50df78&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd50df78&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;https://github.com/Xilinx/meta-xilinx/blob/master/README.booting.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Booting meta-xilinx boards&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://www.yoctoproject.org/docs/2.0/ref-manual/ref-manual.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yocto Project Reference Manual&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/c3e8558e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 執行 Linux 作業系統</title>
      <link>https://coldnew.github.io/d9dfdd56/</link>
      <guid>https://coldnew.github.io/d9dfdd56/</guid>
      <pubDate>Sun, 17 Jul 2016 11:45:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/zynq_led_flash/&quot;&gt;zybo board 開發記錄: Zynq 與 LED 閃爍控制&lt;/a&gt; 一文中我們談到了如何透過 C 語言撰寫獨立的程式，讓它控制 Zynq 的處理器系統 (Processing System, PS) 去閃爍 LED 的亮暗。既然 Zynq 的處理器系統 (Processing System, PS) 使用的是 ARM Cortex-A9 的處理器，那當然也可以讓我們跑 Linux 在 Zybo Board 上。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
本文將簡述如何自行編譯 u-boot 以及 Linux Kernel，並搭配 Busybox 製作簡單的 RootFS 執行於 Zybo Board 上。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org4051b50&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4051b50&quot;&gt;開發目標&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4051b50&quot;&gt;
&lt;p&gt;
在這次的開發中，我們要編譯 u-boot、Linux，並使用 Busybox 製作簡單的 Rootfs 後，透過製作 SD 卡來讓 Zybo Board 透過 SD 卡開機。
&lt;/p&gt;

&lt;p&gt;
要注意到的是，由於我們要透過 SD 卡開機進入到 Linux 系統，因此我們要透過 &lt;code&gt;JP5&lt;/code&gt; 去更改開機模式。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/zybo_config_pins.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2cb6c87&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2cb6c87&quot;&gt;了解開機流程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2cb6c87&quot;&gt;
&lt;p&gt;
既然我們要讓 Zybo board 執行 Linux 系統，就要先來了解一下開機流程，才知道我們大概需要準備哪些東西。從  &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_1/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial - A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt; 可以看到 Zynq-7000 執行 Linux 系統的開機流程圖。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/bootp.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
也就是說，當開始提供電源給 Zynq 處理器系統 (Processing System, PS) 並完成重置(reset) 後，Zynq 內建的 Boot ROM 會去載入 &lt;code&gt;第一階段開機程式 (First Stage Boot Loader, FSBL)&lt;/code&gt; ，接著載入 &lt;code&gt;位元流 (bitstream)&lt;/code&gt; 去初始化整個 &lt;code&gt;可程式邏輯(Programmable Logic, PL)&lt;/code&gt; 。 完成後，接下來就是透過 U-Boot 去載入 Linux Kernel、Device Tree 以及 Root File System。
&lt;/p&gt;

&lt;p&gt;
了解了這個，我們就知道我們大概要準備哪些東西了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdeaa1ec&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdeaa1ec&quot;&gt;設定好環境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdeaa1ec&quot;&gt;
&lt;p&gt;
在安裝玩 Vivado 與 Xilinx SDK 後，實際上包含 Zynq 在用的 ARM toolchain 亦同時被安裝到系統中，我們只要使用 &lt;code&gt;source&lt;/code&gt; 命令即可讓當前的環境知道 xilinx-arm toolchain 的路徑。這邊以 Viavdo 2016.2 作為範例。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ source /opt/Xilinx/Vivado/2016.2/settings64.sh
&lt;/pre&gt;

&lt;p&gt;
這樣就可以獲得 arm-xilinx-* toolchain 的命令，實際上有哪些呢? 輸入個 arm-xilinx- 按下 TAB 看看
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ arm-xilinx-
arm-xilinx-eabi-addr2line            arm-xilinx-eabi-gcc-4.9.2            arm-xilinx-eabi-objcopy
arm-xilinx-linux-gnueabi-ar          arm-xilinx-linux-gnueabi-gcc-ar      arm-xilinx-linux-gnueabi-objdump
arm-xilinx-eabi-ar                   arm-xilinx-eabi-gcc-ar               arm-xilinx-eabi-objdump
arm-xilinx-linux-gnueabi-as          arm-xilinx-linux-gnueabi-gcc-nm      arm-xilinx-linux-gnueabi-ranlib
arm-xilinx-eabi-as                   arm-xilinx-eabi-gcc-nm               arm-xilinx-eabi-ranlib
arm-xilinx-linux-gnueabi-c++         arm-xilinx-linux-gnueabi-gcc-ranlib  arm-xilinx-linux-gnueabi-readelf
arm-xilinx-eabi-c++                  arm-xilinx-eabi-gcc-ranlib           arm-xilinx-eabi-readelf
arm-xilinx-linux-gnueabi-c++filt     arm-xilinx-linux-gnueabi-gcov        arm-xilinx-linux-gnueabi-size
arm-xilinx-eabi-c++filt              arm-xilinx-eabi-gcov                 arm-xilinx-eabi-size
arm-xilinx-linux-gnueabi-cpp         arm-xilinx-linux-gnueabi-gdb         arm-xilinx-linux-gnueabi-sprite
arm-xilinx-eabi-cpp                  arm-xilinx-eabi-gdb                  arm-xilinx-eabi-sprite
arm-xilinx-linux-gnueabi-elfedit     arm-xilinx-linux-gnueabi-gprof       arm-xilinx-linux-gnueabi-strings
arm-xilinx-eabi-elfedit              arm-xilinx-eabi-gprof                arm-xilinx-eabi-strings
arm-xilinx-linux-gnueabi-g++         arm-xilinx-linux-gnueabi-ld          arm-xilinx-linux-gnueabi-strip
arm-xilinx-eabi-g++                  arm-xilinx-eabi-ld                   arm-xilinx-eabi-strip
arm-xilinx-linux-gnueabi-gcc         arm-xilinx-linux-gnueabi-nm
arm-xilinx-eabi-gcc                  arm-xilinx-eabi-nm                   arm-xilinx-linux-gnueabi-addr2line
arm-xilinx-linux-gnueabi-gcc-4.9.2   arm-xilinx-linux-gnueabi-objcopy
&lt;/pre&gt;

&lt;p&gt;
如果你系統上已經有其他的 ARM toolchain 的話，可以考慮跳過這一步驟，接下來要格式化 Micro SD 卡。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgafc80e9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgafc80e9&quot;&gt;格式化 MicroSD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgafc80e9&quot;&gt;
&lt;p&gt;
在這次的開發中，我們要設定 MicroSD 卡片成兩個分區，第一個是 &lt;code&gt;fat32&lt;/code&gt; 格式，第二個則使用 &lt;code&gt;ext4&lt;/code&gt; 格式，若不會使用 &lt;code&gt;fdisk&lt;/code&gt; 命令的話，可以透過 &lt;code&gt;gparted&lt;/code&gt; 來進行格式化，以下是我格式化卡片的範例 (8GB 卡片)。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/format.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
(實際上在本文的範例中，只會用到第一個分區，第二個分區是為了往後文章要開機到大一點的 rootfs 準備的。)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd8ed254&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd8ed254&quot;&gt;編譯 u-boot&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd8ed254&quot;&gt;
&lt;p&gt;
我們首先去 &lt;a href=&quot;https://github.com/DigilentInc/u-boot-Digilent-Dev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 下載 DigilentInc 加入 zybo board 後的 u-boot 版本，要注意這邊要選擇 &lt;code&gt;master-next&lt;/code&gt; 分支。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/DigilentInc/u-boot-Digilent-Dev.git -b master-next
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完成後進入到該資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ cd u-boot-Digilent-Dev
&lt;/pre&gt;

&lt;p&gt;
編譯 u-boot，記得指派編譯目標為 &lt;code&gt;zynq_zybo_config&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/u-boot-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make zynq_zybo_config
coldnew@gentoo ~/u-boot-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
編譯完成後，注意一下 &lt;code&gt;u-boot&lt;/code&gt; 這個檔案，他就是我們等等要用到的 u-boot 執行檔，不過由於 Xilinx Tool 要找有 .elf 副檔名的檔案，因此我們把它複製成 &lt;code&gt;u-boot.elf&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/u-boot-Digilent-Dev $ cp u-boot u-boot.elf
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf853f05&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf853f05&quot;&gt;編譯 Linux kernel&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf853f05&quot;&gt;
&lt;p&gt;
編譯好 u-boot 後，接下來就是編譯 Linux Kernel 了，我們一樣選擇 DigilentInc 加入 zybo board 後的 Linux Kernel 版本，記得要選 &lt;code&gt;master-next&lt;/code&gt; 分支。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/DigilentInc/Linux-Digilent-Dev.git -b master-next
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著，當然就是編譯了，不過在這之前請先確定你有裝 &lt;code&gt;u-boot-tools&lt;/code&gt; 這套件，我們需要裡面的 mkimage 指令，Gentoo Linux 可以直接用以下命令來安裝。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ sudo emerge dev-embedded/u-boot-tools
&lt;/pre&gt;

&lt;p&gt;
完成後進入 Linux Kernel 資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ cd Linux-Digilent-Dev
&lt;/pre&gt;

&lt;p&gt;
編譯我們需要的 &lt;code&gt;uImage&lt;/code&gt; 文件，記得要指定 config 為 &lt;code&gt;xilinx_zynq_defconfig&lt;/code&gt; 以及設定 &lt;code&gt;UIMAGE_LOADADDR&lt;/code&gt; 為 &lt;code&gt;0x8000&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make xilinx_zynq_defconfig
coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make
coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make &lt;span style=&quot;color: #aaccff;&quot;&gt;UIMAGE_LOADADDR&lt;/span&gt;=0x8000 uImage
coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make zynq-zybo.dtb
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
編譯完後，我們會需要 &lt;code&gt;arch/arm/boot/uImage&lt;/code&gt; 以及 &lt;code&gt;arch/arm/boot/dts/zynq-zybo.dtb&lt;/code&gt; 這兩個檔案，後者就是 device tree 編譯出來的資料檔。
&lt;/p&gt;

&lt;p&gt;
由於放入到 SD 卡上的 device tree 檔案名稱為 &lt;code&gt;devicetree.dtb&lt;/code&gt; ，因此這邊將 &lt;code&gt;zynq-zybo.dtb&lt;/code&gt; 改一下名。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/Linux-Digilent-Dev $ cp arch/arm/boot/dts/zynq-zybo.dtb devicetree.dtb
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你想手動修改 Device Tree 並再重新編譯的話，也可以這樣去產生我們要的 &lt;code&gt;devicetree.dtb&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/Linux-Digilent-Dev $ ./scripts/dtc/dtc -I dts -O dtb -o devicetree.dtb arch/arm/boot/dts/zynq-zybo.dts
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org270107b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org270107b&quot;&gt;編譯 BusyBox&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org270107b&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.busybox.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Busybox&lt;/a&gt; 是一個非常有趣的程式，舉凡我們在 Linux 下最常用的命令如 ls、cd 等到 sed、vi 他都具有相對應的簡單實現，此外，這些命令實際上都只是一個軟連結 (symlink) 連結到名為 busybox 的執行檔，也就是說，如果我們將 busybox 進行靜態編譯 (static link)，則製作出來的系統整體大小大約為 2 MB (kernel) + 1.4 MB (busybox)，而這個系統卻又可以具有許多 UN*X 下的常用命令，也因此 busybox 很常用於空間有限的系統。
&lt;/p&gt;

&lt;p&gt;
我們在這個開發過程中，由於只是驗證執行 Linux 系統的功能，因此選用 Busybox 來作為我們的 rootfs。
&lt;/p&gt;

&lt;p&gt;
首先先下載 Busybox 的原始碼，這裡選用 &lt;code&gt;1_25_stable&lt;/code&gt; 這個穩定分支
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone git://git.busybox.net/busybox -b 1_25_stable
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
進行我們自己的設定
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make menuconfig
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
在進行設定時有以下幾點要確實注意，我們要將 busybox 編譯為靜態連結，並且增加 &lt;code&gt;init&lt;/code&gt; 功能，主要設定如下:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Busybox Settings  ---&amp;gt;
        Build Options  ---&amp;gt;
               [*] Build BusyBox as a static binary (no shared libs)

Init Utilities  ---&amp;gt;
        [*] init

Login/Password Management Utilities  ---&amp;gt;
        [*] getty

Shells  ---&amp;gt;
        [*] ash
&lt;/pre&gt;

&lt;p&gt;
設定完成後開始進行編譯
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
編譯完成後透過 &lt;code&gt;make install&lt;/code&gt; 命令，會將編譯出來的 busybox 與軟連結(symlink)產生在 &lt;code&gt;_install&lt;/code&gt; 資料夾內
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@Rosia ~/busybox $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立一些缺少的資料夾 (/dev、/sys &amp;#x2026;etc)
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox $ cd _install &amp;amp;&amp;amp; mkdir -p proc sys dev etc/init.d root
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立 &lt;code&gt;etc/init.d/rcS&lt;/code&gt; 作為啟動腳本，並添加以下內容
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ vim etc/init.d/rcS

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/bin/sh&lt;/span&gt;
mount -t proc none /proc
mount -t sysfs none /sys
/sbin/mdev -s
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
將 &lt;code&gt;etc/init.d/rcS&lt;/code&gt; 加入可執行權限
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/busybox/_install $ chmod +x etc/init.d/rcS
&lt;/pre&gt;

&lt;p&gt;
建立 &lt;code&gt;etc/inittab&lt;/code&gt; ，這會讓我們可以透過 UART 登入 zybo board
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ vim etc/inittab

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Init script&lt;/span&gt;
::sysinit:/etc/init.d/rcS
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Start shell on the serial ports&lt;/span&gt;
::respawn:/sbin/getty -L ttyPS0 115200 vt100
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;What to do when restarting the init process&lt;/span&gt;
::restart:/sbin/init
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;What to do before rebooting&lt;/span&gt;
::shutdown:/bin/umount -a -r
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
設定預設的 &lt;code&gt;/etc/passwd&lt;/code&gt; 檔案，我們要讓 root 用戶登入時不用輸入密碼
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ vim etc/passwd

root::0:0:root:/root:/bin/sh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立 &lt;code&gt;/init&lt;/code&gt; 並軟連結到 &lt;code&gt;/sbin/init&lt;/code&gt; ，避免 Linux Kernel 開機時找不到 rootfs 的 init。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ ln -s /sbin/init init
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來，由於這次我們只是要開機到 ramdisk 上的 rootfs, 因此將 busybox 做出的 rootfs 打包成 cpio 格式。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/busybox/_install $ find . | sudo cpio -H newc -o | gzip -9 &amp;gt; ../uramdisk.cpio.gz
&lt;/pre&gt;

&lt;p&gt;
再透過 &lt;code&gt;mkimage&lt;/code&gt; 將這個 &lt;code&gt;uramdisk.cpio.gz&lt;/code&gt; 檔案轉成 uboot 用的 &lt;code&gt;uramdisk.image.gz&lt;/code&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/busybox/_install $  mkimage -A arm -T ramdisk -C gzip -d ../uramdisk.cpio.gz ../uramdisk.image.gz
Image Name:
Created:      Sun Jul 17 19:02:08 2016
Image Type:   ARM Linux RAMDisk Image (gzip compressed)
Data Size:    1042106 Bytes = 1017.68 kB = 0.99 MB
Load Address: 00000000
Entry Point:  00000000
&lt;/pre&gt;

&lt;p&gt;
在這邊的這個 &lt;code&gt;uramdisk.image.gz&lt;/code&gt; 就是我們開機會進入到的 rootfs，也是我們等等要放到 SD 卡第一個磁區的檔案。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org00e6c72&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org00e6c72&quot;&gt;編譯位元流 (bitstream)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org00e6c72&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/zybo-board/linux_bd/&quot;&gt;zybo board 開發記錄: 升級 Digilent 提供的設計檔&lt;/a&gt; 一文中，我們提到了怎樣升級 &lt;a href=&quot;http://store.digilentinc.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Digilent&lt;/a&gt; 提供的預先定義好接腳的設定檔 (zybo_base_system) ，這次的專案，我們就直接用這個設定檔案來進行 Linux 開機的動作。
&lt;/p&gt;

&lt;p&gt;
首先你必須根據該篇文章，將你的 Zybo board 設定檔案升級到你用的 Vivado 版本，完成後我們重新建立一個乾淨的專案。
&lt;/p&gt;

&lt;p&gt;
先來把先前生成的舊專案清掉:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ sh cleanup.sh
&lt;/pre&gt;

&lt;p&gt;
接下來用 Vivado 2016.2 重新生出新的專案 ~
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ /opt/Xilinx/Vivado/2016.2/bin/vivado -mode batch -source create_project.tcl
&lt;/pre&gt;

&lt;p&gt;
完成後，會看到 &lt;code&gt;ZYBO/Projects/linux_bd/proj&lt;/code&gt; 目錄變成這樣:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ tree -L 1
. &amp;lt;b&amp;gt;
├── cleanup.cmd
├── cleanup.sh
├── create_project.tcl
├── ip_upgrade.log &amp;lt;g&amp;gt;
├── linux_bd.cache &amp;lt;b&amp;gt;
├── linux_bd.hw &amp;lt;b&amp;gt;
├── linux_bd.ip_user_files &amp;lt;b&amp;gt;
├── linux_bd.sim &amp;lt;b&amp;gt;
├── linux_bd.srcs &amp;lt;b&amp;gt;
├── linux_bd.xpr
├── vivado.jou
└── vivado.log &amp;lt;g&amp;gt;

5 directories, 7 files
&lt;/pre&gt;

&lt;p&gt;
我們使用 Vivado 打開 &lt;code&gt;linux_bd.xpr&lt;/code&gt; 這個專案。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/oprj.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你有興趣看他生出來的 Block Design 是怎樣的，也可以切到 Block Design 那頁看看
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/linux_bd.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們直接點選 &lt;code&gt;Program and Debug -&amp;gt; Generate Bitstream&lt;/code&gt; 產生我們要的位元流 (bitstream)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ge.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfd718aa&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfd718aa&quot;&gt;建立 FSBL&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfd718aa&quot;&gt;
&lt;p&gt;
到此，我們除了 &lt;code&gt;第一階段開機程式 (First Stage Boot Loader, FSBL)&lt;/code&gt; 外，其他的程式都已經編譯出執行檔了，讓我們來處理 FSBL 吧。
&lt;/p&gt;

&lt;p&gt;
首先點選 &lt;code&gt;File -&amp;gt; Export -&amp;gt; Export hardware&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/e1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
記得要勾選 &lt;code&gt;Include bitstream&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/e2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
完成後，執行 Xilinx SDK
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/e3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
透過 &lt;code&gt;File -&amp;gt; New -&amp;gt; Application Project&lt;/code&gt; 去建立我們的新專案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
設定這個專案為 &lt;code&gt;standalone&lt;/code&gt; 的專案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇樣板為 &lt;code&gt;Zynq FSBL&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇我們剛剛建立的 &lt;code&gt;FSBL&lt;/code&gt; 專案，按下右鍵選擇 &lt;code&gt;Build Project&lt;/code&gt; 進行編譯
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0fb58e3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0fb58e3&quot;&gt;建立 BOOT.bin&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0fb58e3&quot;&gt;
&lt;p&gt;
編譯完 FSBL 後，選擇 &lt;code&gt;Xilinx Tools -&amp;gt; Create Boot Image&lt;/code&gt; 去建立我們的 BOOT.bin
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 &lt;code&gt;Boot image partitions&lt;/code&gt; 那邊，加入我們的 bitstream 以及 u-boot 檔案，記得要按照順序加入。
&lt;/p&gt;

&lt;p&gt;
完成後，點選 &lt;code&gt;Create Image&lt;/code&gt; 就會產生我們要的 &lt;code&gt;BOOT.bin&lt;/code&gt; 到指定路徑。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在這個步驟中，如果你是指令控的話，我們也可以在產生 FSBL.elf 後，建立一個名為 &lt;code&gt;boot.bif&lt;/code&gt; 的檔案，其內容如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;arch = zynq; split = false; format = BIN&lt;/span&gt;
&lt;span style=&quot;color: #ccaaff;&quot;&gt;the_ROM_image&lt;/span&gt;:
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;bootloader&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;/path/to/fsbl-build/fsbl.elf
    /path/to/linux_bd/linux_bd.sdk/linux_bd_wrapper.bit
    /path/to/u-boot/u-boot.elf
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來透過 &lt;code&gt;bootgen&lt;/code&gt; 這個命令去產生 &lt;code&gt;BOOT.bin&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ bootgen -image boot.bif -w on -o i BOOT.bin
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc90d8a3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc90d8a3&quot;&gt;將檔案複製到 Micro SD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc90d8a3&quot;&gt;
&lt;p&gt;
好了，我們已經完成了所有準備動作，是時候將檔案放到 Micro SD 卡並看看結果了，在本文中我們會將以下幾個檔案放到 &lt;code&gt;第一個分割區 (fat32)&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo /tmp/sdc1 $ tree -L 1
&lt;span style=&quot;color: #ccaaff;&quot;&gt;.&lt;/span&gt;
&amp;#9500;&amp;#9472;&amp;#9472; BOOT.bin
&amp;#9500;&amp;#9472;&amp;#9472; devicetree.dtb
&amp;#9500;&amp;#9472;&amp;#9472; uImage
&amp;#9492;&amp;#9472;&amp;#9472; uramdisk.image.gz

0 directories, 4 files
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
也就是說我們的 SD 卡有的東西，要像 &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt; p.439 這張圖那樣
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/f2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0c487d5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0c487d5&quot;&gt;測試開機與結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0c487d5&quot;&gt;
&lt;p&gt;
是時候來測試結果了，要注意到你的 Zybo Board 的 &lt;code&gt;JP5&lt;/code&gt; 要設定成下面這樣，這樣給電時，Zynq 才會讀取 SD 卡上面的 u-boot 並將位元流 (bitstream) 燒錄到 FPGA 中。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/sdboot.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
插入剛剛建立好的 SD 卡，並提供電源後，我們可以使用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等，啟動它並開啟 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 後，設定 baudrate 為 &lt;code&gt;115200&lt;/code&gt; ，就可以看到開機到 rootfs 的狀態。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/s1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0f00e78&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0f00e78&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0f00e78&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/zybo-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 &lt;code&gt;README.md&lt;/code&gt; 檔案
&lt;/p&gt;

&lt;div data-theme=&quot;default&quot; data-height=&quot;&quot; data-width=&quot;400&quot; data-github=&quot;coldnew/zybo-examples&quot; class=&quot;github-card&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9b245a6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9b245a6&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9b245a6&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_1/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial - A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://www.dbrss.org/zybo/tutorial4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO Zync-7000 Development Board Work - Booting Linux on the ZYBO&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[3]&lt;/code&gt; &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/zynq_led_flash/&quot;&gt;zybo board 開發記錄: Zynq 與 LED 閃爍控制&lt;/a&gt; 一文中我們談到了如何透過 C 語言撰寫獨立的程式，讓它控制 Zynq 的處理器系統 (Processing System, PS) 去閃爍 LED 的亮暗。既然 Zynq 的處理器系統 (Processing System, PS) 使用的是 ARM Cortex-A9 的處理器，那當然也可以讓我們跑 Linux 在 Zybo Board 上。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
本文將簡述如何自行編譯 u-boot 以及 Linux Kernel，並搭配 Busybox 製作簡單的 RootFS 執行於 Zybo Board 上。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org4051b50&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4051b50&quot;&gt;開發目標&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4051b50&quot;&gt;
&lt;p&gt;
在這次的開發中，我們要編譯 u-boot、Linux，並使用 Busybox 製作簡單的 Rootfs 後，透過製作 SD 卡來讓 Zybo Board 透過 SD 卡開機。
&lt;/p&gt;

&lt;p&gt;
要注意到的是，由於我們要透過 SD 卡開機進入到 Linux 系統，因此我們要透過 &lt;code&gt;JP5&lt;/code&gt; 去更改開機模式。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/zybo_config_pins.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2cb6c87&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2cb6c87&quot;&gt;了解開機流程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2cb6c87&quot;&gt;
&lt;p&gt;
既然我們要讓 Zybo board 執行 Linux 系統，就要先來了解一下開機流程，才知道我們大概需要準備哪些東西。從  &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_1/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial - A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt; 可以看到 Zynq-7000 執行 Linux 系統的開機流程圖。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/bootp.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
也就是說，當開始提供電源給 Zynq 處理器系統 (Processing System, PS) 並完成重置(reset) 後，Zynq 內建的 Boot ROM 會去載入 &lt;code&gt;第一階段開機程式 (First Stage Boot Loader, FSBL)&lt;/code&gt; ，接著載入 &lt;code&gt;位元流 (bitstream)&lt;/code&gt; 去初始化整個 &lt;code&gt;可程式邏輯(Programmable Logic, PL)&lt;/code&gt; 。 完成後，接下來就是透過 U-Boot 去載入 Linux Kernel、Device Tree 以及 Root File System。
&lt;/p&gt;

&lt;p&gt;
了解了這個，我們就知道我們大概要準備哪些東西了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdeaa1ec&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdeaa1ec&quot;&gt;設定好環境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdeaa1ec&quot;&gt;
&lt;p&gt;
在安裝玩 Vivado 與 Xilinx SDK 後，實際上包含 Zynq 在用的 ARM toolchain 亦同時被安裝到系統中，我們只要使用 &lt;code&gt;source&lt;/code&gt; 命令即可讓當前的環境知道 xilinx-arm toolchain 的路徑。這邊以 Viavdo 2016.2 作為範例。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ source /opt/Xilinx/Vivado/2016.2/settings64.sh
&lt;/pre&gt;

&lt;p&gt;
這樣就可以獲得 arm-xilinx-* toolchain 的命令，實際上有哪些呢? 輸入個 arm-xilinx- 按下 TAB 看看
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ arm-xilinx-
arm-xilinx-eabi-addr2line            arm-xilinx-eabi-gcc-4.9.2            arm-xilinx-eabi-objcopy
arm-xilinx-linux-gnueabi-ar          arm-xilinx-linux-gnueabi-gcc-ar      arm-xilinx-linux-gnueabi-objdump
arm-xilinx-eabi-ar                   arm-xilinx-eabi-gcc-ar               arm-xilinx-eabi-objdump
arm-xilinx-linux-gnueabi-as          arm-xilinx-linux-gnueabi-gcc-nm      arm-xilinx-linux-gnueabi-ranlib
arm-xilinx-eabi-as                   arm-xilinx-eabi-gcc-nm               arm-xilinx-eabi-ranlib
arm-xilinx-linux-gnueabi-c++         arm-xilinx-linux-gnueabi-gcc-ranlib  arm-xilinx-linux-gnueabi-readelf
arm-xilinx-eabi-c++                  arm-xilinx-eabi-gcc-ranlib           arm-xilinx-eabi-readelf
arm-xilinx-linux-gnueabi-c++filt     arm-xilinx-linux-gnueabi-gcov        arm-xilinx-linux-gnueabi-size
arm-xilinx-eabi-c++filt              arm-xilinx-eabi-gcov                 arm-xilinx-eabi-size
arm-xilinx-linux-gnueabi-cpp         arm-xilinx-linux-gnueabi-gdb         arm-xilinx-linux-gnueabi-sprite
arm-xilinx-eabi-cpp                  arm-xilinx-eabi-gdb                  arm-xilinx-eabi-sprite
arm-xilinx-linux-gnueabi-elfedit     arm-xilinx-linux-gnueabi-gprof       arm-xilinx-linux-gnueabi-strings
arm-xilinx-eabi-elfedit              arm-xilinx-eabi-gprof                arm-xilinx-eabi-strings
arm-xilinx-linux-gnueabi-g++         arm-xilinx-linux-gnueabi-ld          arm-xilinx-linux-gnueabi-strip
arm-xilinx-eabi-g++                  arm-xilinx-eabi-ld                   arm-xilinx-eabi-strip
arm-xilinx-linux-gnueabi-gcc         arm-xilinx-linux-gnueabi-nm
arm-xilinx-eabi-gcc                  arm-xilinx-eabi-nm                   arm-xilinx-linux-gnueabi-addr2line
arm-xilinx-linux-gnueabi-gcc-4.9.2   arm-xilinx-linux-gnueabi-objcopy
&lt;/pre&gt;

&lt;p&gt;
如果你系統上已經有其他的 ARM toolchain 的話，可以考慮跳過這一步驟，接下來要格式化 Micro SD 卡。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgafc80e9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgafc80e9&quot;&gt;格式化 MicroSD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgafc80e9&quot;&gt;
&lt;p&gt;
在這次的開發中，我們要設定 MicroSD 卡片成兩個分區，第一個是 &lt;code&gt;fat32&lt;/code&gt; 格式，第二個則使用 &lt;code&gt;ext4&lt;/code&gt; 格式，若不會使用 &lt;code&gt;fdisk&lt;/code&gt; 命令的話，可以透過 &lt;code&gt;gparted&lt;/code&gt; 來進行格式化，以下是我格式化卡片的範例 (8GB 卡片)。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/format.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
(實際上在本文的範例中，只會用到第一個分區，第二個分區是為了往後文章要開機到大一點的 rootfs 準備的。)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd8ed254&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd8ed254&quot;&gt;編譯 u-boot&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd8ed254&quot;&gt;
&lt;p&gt;
我們首先去 &lt;a href=&quot;https://github.com/DigilentInc/u-boot-Digilent-Dev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 下載 DigilentInc 加入 zybo board 後的 u-boot 版本，要注意這邊要選擇 &lt;code&gt;master-next&lt;/code&gt; 分支。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/DigilentInc/u-boot-Digilent-Dev.git -b master-next
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完成後進入到該資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ cd u-boot-Digilent-Dev
&lt;/pre&gt;

&lt;p&gt;
編譯 u-boot，記得指派編譯目標為 &lt;code&gt;zynq_zybo_config&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/u-boot-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make zynq_zybo_config
coldnew@gentoo ~/u-boot-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
編譯完成後，注意一下 &lt;code&gt;u-boot&lt;/code&gt; 這個檔案，他就是我們等等要用到的 u-boot 執行檔，不過由於 Xilinx Tool 要找有 .elf 副檔名的檔案，因此我們把它複製成 &lt;code&gt;u-boot.elf&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/u-boot-Digilent-Dev $ cp u-boot u-boot.elf
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf853f05&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf853f05&quot;&gt;編譯 Linux kernel&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf853f05&quot;&gt;
&lt;p&gt;
編譯好 u-boot 後，接下來就是編譯 Linux Kernel 了，我們一樣選擇 DigilentInc 加入 zybo board 後的 Linux Kernel 版本，記得要選 &lt;code&gt;master-next&lt;/code&gt; 分支。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone https://github.com/DigilentInc/Linux-Digilent-Dev.git -b master-next
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接著，當然就是編譯了，不過在這之前請先確定你有裝 &lt;code&gt;u-boot-tools&lt;/code&gt; 這套件，我們需要裡面的 mkimage 指令，Gentoo Linux 可以直接用以下命令來安裝。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ sudo emerge dev-embedded/u-boot-tools
&lt;/pre&gt;

&lt;p&gt;
完成後進入 Linux Kernel 資料夾
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~ $ cd Linux-Digilent-Dev
&lt;/pre&gt;

&lt;p&gt;
編譯我們需要的 &lt;code&gt;uImage&lt;/code&gt; 文件，記得要指定 config 為 &lt;code&gt;xilinx_zynq_defconfig&lt;/code&gt; 以及設定 &lt;code&gt;UIMAGE_LOADADDR&lt;/code&gt; 為 &lt;code&gt;0x8000&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make xilinx_zynq_defconfig
coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make
coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make &lt;span style=&quot;color: #aaccff;&quot;&gt;UIMAGE_LOADADDR&lt;/span&gt;=0x8000 uImage
coldnew@gentoo ~/Linux-Digilent-Dev $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make zynq-zybo.dtb
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
編譯完後，我們會需要 &lt;code&gt;arch/arm/boot/uImage&lt;/code&gt; 以及 &lt;code&gt;arch/arm/boot/dts/zynq-zybo.dtb&lt;/code&gt; 這兩個檔案，後者就是 device tree 編譯出來的資料檔。
&lt;/p&gt;

&lt;p&gt;
由於放入到 SD 卡上的 device tree 檔案名稱為 &lt;code&gt;devicetree.dtb&lt;/code&gt; ，因此這邊將 &lt;code&gt;zynq-zybo.dtb&lt;/code&gt; 改一下名。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/Linux-Digilent-Dev $ cp arch/arm/boot/dts/zynq-zybo.dtb devicetree.dtb
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果你想手動修改 Device Tree 並再重新編譯的話，也可以這樣去產生我們要的 &lt;code&gt;devicetree.dtb&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/Linux-Digilent-Dev $ ./scripts/dtc/dtc -I dts -O dtb -o devicetree.dtb arch/arm/boot/dts/zynq-zybo.dts
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org270107b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org270107b&quot;&gt;編譯 BusyBox&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org270107b&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.busybox.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Busybox&lt;/a&gt; 是一個非常有趣的程式，舉凡我們在 Linux 下最常用的命令如 ls、cd 等到 sed、vi 他都具有相對應的簡單實現，此外，這些命令實際上都只是一個軟連結 (symlink) 連結到名為 busybox 的執行檔，也就是說，如果我們將 busybox 進行靜態編譯 (static link)，則製作出來的系統整體大小大約為 2 MB (kernel) + 1.4 MB (busybox)，而這個系統卻又可以具有許多 UN*X 下的常用命令，也因此 busybox 很常用於空間有限的系統。
&lt;/p&gt;

&lt;p&gt;
我們在這個開發過程中，由於只是驗證執行 Linux 系統的功能，因此選用 Busybox 來作為我們的 rootfs。
&lt;/p&gt;

&lt;p&gt;
首先先下載 Busybox 的原始碼，這裡選用 &lt;code&gt;1_25_stable&lt;/code&gt; 這個穩定分支
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;git clone git://git.busybox.net/busybox -b 1_25_stable
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
進行我們自己的設定
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make menuconfig
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
在進行設定時有以下幾點要確實注意，我們要將 busybox 編譯為靜態連結，並且增加 &lt;code&gt;init&lt;/code&gt; 功能，主要設定如下:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Busybox Settings  ---&amp;gt;
        Build Options  ---&amp;gt;
               [*] Build BusyBox as a static binary (no shared libs)

Init Utilities  ---&amp;gt;
        [*] init

Login/Password Management Utilities  ---&amp;gt;
        [*] getty

Shells  ---&amp;gt;
        [*] ash
&lt;/pre&gt;

&lt;p&gt;
設定完成後開始進行編譯
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
編譯完成後透過 &lt;code&gt;make install&lt;/code&gt; 命令，會將編譯出來的 busybox 與軟連結(symlink)產生在 &lt;code&gt;_install&lt;/code&gt; 資料夾內
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@Rosia ~/busybox $ &lt;span style=&quot;color: #aaccff;&quot;&gt;ARCH&lt;/span&gt;=arm &lt;span style=&quot;color: #aaccff;&quot;&gt;CROSS_COMPILE&lt;/span&gt;=arm-xilinx-linux-gnueabi- make install
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立一些缺少的資料夾 (/dev、/sys &amp;#x2026;etc)
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox $ cd _install &amp;amp;&amp;amp; mkdir -p proc sys dev etc/init.d root
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立 &lt;code&gt;etc/init.d/rcS&lt;/code&gt; 作為啟動腳本，並添加以下內容
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ vim etc/init.d/rcS

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/bin/sh&lt;/span&gt;
mount -t proc none /proc
mount -t sysfs none /sys
/sbin/mdev -s
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
將 &lt;code&gt;etc/init.d/rcS&lt;/code&gt; 加入可執行權限
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/busybox/_install $ chmod +x etc/init.d/rcS
&lt;/pre&gt;

&lt;p&gt;
建立 &lt;code&gt;etc/inittab&lt;/code&gt; ，這會讓我們可以透過 UART 登入 zybo board
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ vim etc/inittab

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;!/bin/sh&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Init script&lt;/span&gt;
::sysinit:/etc/init.d/rcS
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Start shell on the serial ports&lt;/span&gt;
::respawn:/sbin/getty -L ttyPS0 115200 vt100
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;What to do when restarting the init process&lt;/span&gt;
::restart:/sbin/init
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;What to do before rebooting&lt;/span&gt;
::shutdown:/bin/umount -a -r
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
設定預設的 &lt;code&gt;/etc/passwd&lt;/code&gt; 檔案，我們要讓 root 用戶登入時不用輸入密碼
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ vim etc/passwd

root::0:0:root:/root:/bin/sh
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
建立 &lt;code&gt;/init&lt;/code&gt; 並軟連結到 &lt;code&gt;/sbin/init&lt;/code&gt; ，避免 Linux Kernel 開機時找不到 rootfs 的 init。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~/busybox/_install $ ln -s /sbin/init init
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來，由於這次我們只是要開機到 ramdisk 上的 rootfs, 因此將 busybox 做出的 rootfs 打包成 cpio 格式。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/busybox/_install $ find . | sudo cpio -H newc -o | gzip -9 &amp;gt; ../uramdisk.cpio.gz
&lt;/pre&gt;

&lt;p&gt;
再透過 &lt;code&gt;mkimage&lt;/code&gt; 將這個 &lt;code&gt;uramdisk.cpio.gz&lt;/code&gt; 檔案轉成 uboot 用的 &lt;code&gt;uramdisk.image.gz&lt;/code&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/busybox/_install $  mkimage -A arm -T ramdisk -C gzip -d ../uramdisk.cpio.gz ../uramdisk.image.gz
Image Name:
Created:      Sun Jul 17 19:02:08 2016
Image Type:   ARM Linux RAMDisk Image (gzip compressed)
Data Size:    1042106 Bytes = 1017.68 kB = 0.99 MB
Load Address: 00000000
Entry Point:  00000000
&lt;/pre&gt;

&lt;p&gt;
在這邊的這個 &lt;code&gt;uramdisk.image.gz&lt;/code&gt; 就是我們開機會進入到的 rootfs，也是我們等等要放到 SD 卡第一個磁區的檔案。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org00e6c72&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org00e6c72&quot;&gt;編譯位元流 (bitstream)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org00e6c72&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;https://coldnew.github.io/zybo-board/linux_bd/&quot;&gt;zybo board 開發記錄: 升級 Digilent 提供的設計檔&lt;/a&gt; 一文中，我們提到了怎樣升級 &lt;a href=&quot;http://store.digilentinc.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Digilent&lt;/a&gt; 提供的預先定義好接腳的設定檔 (zybo_base_system) ，這次的專案，我們就直接用這個設定檔案來進行 Linux 開機的動作。
&lt;/p&gt;

&lt;p&gt;
首先你必須根據該篇文章，將你的 Zybo board 設定檔案升級到你用的 Vivado 版本，完成後我們重新建立一個乾淨的專案。
&lt;/p&gt;

&lt;p&gt;
先來把先前生成的舊專案清掉:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ sh cleanup.sh
&lt;/pre&gt;

&lt;p&gt;
接下來用 Vivado 2016.2 重新生出新的專案 ~
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ /opt/Xilinx/Vivado/2016.2/bin/vivado -mode batch -source create_project.tcl
&lt;/pre&gt;

&lt;p&gt;
完成後，會看到 &lt;code&gt;ZYBO/Projects/linux_bd/proj&lt;/code&gt; 目錄變成這樣:
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ tree -L 1
. &amp;lt;b&amp;gt;
├── cleanup.cmd
├── cleanup.sh
├── create_project.tcl
├── ip_upgrade.log &amp;lt;g&amp;gt;
├── linux_bd.cache &amp;lt;b&amp;gt;
├── linux_bd.hw &amp;lt;b&amp;gt;
├── linux_bd.ip_user_files &amp;lt;b&amp;gt;
├── linux_bd.sim &amp;lt;b&amp;gt;
├── linux_bd.srcs &amp;lt;b&amp;gt;
├── linux_bd.xpr
├── vivado.jou
└── vivado.log &amp;lt;g&amp;gt;

5 directories, 7 files
&lt;/pre&gt;

&lt;p&gt;
我們使用 Vivado 打開 &lt;code&gt;linux_bd.xpr&lt;/code&gt; 這個專案。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/oprj.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你有興趣看他生出來的 Block Design 是怎樣的，也可以切到 Block Design 那頁看看
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/linux_bd.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們直接點選 &lt;code&gt;Program and Debug -&amp;gt; Generate Bitstream&lt;/code&gt; 產生我們要的位元流 (bitstream)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ge.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfd718aa&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfd718aa&quot;&gt;建立 FSBL&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfd718aa&quot;&gt;
&lt;p&gt;
到此，我們除了 &lt;code&gt;第一階段開機程式 (First Stage Boot Loader, FSBL)&lt;/code&gt; 外，其他的程式都已經編譯出執行檔了，讓我們來處理 FSBL 吧。
&lt;/p&gt;

&lt;p&gt;
首先點選 &lt;code&gt;File -&amp;gt; Export -&amp;gt; Export hardware&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/e1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
記得要勾選 &lt;code&gt;Include bitstream&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/e2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
完成後，執行 Xilinx SDK
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/e3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
透過 &lt;code&gt;File -&amp;gt; New -&amp;gt; Application Project&lt;/code&gt; 去建立我們的新專案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
設定這個專案為 &lt;code&gt;standalone&lt;/code&gt; 的專案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇樣板為 &lt;code&gt;Zynq FSBL&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇我們剛剛建立的 &lt;code&gt;FSBL&lt;/code&gt; 專案，按下右鍵選擇 &lt;code&gt;Build Project&lt;/code&gt; 進行編譯
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0fb58e3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0fb58e3&quot;&gt;建立 BOOT.bin&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0fb58e3&quot;&gt;
&lt;p&gt;
編譯完 FSBL 後，選擇 &lt;code&gt;Xilinx Tools -&amp;gt; Create Boot Image&lt;/code&gt; 去建立我們的 BOOT.bin
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 &lt;code&gt;Boot image partitions&lt;/code&gt; 那邊，加入我們的 bitstream 以及 u-boot 檔案，記得要按照順序加入。
&lt;/p&gt;

&lt;p&gt;
完成後，點選 &lt;code&gt;Create Image&lt;/code&gt; 就會產生我們要的 &lt;code&gt;BOOT.bin&lt;/code&gt; 到指定路徑。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/ax6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在這個步驟中，如果你是指令控的話，我們也可以在產生 FSBL.elf 後，建立一個名為 &lt;code&gt;boot.bif&lt;/code&gt; 的檔案，其內容如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;arch = zynq; split = false; format = BIN&lt;/span&gt;
&lt;span style=&quot;color: #ccaaff;&quot;&gt;the_ROM_image&lt;/span&gt;:
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
    &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;bootloader&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt;/path/to/fsbl-build/fsbl.elf
    /path/to/linux_bd/linux_bd.sdk/linux_bd_wrapper.bit
    /path/to/u-boot/u-boot.elf
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來透過 &lt;code&gt;bootgen&lt;/code&gt; 這個命令去產生 &lt;code&gt;BOOT.bin&lt;/code&gt;
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo ~ $ bootgen -image boot.bif -w on -o i BOOT.bin
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc90d8a3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc90d8a3&quot;&gt;將檔案複製到 Micro SD 卡&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc90d8a3&quot;&gt;
&lt;p&gt;
好了，我們已經完成了所有準備動作，是時候將檔案放到 Micro SD 卡並看看結果了，在本文中我們會將以下幾個檔案放到 &lt;code&gt;第一個分割區 (fat32)&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;coldnew@gentoo /tmp/sdc1 $ tree -L 1
&lt;span style=&quot;color: #ccaaff;&quot;&gt;.&lt;/span&gt;
&amp;#9500;&amp;#9472;&amp;#9472; BOOT.bin
&amp;#9500;&amp;#9472;&amp;#9472; devicetree.dtb
&amp;#9500;&amp;#9472;&amp;#9472; uImage
&amp;#9492;&amp;#9472;&amp;#9472; uramdisk.image.gz

0 directories, 4 files
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
也就是說我們的 SD 卡有的東西，要像 &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt; p.439 這張圖那樣
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/f2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0c487d5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0c487d5&quot;&gt;測試開機與結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0c487d5&quot;&gt;
&lt;p&gt;
是時候來測試結果了，要注意到你的 Zybo Board 的 &lt;code&gt;JP5&lt;/code&gt; 要設定成下面這樣，這樣給電時，Zynq 才會讀取 SD 卡上面的 u-boot 並將位元流 (bitstream) 燒錄到 FPGA 中。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/sdboot.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
插入剛剛建立好的 SD 卡，並提供電源後，我們可以使用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等，啟動它並開啟 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 後，設定 baudrate 為 &lt;code&gt;115200&lt;/code&gt; ，就可以看到開機到 rootfs 的狀態。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/d9dfdd56/s1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0f00e78&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0f00e78&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0f00e78&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/zybo-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 &lt;code&gt;README.md&lt;/code&gt; 檔案
&lt;/p&gt;

&lt;div data-theme=&quot;default&quot; data-height=&quot;&quot; data-width=&quot;400&quot; data-github=&quot;coldnew/zybo-examples&quot; class=&quot;github-card&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9b245a6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9b245a6&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org9b245a6&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_1/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial - A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://www.dbrss.org/zybo/tutorial4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO Zync-7000 Development Board Work - Booting Linux on the ZYBO&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[3]&lt;/code&gt; &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/d9dfdd56/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: Zynq 與 LED 閃爍控制</title>
      <link>https://coldnew.github.io/dec85bd3/</link>
      <guid>https://coldnew.github.io/dec85bd3/</guid>
      <pubDate>Tue, 05 Jul 2016 15:41:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/pl_led/&quot;&gt;zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍&lt;/a&gt; 一文中我們說到了怎樣純粹使用 可程式邏輯 (Programmable Logic, PL) 去控制 Zybo board 上面的四個 LED 燈 (LD0 ~ LD3)，接下來就讓我們透過 Zynq 上的 ARM 處理器來作到同樣的一件事情吧。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
本文主要參考自 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Digilentinc&lt;/a&gt; 的 &lt;a href=&quot;https://reference.digilentinc.com/zybo/gsg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Start Guide&lt;/a&gt; 並加入我自己試玩的一些心得。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org48ae892&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org48ae892&quot;&gt;開發目標&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org48ae892&quot;&gt;
&lt;p&gt;
我們要透過 Zynq 上的 ARM 處理器，也就是 處理系統 (Processing System, PS)去控制 LED，具體目標與電路資訊如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/zybo_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
根據 &lt;a href=&quot;https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO FPGA Board Reference Manual&lt;/a&gt; 上面的資料，我們想要控制的這四個在板子上的 LED 都是位於可程式邏輯區(Programmable Logic, PL)可以碰觸到的地方，如果你想要透過 Zynq 去對這些 LED 進行控制，你就會需要透過  AXI GPIO 的幫助，就像這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/zynq_axi_gpio_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf22a734&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf22a734&quot;&gt;認識 AXI 匯流排&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf22a734&quot;&gt;
&lt;p&gt;
AXI 匯流排是作什麼用的？我們就從 Zynq 的架構來看 (參照 &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt; p.28)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/zynq_hw_arch.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
由上圖可以看到 AXI 匯流排橫跨了處理器系統 (Processing System, PS) 與可程式邏輯 (Programmable Logc, PL) 兩區，並連接到週邊。
&lt;/p&gt;

&lt;p&gt;
實際上，AXI 協議為 ARM 的協議規範，來自於 AMBA 匯流排架構，若你對整個協議的內容有興趣，可以到 ARM 的 &lt;a href=&quot;http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.set.amba/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;網站&lt;/a&gt; 去下載規格書。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8fa6739&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8fa6739&quot;&gt;建立我們的專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8fa6739&quot;&gt;
&lt;p&gt;
我們首先當然是建立我們的專案了，在進行這一步前，請先確定你有按照 &lt;a href=&quot;https://coldnew.github.io/zybo-board/vivado_zybo_setting_file/&quot;&gt;讓 Vivado 有 Zybo Board 的設定檔&lt;/a&gt; 一文所說，將 Zybo board 的設計導入。
&lt;/p&gt;

&lt;p&gt;
啟動了 Vivado 後，點選 &lt;code&gt;Create New Project&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/create_prj0.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來指定好你的專案名稱與路徑
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cprj1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
選擇 &lt;code&gt;RTL Project&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/new_prj.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
在開發板選項中，選擇 &lt;code&gt;Zybo Board&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/new_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
完成專案建立
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cprj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2917301&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2917301&quot;&gt;建立 Block Design&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2917301&quot;&gt;
&lt;p&gt;
當我們的設計需要用到 Zynq 的處理器系統(Processing System, PS)時候，就需要透過 Block Design 來建立我們的電路設計，首先點選 &lt;code&gt;IP Integrator -&amp;gt; Create Block Design&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接著點選 &lt;code&gt;OK&lt;/code&gt; 建立我們的 block design
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
點選 &lt;code&gt;Add IP&lt;/code&gt; 按鈕去增加我們需要的 IP 核
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們首先尋找 &lt;code&gt;Zynq&lt;/code&gt; 並將 &lt;code&gt;ZYNQ7 Processing System&lt;/code&gt; 加入到我們的 Block Design，並點選 &lt;code&gt;Run Block Automation&lt;/code&gt; 對 Zynq 處理器進行一些設定
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
進入到 &lt;code&gt;Run Block Automation&lt;/code&gt; 的設定頁面後，確認 &lt;code&gt;processing_system7_0&lt;/code&gt; 有被勾選到，並且 &lt;code&gt;Cross Trigger In&lt;/code&gt; 以及 &lt;code&gt;Cross Trigger Out&lt;/code&gt; 都是 &lt;code&gt;Disable&lt;/code&gt; 的狀態，點選 Ok 結束設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
上面的設定好了後，就會看到 ZYNQ7 Processing System 的 DDR 以及 FIXED_IO 都有接線出來
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
點選 &lt;code&gt;Add IP&lt;/code&gt; 按鈕去增加我們需要的 IP 核，這次我們要增加 &lt;code&gt;AXI_GPIO&lt;/code&gt; ，用來對可程式邏輯(Programmable Logic, PL)區域的 LED 進行控制，完成後點選上方的 &lt;code&gt;Run Connection Automation&lt;/code&gt; 按鈕
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 &lt;code&gt;Run Conenction Automation&lt;/code&gt; 視窗內，我們選擇 &lt;code&gt;Custom&lt;/code&gt; (其實也可以在這邊直接選擇 &lt;code&gt;leds 4bits&lt;/code&gt;)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb8-1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來勾選 &lt;code&gt;S_AXI&lt;/code&gt; ，並點選 Ok 進行確認。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb8.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
好了後會像這樣，我們接下來對 &lt;code&gt;axi_gpio_0&lt;/code&gt; 這個區塊點兩下，進行手動設定
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb9.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 &lt;code&gt;IP Configuration&lt;/code&gt; 頁面，設定 GPIO 為輸出腳，並設寬度為 &lt;code&gt;4&lt;/code&gt; ，這邊我將輸出預設值設定為 0xF, 也就是預設這四個 LED 用的輸出腳都是 High 的電壓。完成後點選 OK, 結束 AXI_GPIO 的設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb10.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
接下來點選 &lt;code&gt;Validate Design&lt;/code&gt; 按鈕，我們要確認我們的 Block Design 沒問題才能夠繼續往下走。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb11.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
正常來講不會有啥問題才對，我們結束 Block Design 的工作
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb12.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3b6e943&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3b6e943&quot;&gt;加入 Constraints&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3b6e943&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/pl_led/&quot;&gt;zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍&lt;/a&gt; 一文有提到如何取得 Constraints 檔案，不過為了讓這篇文章完整，我們再講一次。
&lt;/p&gt;

&lt;p&gt;
我們先連結到 &lt;a href=&quot;https://reference.digilentinc.com/zybo:zybo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zybo Resource Center&lt;/a&gt; 去下載 &lt;code&gt;Master XDC&lt;/code&gt; 檔案。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/dl_constraints.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
你也可以直接透過 wget 命令下載並解壓出 &lt;code&gt;ZYBO_Master.xdc&lt;/code&gt; 這個檔案，它就是本節要加入的 Constraints 檔
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp $ wget https://reference.digilentinc.com/_media/zybo/zybo_master_xdc.zip
coldnew@gentoo /tmp $ unzip zybo_master_xdc.zip
Archive:  zybo_master_xdc.zip
  inflating: ZYBO_Master.xdc
&lt;/pre&gt;

&lt;p&gt;
接下來一樣選擇 &lt;code&gt;Project Manager -&amp;gt; Add sources&lt;/code&gt; 來增加檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/as1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這次我們要增加的是 Constraints 檔，因此選擇 &lt;code&gt;Add or create constraints&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/add_constraints1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
透過 &lt;code&gt;Add Files&lt;/code&gt; 添加剛剛下載的 ZYBO_Master.xdc 檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/add_constraints2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org383e874&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org383e874&quot;&gt;ZYBO_Master.xdc&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org383e874&quot;&gt;
&lt;p&gt;
在 ZYBO_Master.xdc 裡面，預設所有對應接腳都是被註解掉的，這邊我們反註解我們需要的 led 接腳，要記得一下這邊的 I/O 名稱，我們等等要和產生出來的 HDL Wrapper 進行對應的工作。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LEDs&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23P_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23N_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M15 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_0_35&lt;/span&gt;
set_property PACKAGE_PIN G14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L3N_T0_DQS_AD1N_35&lt;/span&gt;
set_property PACKAGE_PIN D18 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣我們就可以準備將 Block Design 和硬體接腳對應在一起了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfe3170e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfe3170e&quot;&gt;產生 HDL Wrapper&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfe3170e&quot;&gt;
&lt;p&gt;
接下來我們要透過 Block Design 產生我們的 HDL wrapper，對你的 Block Design 檔案點選右鍵，選擇 &lt;code&gt;Create HDL Wrapper&lt;/code&gt; 。它會根據你專案設定的語言 (VHDL 或是 Verilog) 來產生相對的 HDL 程式碼。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
產生出來的東西我們可能需要改些東西，為了避免麻煩這邊我選第一個選項。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，假設你的 Block Design 檔案叫做 design_1.bd，那就會產生 design_1_wrapper.v 或是 design_1_wrapper.vhdl 這樣的檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們接著要修改這個 HDL Wrapper，這是為什麼呢? 回去看一下前面做好的 Block Design 以及 Constraints 的資訊，我們可以看到 Block Design 設定好的 AXI_GPIO 其輸出腳叫做 &lt;code&gt;gpio_rtl&lt;/code&gt; ，而在 Constraints 中，我們目標的 LED 輸出腳名稱是 &lt;code&gt;led&lt;/code&gt; ，因此我們要調整一下這個 HDL Wrapper 讓 &lt;code&gt;gpio_rtl&lt;/code&gt; 和 &lt;code&gt;led&lt;/code&gt; 可以對應在一起。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
由於在本範例中，design_1_wrapper.v 也就是 toplevel 的模組，因此在這邊將對外的 &lt;code&gt;gpio_rtl_tri_o&lt;/code&gt; 接腳改為 &lt;code&gt;led&lt;/code&gt; 讓它接出即可。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-diff&quot;&gt;&lt;span style=&quot;color: #dddddd;&quot;&gt;diff --git a/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v b/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;index 7b1b0bd..c57caa0 100644&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;--- &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;a/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;+++ &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;b/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -31,7 +31,7 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     FIXED_IO_ps_clk,&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     FIXED_IO_ps_porb,&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     FIXED_IO_ps_srstb,&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;    gpio_rtl_tri_o);&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;    led);&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout [14:0]DDR_addr;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout [2:0]DDR_ba;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout DDR_cas_n;&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -53,7 +53,7 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout FIXED_IO_ps_clk;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout FIXED_IO_ps_porb;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout FIXED_IO_ps_srstb;&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;  output [3:0]gpio_rtl_tri_o;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;  output [3:0]led;&lt;/span&gt;

&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire [14:0]DDR_addr;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire [2:0]DDR_ba;&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -76,7 +76,7 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire FIXED_IO_ps_clk;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire FIXED_IO_ps_porb;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire FIXED_IO_ps_srstb;&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;  wire [3:0]gpio_rtl_tri_o;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;  wire [3:0]led;&lt;/span&gt;

&lt;span style=&quot;color: #dddddd;&quot;&gt;   design_1 design_1_i&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;        (.DDR_addr(DDR_addr),&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -100,5 +100,5 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         .FIXED_IO_ps_clk(FIXED_IO_ps_clk),&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         .FIXED_IO_ps_porb(FIXED_IO_ps_porb),&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         .FIXED_IO_ps_srstb(FIXED_IO_ps_srstb),&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;        .gpio_rtl_tri_o(gpio_rtl_tri_o));&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        .gpio_rtl_tri_o(led));&lt;/span&gt;
 endmodule
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
改好後，點選上方的 &lt;code&gt;Run Implementation&lt;/code&gt; 來確認我們這樣的修改是否能編譯/驗證成功。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb77b41e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb77b41e&quot;&gt;產生位元流 (bitstream)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb77b41e&quot;&gt;
&lt;p&gt;
前面的處理都好了後，接下來點選 &lt;code&gt;Program and Debug -&amp;gt; Generate Bitstream&lt;/code&gt; 去讓 Vivado 將這個專案產生出位元流 (bitstream)，ZYNQ 會根據 bitstream 的資訊對 FPGA 進行設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當 bitstream 產生完成後，由於我們這次的實作，是要透過寫 C 語言程式來控制 Zynq 進行 LED 的亮暗，因此要先將剛剛產生的硬體資訊輸出給 Xilinx SDK 去。
&lt;/p&gt;

&lt;p&gt;
點選 &lt;code&gt;File -&amp;gt; Export -&amp;gt; Export Hardware&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
確定你有勾選 &lt;code&gt;Include bitstream&lt;/code&gt; ，點選 Ok
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w8.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
完成後，啟動 Xilinx SDK
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w9.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6e9c350&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6e9c350&quot;&gt;Xilinx SDK&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6e9c350&quot;&gt;
&lt;p&gt;
我們啟動 Xilinx SDK 後，可以先看到一些像是位址映射 (Address Map) 的資訊
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;File -&amp;gt; New -&amp;gt; Application Project&lt;/code&gt; 去建立新的專案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這邊我命名這個專案叫做 LED，並且為獨立的程式
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Empty Application&lt;/code&gt; ，我們要自己來寫我們的程式。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
當專案建立完成後，會自動打開 &lt;code&gt;LED_bsp&lt;/code&gt; 裡面的 &lt;code&gt;system.mss&lt;/code&gt; ，裡面會顯示我們所用的週邊範例程式碼以及使用手冊的連結，我們可以點選這些連結來了解這些週邊要怎樣使用。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/doc.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你連結點選不開的話，可以到你安裝 SDK 的路徑下去尋找，比如說我裝的是 Vivado 2016.2，則手冊的路徑在
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
/opt/Xilinx/SDK/2016.2/data/embeddedsw/XilinxProcessorIPLib/drivers

&lt;/pre&gt;

&lt;p&gt;
這裡給個結果的範例，比如我想要查詢 xgpio 的資料，則可以看到如下的 HTML 檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/doc2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf6f446d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf6f446d&quot;&gt;建立 main.c&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgf6f446d&quot;&gt;
&lt;p&gt;
由於我們建立的是空白專案，必須自己添加自己的主程式，因此我們對 LED 專案的 src 按下右鍵，選擇建立新的檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這邊將它命名為 &lt;code&gt;main.c&lt;/code&gt; ，也就是我們唯一的主程式，點選 &lt;code&gt;Finish&lt;/code&gt; 完成檔案建立。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 main.c 加入以下程式碼，具體功能待會在說明。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xparameters.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xgpio.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdlib.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;i&lt;/span&gt; = 0;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;i = 0; i &amp;lt; simple_delay; i++&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;argc&lt;/span&gt;, &lt;span style=&quot;color: #fff59d;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #aaccff;&quot;&gt;argv&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #fff59d;&quot;&gt;XGpio&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_gpio&lt;/span&gt;;              &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LED Instance &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Initialize LED GPIO settings &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        XGpio_Initialize&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, XPAR_AXI_GPIO_0_DEVICE_ID&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
        XGpio_SetDataDirection&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1, 0&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Output something via UART1, 115200 baudrate &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        printf&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start to blink led_gpio !!!\n\r&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_value&lt;/span&gt; = 0x03;   &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;default led_gpio value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;while&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;1&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
                printf&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;led_gpio value set to 0x%X\n\r&quot;&lt;/span&gt;, led_value&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;

                &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Set GPIO Channel 1 value. &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
                XGpio_DiscreteWrite&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1 , led_value&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;

                &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;sleep and change led_gpio value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
                simple_delay&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;10000000&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
                led_value = ~led_value;
        &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;

        &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt; 0;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org91a33b6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org91a33b6&quot;&gt;main.c&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org91a33b6&quot;&gt;
&lt;p&gt;
在 main.c 的開頭，我們載入了需要使用的幾個標頭檔，在 Xilinx SDK 中，已經包含了一些預設好的函式庫等功能，具體資訊請查閱 &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_3/oslib_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx OS and Libraries Document Collection&lt;/a&gt; (UG643) 手冊。
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;xparameters.h&lt;/code&gt; 這個標頭檔則是 Xilinx SDK 自己產生的，裡面會包含一些關於你使用的 IP Core 的資訊，比如標準輸出的基底位址 (base address) 或是其他和你這份硬體相關的設定。而 &lt;code&gt;xgpio.h&lt;/code&gt; 則提供了一些高階的抽象函式，讓你開發 GPIO 相關的功能可以更加輕鬆。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xparameters.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xgpio.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdlib.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我們用一個非常簡單的延遲 (delay) 函式讓 CPU 很忙碌的計算，來達到延遲程式的效果。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;i&lt;/span&gt; = 0;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;i = 0; i &amp;lt; simple_delay; i++&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來是我們的主程式，我們將它拆開來看，後面見到的程式碼都會塞到主程式中。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;argc&lt;/span&gt;, &lt;span style=&quot;color: #fff59d;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #aaccff;&quot;&gt;argv&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;code&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt; 0;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
是時候進入到 GPIO 的功能設定，注意到 &lt;code&gt;XPAR_AXI_GPIO_0_DEVICE_ID&lt;/code&gt; 這個，你可以把它對應回我們的 Block Design 的 &lt;code&gt;axi_gpio_0&lt;/code&gt; ，這個巨集(Macro)即是 Xilinx SDK 產生，定義在 &lt;code&gt;xparameter.h&lt;/code&gt; 裡面。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;XGpio&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_gpio&lt;/span&gt;;              &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LED Instance &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Initialize LED GPIO settings &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
XGpio_Initialize&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, XPAR_AXI_GPIO_0_DEVICE_ID&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;
XGpio_SetDataDirection&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1, 0&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我們透過 printf 去顯示一些簡單得除錯訊息，這邊的訊息會透過 UART 輸出，你可以透過電腦端的軟體來收到(ex: gtkterm、teraterm)，我自己是透過 emacs 的 &lt;code&gt;serial-term&lt;/code&gt; 命令來收訊息，baud rate 則是設定為 &lt;code&gt;115200&lt;/code&gt; 、連接目標則是 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Output something via UART1, 115200 baudrate &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
printf&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start to blink led !!!\n\r&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
最後，使用一個無窮迴圈去控制 LED 數值的變化，並透過 &lt;code&gt;XGpio_DiscreteWrite&lt;/code&gt; 去對 GPIO 的通道 1 (參考前面 Block Design) 進行資料寫入的工程，再調整下一次到迴圈時要的 LED 數值，一直重複這些動作。
&lt;/p&gt;

&lt;p&gt;
就這樣，我們的程式完成了。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_value&lt;/span&gt; = 0x03;   &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;default led value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;while&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;1&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        printf&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;led value set to 0x%X\n\n&quot;&lt;/span&gt;, led_value&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Set GPIO Channel 1 value. &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        XGpio_DiscreteWrite&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1, led_value&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;sleep and change led value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        simple_delay&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;10000000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
        led_value = ~led_value;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org601dbdc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org601dbdc&quot;&gt;下載到 Zybo board&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org601dbdc&quot;&gt;
&lt;p&gt;
確定此時你有將 Zybo board 接到電腦，並且你 &lt;code&gt;JP5&lt;/code&gt; 設定在 &lt;code&gt;QSPI&lt;/code&gt; 模式下，就像這樣
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/qspi.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Xilinx Tools -&amp;gt; Program FPGA&lt;/code&gt; 進行 FPGA 的燒錄。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
確認要燒錄的資料無誤後，點選 &lt;code&gt;Program&lt;/code&gt; 將位元流 (bitstream) 燒錄到 FPGA 去，燒完後你會發現 LD0 ~ LD3 都是亮燈的狀態，因為我們在 Block Design 預設 AXI_GPIO 輸出為 &lt;code&gt;0xF&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
選擇 &lt;code&gt;Run -&amp;gt; Run Configuration&lt;/code&gt; 進行執行前的一些設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
我們在 &lt;code&gt;Xilinx C/C++ Application(GDB)&lt;/code&gt; 建立一個新的設定，由於我們已經燒錄好 FPGA 因此只需要重起處理器系統 (Processing System, PS)即可。
&lt;/p&gt;

&lt;p&gt;
確認你有啟用 &lt;code&gt;ps7_init&lt;/code&gt; 這些設定，ps7_init 定義了一些初始化的程式，我們之所以能夠使用 &lt;code&gt;printf&lt;/code&gt; 將資訊透過 UART 輸出，也是透過 ps7_init 的協助，具體請參考 &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt;, p.24 頁。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
除了這邊設定外，別忘記指定要跑的專案，Xilinx SDK 是允許同份硬體設計檔跑很多種專案的，以本文範例而言，我們要跑得專案叫做 &lt;code&gt;LED&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
都設定好後，點選 &lt;code&gt;Run&lt;/code&gt; 然後祈禱一切正常!!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbf5d60c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbf5d60c&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbf5d60c&quot;&gt;
&lt;p&gt;
在你執行 &lt;i&gt;Program device&lt;/i&gt; 以及 &lt;i&gt;Run&lt;/i&gt; 後，Xilinx SDK 會將位元流(bitstream) 下載到我們的 Zybo Board，接著重設 CPU 後執行我們下載的程式，最後完成的成果如下
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/result.gif&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你有啟用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等的話，啟動它並開啟 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 後，設定 baudrate 為 &lt;code&gt;115200&lt;/code&gt; ，就會看到我們程式透過 &lt;code&gt;printf&lt;/code&gt; 輸出的訊息
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/s.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org74be42d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org74be42d&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org74be42d&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/zybo-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 &lt;code&gt;README.md&lt;/code&gt; 檔案
&lt;/p&gt;

&lt;div data-theme=&quot;default&quot; data-height=&quot;&quot; data-width=&quot;400&quot; data-github=&quot;coldnew/zybo-examples&quot; class=&quot;github-card&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbec2da4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbec2da4&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbec2da4&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://sunsided.github.io/zybo-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO Quick-Start Tutorial&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[3]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_1/ug1043-embedded-system-tools.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XILINX - Embedded System Tools Reference Manual&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[4]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AXI GPIO v2.0 LogiCORE IP Product Guide&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[5]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_3/oslib_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx OS and Libraries Document Collection (UG643)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[6]&lt;/code&gt; &lt;a href=&quot;http://www.dbrss.org/zybo/tutorial1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO Zync-7000 Development Board Work - Getting the LEDs to flash&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[7]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/pl_led/&quot;&gt;zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍&lt;/a&gt; 一文中我們說到了怎樣純粹使用 可程式邏輯 (Programmable Logic, PL) 去控制 Zybo board 上面的四個 LED 燈 (LD0 ~ LD3)，接下來就讓我們透過 Zynq 上的 ARM 處理器來作到同樣的一件事情吧。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
本文主要參考自 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Digilentinc&lt;/a&gt; 的 &lt;a href=&quot;https://reference.digilentinc.com/zybo/gsg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Getting Start Guide&lt;/a&gt; 並加入我自己試玩的一些心得。
&lt;/p&gt;

&lt;div id=&quot;outline-container-org48ae892&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org48ae892&quot;&gt;開發目標&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org48ae892&quot;&gt;
&lt;p&gt;
我們要透過 Zynq 上的 ARM 處理器，也就是 處理系統 (Processing System, PS)去控制 LED，具體目標與電路資訊如下:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/zybo_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
根據 &lt;a href=&quot;https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO FPGA Board Reference Manual&lt;/a&gt; 上面的資料，我們想要控制的這四個在板子上的 LED 都是位於可程式邏輯區(Programmable Logic, PL)可以碰觸到的地方，如果你想要透過 Zynq 去對這些 LED 進行控制，你就會需要透過  AXI GPIO 的幫助，就像這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/zynq_axi_gpio_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf22a734&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf22a734&quot;&gt;認識 AXI 匯流排&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf22a734&quot;&gt;
&lt;p&gt;
AXI 匯流排是作什麼用的？我們就從 Zynq 的架構來看 (參照 &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt; p.28)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/zynq_hw_arch.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
由上圖可以看到 AXI 匯流排橫跨了處理器系統 (Processing System, PS) 與可程式邏輯 (Programmable Logc, PL) 兩區，並連接到週邊。
&lt;/p&gt;

&lt;p&gt;
實際上，AXI 協議為 ARM 的協議規範，來自於 AMBA 匯流排架構，若你對整個協議的內容有興趣，可以到 ARM 的 &lt;a href=&quot;http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.set.amba/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;網站&lt;/a&gt; 去下載規格書。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8fa6739&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8fa6739&quot;&gt;建立我們的專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8fa6739&quot;&gt;
&lt;p&gt;
我們首先當然是建立我們的專案了，在進行這一步前，請先確定你有按照 &lt;a href=&quot;https://coldnew.github.io/zybo-board/vivado_zybo_setting_file/&quot;&gt;讓 Vivado 有 Zybo Board 的設定檔&lt;/a&gt; 一文所說，將 Zybo board 的設計導入。
&lt;/p&gt;

&lt;p&gt;
啟動了 Vivado 後，點選 &lt;code&gt;Create New Project&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/create_prj0.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來指定好你的專案名稱與路徑
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cprj1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
選擇 &lt;code&gt;RTL Project&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/new_prj.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
在開發板選項中，選擇 &lt;code&gt;Zybo Board&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/new_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
完成專案建立
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cprj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org2917301&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2917301&quot;&gt;建立 Block Design&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org2917301&quot;&gt;
&lt;p&gt;
當我們的設計需要用到 Zynq 的處理器系統(Processing System, PS)時候，就需要透過 Block Design 來建立我們的電路設計，首先點選 &lt;code&gt;IP Integrator -&amp;gt; Create Block Design&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接著點選 &lt;code&gt;OK&lt;/code&gt; 建立我們的 block design
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
點選 &lt;code&gt;Add IP&lt;/code&gt; 按鈕去增加我們需要的 IP 核
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們首先尋找 &lt;code&gt;Zynq&lt;/code&gt; 並將 &lt;code&gt;ZYNQ7 Processing System&lt;/code&gt; 加入到我們的 Block Design，並點選 &lt;code&gt;Run Block Automation&lt;/code&gt; 對 Zynq 處理器進行一些設定
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
進入到 &lt;code&gt;Run Block Automation&lt;/code&gt; 的設定頁面後，確認 &lt;code&gt;processing_system7_0&lt;/code&gt; 有被勾選到，並且 &lt;code&gt;Cross Trigger In&lt;/code&gt; 以及 &lt;code&gt;Cross Trigger Out&lt;/code&gt; 都是 &lt;code&gt;Disable&lt;/code&gt; 的狀態，點選 Ok 結束設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
上面的設定好了後，就會看到 ZYNQ7 Processing System 的 DDR 以及 FIXED_IO 都有接線出來
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
點選 &lt;code&gt;Add IP&lt;/code&gt; 按鈕去增加我們需要的 IP 核，這次我們要增加 &lt;code&gt;AXI_GPIO&lt;/code&gt; ，用來對可程式邏輯(Programmable Logic, PL)區域的 LED 進行控制，完成後點選上方的 &lt;code&gt;Run Connection Automation&lt;/code&gt; 按鈕
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 &lt;code&gt;Run Conenction Automation&lt;/code&gt; 視窗內，我們選擇 &lt;code&gt;Custom&lt;/code&gt; (其實也可以在這邊直接選擇 &lt;code&gt;leds 4bits&lt;/code&gt;)
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb8-1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來勾選 &lt;code&gt;S_AXI&lt;/code&gt; ，並點選 Ok 進行確認。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb8.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
好了後會像這樣，我們接下來對 &lt;code&gt;axi_gpio_0&lt;/code&gt; 這個區塊點兩下，進行手動設定
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb9.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 &lt;code&gt;IP Configuration&lt;/code&gt; 頁面，設定 GPIO 為輸出腳，並設寬度為 &lt;code&gt;4&lt;/code&gt; ，這邊我將輸出預設值設定為 0xF, 也就是預設這四個 LED 用的輸出腳都是 High 的電壓。完成後點選 OK, 結束 AXI_GPIO 的設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb10.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
接下來點選 &lt;code&gt;Validate Design&lt;/code&gt; 按鈕，我們要確認我們的 Block Design 沒問題才能夠繼續往下走。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb11.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
正常來講不會有啥問題才對，我們結束 Block Design 的工作
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/cb12.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org3b6e943&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3b6e943&quot;&gt;加入 Constraints&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org3b6e943&quot;&gt;
&lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/pl_led/&quot;&gt;zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍&lt;/a&gt; 一文有提到如何取得 Constraints 檔案，不過為了讓這篇文章完整，我們再講一次。
&lt;/p&gt;

&lt;p&gt;
我們先連結到 &lt;a href=&quot;https://reference.digilentinc.com/zybo:zybo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zybo Resource Center&lt;/a&gt; 去下載 &lt;code&gt;Master XDC&lt;/code&gt; 檔案。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/dl_constraints.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
你也可以直接透過 wget 命令下載並解壓出 &lt;code&gt;ZYBO_Master.xdc&lt;/code&gt; 這個檔案，它就是本節要加入的 Constraints 檔
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp $ wget https://reference.digilentinc.com/_media/zybo/zybo_master_xdc.zip
coldnew@gentoo /tmp $ unzip zybo_master_xdc.zip
Archive:  zybo_master_xdc.zip
  inflating: ZYBO_Master.xdc
&lt;/pre&gt;

&lt;p&gt;
接下來一樣選擇 &lt;code&gt;Project Manager -&amp;gt; Add sources&lt;/code&gt; 來增加檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/as1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這次我們要增加的是 Constraints 檔，因此選擇 &lt;code&gt;Add or create constraints&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/add_constraints1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
透過 &lt;code&gt;Add Files&lt;/code&gt; 添加剛剛下載的 ZYBO_Master.xdc 檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/add_constraints2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org383e874&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org383e874&quot;&gt;ZYBO_Master.xdc&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org383e874&quot;&gt;
&lt;p&gt;
在 ZYBO_Master.xdc 裡面，預設所有對應接腳都是被註解掉的，這邊我們反註解我們需要的 led 接腳，要記得一下這邊的 I/O 名稱，我們等等要和產生出來的 HDL Wrapper 進行對應的工作。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LEDs&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23P_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23N_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M15 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_0_35&lt;/span&gt;
set_property PACKAGE_PIN G14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L3N_T0_DQS_AD1N_35&lt;/span&gt;
set_property PACKAGE_PIN D18 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣我們就可以準備將 Block Design 和硬體接腳對應在一起了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgfe3170e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfe3170e&quot;&gt;產生 HDL Wrapper&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfe3170e&quot;&gt;
&lt;p&gt;
接下來我們要透過 Block Design 產生我們的 HDL wrapper，對你的 Block Design 檔案點選右鍵，選擇 &lt;code&gt;Create HDL Wrapper&lt;/code&gt; 。它會根據你專案設定的語言 (VHDL 或是 Verilog) 來產生相對的 HDL 程式碼。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
產生出來的東西我們可能需要改些東西，為了避免麻煩這邊我選第一個選項。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
好了後，假設你的 Block Design 檔案叫做 design_1.bd，那就會產生 design_1_wrapper.v 或是 design_1_wrapper.vhdl 這樣的檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
我們接著要修改這個 HDL Wrapper，這是為什麼呢? 回去看一下前面做好的 Block Design 以及 Constraints 的資訊，我們可以看到 Block Design 設定好的 AXI_GPIO 其輸出腳叫做 &lt;code&gt;gpio_rtl&lt;/code&gt; ，而在 Constraints 中，我們目標的 LED 輸出腳名稱是 &lt;code&gt;led&lt;/code&gt; ，因此我們要調整一下這個 HDL Wrapper 讓 &lt;code&gt;gpio_rtl&lt;/code&gt; 和 &lt;code&gt;led&lt;/code&gt; 可以對應在一起。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
由於在本範例中，design_1_wrapper.v 也就是 toplevel 的模組，因此在這邊將對外的 &lt;code&gt;gpio_rtl_tri_o&lt;/code&gt; 接腳改為 &lt;code&gt;led&lt;/code&gt; 讓它接出即可。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-diff&quot;&gt;&lt;span style=&quot;color: #dddddd;&quot;&gt;diff --git a/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v b/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;index 7b1b0bd..c57caa0 100644&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;--- &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;a/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;+++ &lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;b/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -31,7 +31,7 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     FIXED_IO_ps_clk,&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     FIXED_IO_ps_porb,&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;     FIXED_IO_ps_srstb,&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;    gpio_rtl_tri_o);&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;    led);&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout [14:0]DDR_addr;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout [2:0]DDR_ba;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout DDR_cas_n;&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -53,7 +53,7 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout FIXED_IO_ps_clk;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout FIXED_IO_ps_porb;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   inout FIXED_IO_ps_srstb;&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;  output [3:0]gpio_rtl_tri_o;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;  output [3:0]led;&lt;/span&gt;

&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire [14:0]DDR_addr;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire [2:0]DDR_ba;&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -76,7 +76,7 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire FIXED_IO_ps_clk;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire FIXED_IO_ps_porb;&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;   wire FIXED_IO_ps_srstb;&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;  wire [3:0]gpio_rtl_tri_o;&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;  wire [3:0]led;&lt;/span&gt;

&lt;span style=&quot;color: #dddddd;&quot;&gt;   design_1 design_1_i&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;        (.DDR_addr(DDR_addr),&lt;/span&gt;
&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt;@@ -100,5 +100,5 @@&lt;/span&gt;&lt;span style=&quot;color: #aaaaaa; background-color: #202020;&quot;&gt; module design_1_wrapper&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         .FIXED_IO_ps_clk(FIXED_IO_ps_clk),&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         .FIXED_IO_ps_porb(FIXED_IO_ps_porb),&lt;/span&gt;
&lt;span style=&quot;color: #dddddd;&quot;&gt;         .FIXED_IO_ps_srstb(FIXED_IO_ps_srstb),&lt;/span&gt;
&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ff3333; font-weight: bold;&quot;&gt;        .gpio_rtl_tri_o(gpio_rtl_tri_o));&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;+&lt;/span&gt;&lt;span style=&quot;color: #aaffaa; font-weight: bold;&quot;&gt;        .gpio_rtl_tri_o(led));&lt;/span&gt;
 endmodule
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
改好後，點選上方的 &lt;code&gt;Run Implementation&lt;/code&gt; 來確認我們這樣的修改是否能編譯/驗證成功。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgb77b41e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb77b41e&quot;&gt;產生位元流 (bitstream)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb77b41e&quot;&gt;
&lt;p&gt;
前面的處理都好了後，接下來點選 &lt;code&gt;Program and Debug -&amp;gt; Generate Bitstream&lt;/code&gt; 去讓 Vivado 將這個專案產生出位元流 (bitstream)，ZYNQ 會根據 bitstream 的資訊對 FPGA 進行設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當 bitstream 產生完成後，由於我們這次的實作，是要透過寫 C 語言程式來控制 Zynq 進行 LED 的亮暗，因此要先將剛剛產生的硬體資訊輸出給 Xilinx SDK 去。
&lt;/p&gt;

&lt;p&gt;
點選 &lt;code&gt;File -&amp;gt; Export -&amp;gt; Export Hardware&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w7.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
確定你有勾選 &lt;code&gt;Include bitstream&lt;/code&gt; ，點選 Ok
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w8.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
完成後，啟動 Xilinx SDK
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/w9.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6e9c350&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6e9c350&quot;&gt;Xilinx SDK&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6e9c350&quot;&gt;
&lt;p&gt;
我們啟動 Xilinx SDK 後，可以先看到一些像是位址映射 (Address Map) 的資訊
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;File -&amp;gt; New -&amp;gt; Application Project&lt;/code&gt; 去建立新的專案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這邊我命名這個專案叫做 LED，並且為獨立的程式
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Empty Application&lt;/code&gt; ，我們要自己來寫我們的程式。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
當專案建立完成後，會自動打開 &lt;code&gt;LED_bsp&lt;/code&gt; 裡面的 &lt;code&gt;system.mss&lt;/code&gt; ，裡面會顯示我們所用的週邊範例程式碼以及使用手冊的連結，我們可以點選這些連結來了解這些週邊要怎樣使用。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/doc.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你連結點選不開的話，可以到你安裝 SDK 的路徑下去尋找，比如說我裝的是 Vivado 2016.2，則手冊的路徑在
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
/opt/Xilinx/SDK/2016.2/data/embeddedsw/XilinxProcessorIPLib/drivers

&lt;/pre&gt;

&lt;p&gt;
這裡給個結果的範例，比如我想要查詢 xgpio 的資料，則可以看到如下的 HTML 檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/doc2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf6f446d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf6f446d&quot;&gt;建立 main.c&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgf6f446d&quot;&gt;
&lt;p&gt;
由於我們建立的是空白專案，必須自己添加自己的主程式，因此我們對 LED 專案的 src 按下右鍵，選擇建立新的檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這邊將它命名為 &lt;code&gt;main.c&lt;/code&gt; ，也就是我們唯一的主程式，點選 &lt;code&gt;Finish&lt;/code&gt; 完成檔案建立。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/x6.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在 main.c 加入以下程式碼，具體功能待會在說明。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xparameters.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xgpio.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdlib.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;i&lt;/span&gt; = 0;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;i = 0; i &amp;lt; simple_delay; i++&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;

&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;argc&lt;/span&gt;, &lt;span style=&quot;color: #fff59d;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #aaccff;&quot;&gt;argv&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #fff59d;&quot;&gt;XGpio&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_gpio&lt;/span&gt;;              &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LED Instance &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Initialize LED GPIO settings &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        XGpio_Initialize&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, XPAR_AXI_GPIO_0_DEVICE_ID&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
        XGpio_SetDataDirection&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1, 0&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Output something via UART1, 115200 baudrate &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        printf&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start to blink led_gpio !!!\n\r&quot;&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_value&lt;/span&gt; = 0x03;   &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;default led_gpio value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;while&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;1&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;
                printf&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;led_gpio value set to 0x%X\n\r&quot;&lt;/span&gt;, led_value&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;

                &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Set GPIO Channel 1 value. &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
                XGpio_DiscreteWrite&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1 , led_value&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;

                &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;sleep and change led_gpio value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
                simple_delay&lt;span style=&quot;color: #aaccff;&quot;&gt;(&lt;/span&gt;10000000&lt;span style=&quot;color: #aaccff;&quot;&gt;)&lt;/span&gt;;
                led_value = ~led_value;
        &lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;

        &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt; 0;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org91a33b6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org91a33b6&quot;&gt;main.c&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org91a33b6&quot;&gt;
&lt;p&gt;
在 main.c 的開頭，我們載入了需要使用的幾個標頭檔，在 Xilinx SDK 中，已經包含了一些預設好的函式庫等功能，具體資訊請查閱 &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_3/oslib_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx OS and Libraries Document Collection&lt;/a&gt; (UG643) 手冊。
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;xparameters.h&lt;/code&gt; 這個標頭檔則是 Xilinx SDK 自己產生的，裡面會包含一些關於你使用的 IP Core 的資訊，比如標準輸出的基底位址 (base address) 或是其他和你這份硬體相關的設定。而 &lt;code&gt;xgpio.h&lt;/code&gt; 則提供了一些高階的抽象函式，讓你開發 GPIO 相關的功能可以更加輕鬆。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xparameters.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;xgpio.h&quot;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdio.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #ff8888;&quot;&gt;#include&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;stdlib.h&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我們用一個非常簡單的延遲 (delay) 函式讓 CPU 很忙碌的計算，來達到延遲程式的效果。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;simple_delay&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;volatile&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;i&lt;/span&gt; = 0;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;i = 0; i &amp;lt; simple_delay; i++&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
接下來是我們的主程式，我們將它拆開來看，後面見到的程式碼都會塞到主程式中。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;argc&lt;/span&gt;, &lt;span style=&quot;color: #fff59d;&quot;&gt;char&lt;/span&gt; *&lt;span style=&quot;color: #aaccff;&quot;&gt;argv&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;[]&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;code&lt;/span&gt;
        &lt;span style=&quot;color: #aaffaa;&quot;&gt;return&lt;/span&gt; 0;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
是時候進入到 GPIO 的功能設定，注意到 &lt;code&gt;XPAR_AXI_GPIO_0_DEVICE_ID&lt;/code&gt; 這個，你可以把它對應回我們的 Block Design 的 &lt;code&gt;axi_gpio_0&lt;/code&gt; ，這個巨集(Macro)即是 Xilinx SDK 產生，定義在 &lt;code&gt;xparameter.h&lt;/code&gt; 裡面。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;XGpio&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_gpio&lt;/span&gt;;              &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LED Instance &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Initialize LED GPIO settings &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
XGpio_Initialize&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, XPAR_AXI_GPIO_0_DEVICE_ID&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;
XGpio_SetDataDirection&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1, 0&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
我們透過 printf 去顯示一些簡單得除錯訊息，這邊的訊息會透過 UART 輸出，你可以透過電腦端的軟體來收到(ex: gtkterm、teraterm)，我自己是透過 emacs 的 &lt;code&gt;serial-term&lt;/code&gt; 命令來收訊息，baud rate 則是設定為 &lt;code&gt;115200&lt;/code&gt; 、連接目標則是 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Output something via UART1, 115200 baudrate &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
printf&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;Start to blink led !!!\n\r&quot;&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
最後，使用一個無窮迴圈去控制 LED 數值的變化，並透過 &lt;code&gt;XGpio_DiscreteWrite&lt;/code&gt; 去對 GPIO 的通道 1 (參考前面 Block Design) 進行資料寫入的工程，再調整下一次到迴圈時要的 LED 數值，一直重複這些動作。
&lt;/p&gt;

&lt;p&gt;
就這樣，我們的程式完成了。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-c&quot;&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;led_value&lt;/span&gt; = 0x03;   &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;default led value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #aaffaa;&quot;&gt;while&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;1&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;{&lt;/span&gt;
        printf&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;&quot;led value set to 0x%X\n\n&quot;&lt;/span&gt;, led_value&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Set GPIO Channel 1 value. &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        XGpio_DiscreteWrite&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;&amp;amp;led_gpio, 1, led_value&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;

        &lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;sleep and change led value &lt;/span&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;*/&lt;/span&gt;
        simple_delay&lt;span style=&quot;color: #81d4fa;&quot;&gt;(&lt;/span&gt;10000000&lt;span style=&quot;color: #81d4fa;&quot;&gt;)&lt;/span&gt;;
        led_value = ~led_value;
&lt;span style=&quot;color: #aadddd;&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org601dbdc&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org601dbdc&quot;&gt;下載到 Zybo board&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org601dbdc&quot;&gt;
&lt;p&gt;
確定此時你有將 Zybo board 接到電腦，並且你 &lt;code&gt;JP5&lt;/code&gt; 設定在 &lt;code&gt;QSPI&lt;/code&gt; 模式下，就像這樣
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/qspi.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Xilinx Tools -&amp;gt; Program FPGA&lt;/code&gt; 進行 FPGA 的燒錄。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
確認要燒錄的資料無誤後，點選 &lt;code&gt;Program&lt;/code&gt; 將位元流 (bitstream) 燒錄到 FPGA 去，燒完後你會發現 LD0 ~ LD3 都是亮燈的狀態，因為我們在 Block Design 預設 AXI_GPIO 輸出為 &lt;code&gt;0xF&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
選擇 &lt;code&gt;Run -&amp;gt; Run Configuration&lt;/code&gt; 進行執行前的一些設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
我們在 &lt;code&gt;Xilinx C/C++ Application(GDB)&lt;/code&gt; 建立一個新的設定，由於我們已經燒錄好 FPGA 因此只需要重起處理器系統 (Processing System, PS)即可。
&lt;/p&gt;

&lt;p&gt;
確認你有啟用 &lt;code&gt;ps7_init&lt;/code&gt; 這些設定，ps7_init 定義了一些初始化的程式，我們之所以能夠使用 &lt;code&gt;printf&lt;/code&gt; 將資訊透過 UART 輸出，也是透過 ps7_init 的協助，具體請參考 &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt;, p.24 頁。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
除了這邊設定外，別忘記指定要跑的專案，Xilinx SDK 是允許同份硬體設計檔跑很多種專案的，以本文範例而言，我們要跑得專案叫做 &lt;code&gt;LED&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/d5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
都設定好後，點選 &lt;code&gt;Run&lt;/code&gt; 然後祈禱一切正常!!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbf5d60c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbf5d60c&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbf5d60c&quot;&gt;
&lt;p&gt;
在你執行 &lt;i&gt;Program device&lt;/i&gt; 以及 &lt;i&gt;Run&lt;/i&gt; 後，Xilinx SDK 會將位元流(bitstream) 下載到我們的 Zybo Board，接著重設 CPU 後執行我們下載的程式，最後完成的成果如下
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/result.gif&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
如果你有啟用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等的話，啟動它並開啟 &lt;code&gt;/dev/ttyUSB1&lt;/code&gt; 後，設定 baudrate 為 &lt;code&gt;115200&lt;/code&gt; ，就會看到我們程式透過 &lt;code&gt;printf&lt;/code&gt; 輸出的訊息
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/dec85bd3/s.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org74be42d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org74be42d&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org74be42d&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/zybo-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 &lt;code&gt;README.md&lt;/code&gt; 檔案
&lt;/p&gt;

&lt;div data-theme=&quot;default&quot; data-height=&quot;&quot; data-width=&quot;400&quot; data-github=&quot;coldnew/zybo-examples&quot; class=&quot;github-card&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgbec2da4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbec2da4&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgbec2da4&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;http://www.zynqbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Zynq Book&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://sunsided.github.io/zybo-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO Quick-Start Tutorial&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[3]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_1/ug1043-embedded-system-tools.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XILINX - Embedded System Tools Reference Manual&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[4]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AXI GPIO v2.0 LogiCORE IP Product Guide&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[5]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_3/oslib_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xilinx OS and Libraries Document Collection (UG643)&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[6]&lt;/code&gt; &lt;a href=&quot;http://www.dbrss.org/zybo/tutorial1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO Zync-7000 Development Board Work - Getting the LEDs to flash&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[7]&lt;/code&gt; &lt;a href=&quot;http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/ug1165-zynq-embedded-design-tutorial.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zynq-7000 All Programmable SoC: Embedded Design Tutorial A Hands-On Guide to Effective Embedded System Design (UG1165)&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/dec85bd3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍</title>
      <link>https://coldnew.github.io/6c5717d7/</link>
      <guid>https://coldnew.github.io/6c5717d7/</guid>
      <pubDate>Sat, 02 Jul 2016 08:40:00 GMT</pubDate>
      <description>
         &lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在進入到這種混搭 ARM/FPGA 的開發板的世界之前，很多人都是從純粹的 FPGA 開發板玩起，因此也讓我們看看如何僅透過可程式邏輯(Programmable Logic, PL) 來對 Zybo board 上面的 LED 進行閃爍控制。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
本文將採用業界比較常用的 Verilog 進行示範。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgdab5f42&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdab5f42&quot;&gt;開發目標&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdab5f42&quot;&gt;
&lt;p&gt;
我們要透過純粹的可程式邏輯(Programmable Logic, PL) 去控制 LED，也就是說，我們只寫硬體描述語言 Verilog 來控制 Zybo board 上面的 LED，讓他依照我們設定的頻率進行閃爍/亮滅。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/zybo_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
根據 &lt;a href=&quot;https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO FPGA Board Reference Manual&lt;/a&gt; 上面的資訊，我們想要控制的這四個在板子上的 LED 都是位於可程式邏輯區(Programmable Logic, PL)可以碰觸到的地方，如果你想要透過 Zynq 去對這些 LED 進行控制，你就會需要透過  AXI GPIO 的幫助，就像這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/zynq_axi_gpio_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
關於如何在 Zynq 下面控制這幾個 LED，這部份我們將下一篇文章再來提及。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge7f1b67&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge7f1b67&quot;&gt;建立我們的專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge7f1b67&quot;&gt;
&lt;p&gt;
我們首先當然是建立我們的專案了，在進行這一步前，請先確定你有按照 &lt;a href=&quot;https://coldnew.github.io/zybo-board/vivado_zybo_setting_file/&quot;&gt;讓 Vivado 有 Zybo Board 的設定檔&lt;/a&gt; 一文所說，將 Zybo board 的設計導入。
&lt;/p&gt;

&lt;p&gt;
啟動了 Vivado 後，點選 &lt;code&gt;Create Project&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj0.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來指定好你的專案名稱與路徑
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
選擇 &lt;code&gt;RTL Project&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/new_prj.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
在開發板選項中，選擇 &lt;code&gt;Zybo Board&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/new_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
完成專案建立
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/new_prj3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org59cbb8e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org59cbb8e&quot;&gt;撰寫程式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org59cbb8e&quot;&gt;
&lt;p&gt;
在專案建立完後，接下來就是添加並撰寫我們的 Verilog 程式，點選 &lt;code&gt;Project Manager -&amp;gt; Add sources&lt;/code&gt; 來增加檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
由於我們要增加的是可程式邏輯的設計檔，因此選擇 &lt;code&gt;Add or create design sources&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_sources1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Create File&lt;/code&gt; 去建立 &lt;code&gt;top.v&lt;/code&gt; 這個檔案，這也同時是我們的主程式
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_sources2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
建立好 top.v 後，點選它來進行編輯
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_sources3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org267fe73&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org267fe73&quot;&gt;top.v&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org267fe73&quot;&gt;
&lt;p&gt;
在我們的主程式 top.v 中，我們定義了一組暫存器用來存放當前計數的狀態，每計數 125 百萬次後，就讓 led 暫存器的數值增加，反之則是讓計數器的內容增加。
&lt;/p&gt;

&lt;p&gt;
選擇計數 125 百萬次的原因，在於我們會把 &lt;code&gt;clk&lt;/code&gt; 這個輸入，連結到 &lt;code&gt;125M Hz&lt;/code&gt; 的時脈輸入，這個時脈是由 50M Hz 的石英振盪器經過 Ethernet PHY 後所產生的
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/clock_source.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
也就是說，由於我們的時脈輸入將會設定為 125 MHz，因此讓計數器計數 125 百萬次後調整 LED 暫存器的資訊，相當於 &lt;code&gt;每 1 秒&lt;/code&gt; 修改一次 LED 暫存器的內容
&lt;/p&gt;

&lt;p&gt;
我們的 top.v 程式如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;`timescale&lt;/span&gt; 1ns / 1ps

&lt;span style=&quot;color: #aaffaa;&quot;&gt;module&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;top&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;output&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;3:0&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; led,
           &lt;span style=&quot;color: #fff59d;&quot;&gt;input&lt;/span&gt; clk&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;

   &lt;span style=&quot;color: #fff59d;&quot;&gt;reg&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;3:0&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;     led;
   &lt;span style=&quot;color: #fff59d;&quot;&gt;reg&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;26:0&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;    counter;

   &lt;span style=&quot;color: #aaffaa;&quot;&gt;always&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;posedge&lt;/span&gt; clk&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;begin&lt;/span&gt;
      &lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counter == 27&#39;d1250000000&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;begin&lt;/span&gt;
         led &amp;lt;= led + 1;
         counter &amp;lt;= 0;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;end&lt;/span&gt;
      &lt;span style=&quot;color: #aaffaa;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;begin&lt;/span&gt;
         counter &amp;lt;= counter +1;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;end&lt;/span&gt;
   &lt;span style=&quot;color: #fff59d;&quot;&gt;end&lt;/span&gt;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge5b8b19&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge5b8b19&quot;&gt;加入 Constraints&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge5b8b19&quot;&gt;
&lt;p&gt;
我們撰寫好了 Verilog 模組 top.v，接下來就是要讓這模組的 I/O 和 Zybo board 的腳位對應到，我們先連結到 &lt;a href=&quot;https://reference.digilentinc.com/zybo:zybo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zybo Resource Center&lt;/a&gt; 去下載 &lt;code&gt;Master XDC&lt;/code&gt; 檔案。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/dl_constraints.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
你也可以直接透過 wget 命令下載並解壓出 &lt;code&gt;ZYBO_Master.xdc&lt;/code&gt; 這個檔案，它就是本節要加入的 Constraints 檔
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp $ wget https://reference.digilentinc.com/_media/zybo/zybo_master_xdc.zip
coldnew@gentoo /tmp $ unzip zybo_master_xdc.zip
Archive:  zybo_master_xdc.zip
  inflating: ZYBO_Master.xdc
&lt;/pre&gt;

&lt;p&gt;
接下來一樣選擇 &lt;code&gt;Project Manager -&amp;gt; Add sources&lt;/code&gt; 來增加檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這次我們要增加的是 Constraints 檔，因此選擇 &lt;code&gt;Add or create constraints&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_constraints1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
透過 &lt;code&gt;Add Files&lt;/code&gt; 添加剛剛下載的 ZYBO_Master.xdc 檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_constraints2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org1ba98b9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1ba98b9&quot;&gt;ZYBO_Master.xdc&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org1ba98b9&quot;&gt;
&lt;p&gt;
在 ZYBO_Master.xdc 裡面，預設所有對應接腳都是被註解掉的，這邊我們反註解我們需要的 clk 以及 led 接腳，要注意到這邊的 I/O 名稱要對應到前面所寫的 top.v 裡面的 I/O 名稱。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Clock signal&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L11P_T1_SRCC_35&lt;/span&gt;
set_property PACKAGE_PIN L16 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports clk&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports clk&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;create_clock -add -name sys_clk_pin -period 8.00 -waveform {0 4} [get_ports clk]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LEDs&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23P_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23N_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M15 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_0_35&lt;/span&gt;
set_property PACKAGE_PIN G14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L3N_T0_DQS_AD1N_35&lt;/span&gt;
set_property PACKAGE_PIN D18 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣我們就把 Verilog 模組和實際硬體對應的部份解決了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge0adee7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge0adee7&quot;&gt;產生位元流 (bitstream)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge0adee7&quot;&gt;
&lt;p&gt;
前面的處理都好了後，接下來點選 &lt;code&gt;Program and Debug -&amp;gt; Generate Bitstream&lt;/code&gt; 去讓 Vivado 將這個專案產生出位元流 (bitstream)，ZYNQ 會根據 bitstream 的資訊對 FPGA 進行設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/gen_bitstream.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當 bitstream 產生完成後，會彈出一個視窗，這邊我們選擇 &lt;code&gt;Open Harware Manager&lt;/code&gt; 進入到下載程序
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-orgc4b8dcd&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc4b8dcd&quot;&gt;下載到 Zybo board&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc4b8dcd&quot;&gt;
&lt;p&gt;
確定此時你有將 Zybo board 接到電腦，並且你 &lt;code&gt;JP5&lt;/code&gt; 設定在 &lt;code&gt;QSPI&lt;/code&gt; 模式下，就像這樣
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/qspi.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
點選 &lt;code&gt;Open target&lt;/code&gt; 選擇我們的目標開發板
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 Auto Connect 讓 Vivado 自行尋找下載目標
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Vivado 告訴我們找到了一台使用 &lt;code&gt;xc7z010&lt;/code&gt; IC 的板子，就是我們的 Zybo board，選擇這個進行燒錄
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在下載前，Vivado 會在確認一次 bitstream 的位置，確認無誤後點選 &lt;code&gt;Program&lt;/code&gt; 進行燒錄
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org085cde7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org085cde7&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org085cde7&quot;&gt;
&lt;p&gt;
在你執行 &lt;i&gt;Program device&lt;/i&gt; 後，Vivado 會將剛剛產生的 bitstream 下載到我們的 Zybo Board 並執行它，最後完成的成果如下
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/result.gif&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org10fc4a5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org10fc4a5&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org10fc4a5&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/zybo-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 &lt;code&gt;README.md&lt;/code&gt; 檔案
&lt;/p&gt;

&lt;div data-theme=&quot;default&quot; data-height=&quot;&quot; data-width=&quot;400&quot; data-github=&quot;coldnew/zybo-examples&quot; class=&quot;github-card&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-org8fac8d6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8fac8d6&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8fac8d6&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;http://johanngoetz.blogspot.tw/2014/04/first-steps-with-zybo-development-board.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FPGA Programming: First Steps with the ZYBO Development Board&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://www.borisivanov.com/fpga/verilog_zybo1.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple Verilog example useing Vivado 2015 with zybo FPGA board v0.1&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[3]&lt;/code&gt; &lt;a href=&quot;http://ece.gmu.edu/coursewebpages/ECE/ECE699_SW_HW/S15/viewgraphs/ECE699_lecture_3.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECE 699: Lecture 3 General Purpose Input Output GPIO&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[4]&lt;/code&gt; &lt;a href=&quot;http://www.beyond-circuits.com/wordpress/tutorial/tutorial1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial 1: The Simplest FPGA in the World | Beyond Circuits&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
      <content:encoded><![CDATA[&lt;div id=&quot;content&quot;&gt;
&lt;p&gt;
在進入到這種混搭 ARM/FPGA 的開發板的世界之前，很多人都是從純粹的 FPGA 開發板玩起，因此也讓我們看看如何僅透過可程式邏輯(Programmable Logic, PL) 來對 Zybo board 上面的 LED 進行閃爍控制。
&lt;/p&gt;

&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;p&gt;
本文將採用業界比較常用的 Verilog 進行示範。
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgdab5f42&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdab5f42&quot;&gt;開發目標&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdab5f42&quot;&gt;
&lt;p&gt;
我們要透過純粹的可程式邏輯(Programmable Logic, PL) 去控制 LED，也就是說，我們只寫硬體描述語言 Verilog 來控制 Zybo board 上面的 LED，讓他依照我們設定的頻率進行閃爍/亮滅。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/zybo_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
根據 &lt;a href=&quot;https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZYBO FPGA Board Reference Manual&lt;/a&gt; 上面的資訊，我們想要控制的這四個在板子上的 LED 都是位於可程式邏輯區(Programmable Logic, PL)可以碰觸到的地方，如果你想要透過 Zynq 去對這些 LED 進行控制，你就會需要透過  AXI GPIO 的幫助，就像這樣:
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/zynq_axi_gpio_led.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
關於如何在 Zynq 下面控制這幾個 LED，這部份我們將下一篇文章再來提及。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge7f1b67&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge7f1b67&quot;&gt;建立我們的專案&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge7f1b67&quot;&gt;
&lt;p&gt;
我們首先當然是建立我們的專案了，在進行這一步前，請先確定你有按照 &lt;a href=&quot;https://coldnew.github.io/zybo-board/vivado_zybo_setting_file/&quot;&gt;讓 Vivado 有 Zybo Board 的設定檔&lt;/a&gt; 一文所說，將 Zybo board 的設計導入。
&lt;/p&gt;

&lt;p&gt;
啟動了 Vivado 後，點選 &lt;code&gt;Create Project&lt;/code&gt; 。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj0.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
接下來指定好你的專案名稱與路徑
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
選擇 &lt;code&gt;RTL Project&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/new_prj.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
在開發板選項中，選擇 &lt;code&gt;Zybo Board&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/new_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
完成專案建立
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/new_prj3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org59cbb8e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org59cbb8e&quot;&gt;撰寫程式&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org59cbb8e&quot;&gt;
&lt;p&gt;
在專案建立完後，接下來就是添加並撰寫我們的 Verilog 程式，點選 &lt;code&gt;Project Manager -&amp;gt; Add sources&lt;/code&gt; 來增加檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
由於我們要增加的是可程式邏輯的設計檔，因此選擇 &lt;code&gt;Add or create design sources&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_sources1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 &lt;code&gt;Create File&lt;/code&gt; 去建立 &lt;code&gt;top.v&lt;/code&gt; 這個檔案，這也同時是我們的主程式
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_sources2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;
建立好 top.v 後，點選它來進行編輯
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_sources3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org267fe73&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org267fe73&quot;&gt;top.v&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org267fe73&quot;&gt;
&lt;p&gt;
在我們的主程式 top.v 中，我們定義了一組暫存器用來存放當前計數的狀態，每計數 125 百萬次後，就讓 led 暫存器的數值增加，反之則是讓計數器的內容增加。
&lt;/p&gt;

&lt;p&gt;
選擇計數 125 百萬次的原因，在於我們會把 &lt;code&gt;clk&lt;/code&gt; 這個輸入，連結到 &lt;code&gt;125M Hz&lt;/code&gt; 的時脈輸入，這個時脈是由 50M Hz 的石英振盪器經過 Ethernet PHY 後所產生的
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/clock_source.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
也就是說，由於我們的時脈輸入將會設定為 125 MHz，因此讓計數器計數 125 百萬次後調整 LED 暫存器的資訊，相當於 &lt;code&gt;每 1 秒&lt;/code&gt; 修改一次 LED 暫存器的內容
&lt;/p&gt;

&lt;p&gt;
我們的 top.v 程式如下
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-verilog&quot;&gt;&lt;span style=&quot;color: #ff8888;&quot;&gt;`timescale&lt;/span&gt; 1ns / 1ps

&lt;span style=&quot;color: #aaffaa;&quot;&gt;module&lt;/span&gt; &lt;span style=&quot;color: #aaccff;&quot;&gt;top&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #fff59d;&quot;&gt;output&lt;/span&gt; &lt;span style=&quot;color: #81d4fa;&quot;&gt;[&lt;/span&gt;3:0&lt;span style=&quot;color: #81d4fa;&quot;&gt;]&lt;/span&gt; led,
           &lt;span style=&quot;color: #fff59d;&quot;&gt;input&lt;/span&gt; clk&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt;;

   &lt;span style=&quot;color: #fff59d;&quot;&gt;reg&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;3:0&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;     led;
   &lt;span style=&quot;color: #fff59d;&quot;&gt;reg&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;26:0&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;    counter;

   &lt;span style=&quot;color: #aaffaa;&quot;&gt;always&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;@&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #aaffaa;&quot;&gt;posedge&lt;/span&gt; clk&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;begin&lt;/span&gt;
      &lt;span style=&quot;color: #aaffaa;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #aadddd;&quot;&gt;(&lt;/span&gt;counter == 27&#39;d1250000000&lt;span style=&quot;color: #aadddd;&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;begin&lt;/span&gt;
         led &amp;lt;= led + 1;
         counter &amp;lt;= 0;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;end&lt;/span&gt;
      &lt;span style=&quot;color: #aaffaa;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #fff59d;&quot;&gt;begin&lt;/span&gt;
         counter &amp;lt;= counter +1;
      &lt;span style=&quot;color: #fff59d;&quot;&gt;end&lt;/span&gt;
   &lt;span style=&quot;color: #fff59d;&quot;&gt;end&lt;/span&gt;

&lt;span style=&quot;color: #aaffaa;&quot;&gt;endmodule&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge5b8b19&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge5b8b19&quot;&gt;加入 Constraints&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge5b8b19&quot;&gt;
&lt;p&gt;
我們撰寫好了 Verilog 模組 top.v，接下來就是要讓這模組的 I/O 和 Zybo board 的腳位對應到，我們先連結到 &lt;a href=&quot;https://reference.digilentinc.com/zybo:zybo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zybo Resource Center&lt;/a&gt; 去下載 &lt;code&gt;Master XDC&lt;/code&gt; 檔案。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/dl_constraints.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
你也可以直接透過 wget 命令下載並解壓出 &lt;code&gt;ZYBO_Master.xdc&lt;/code&gt; 這個檔案，它就是本節要加入的 Constraints 檔
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
coldnew@gentoo /tmp $ wget https://reference.digilentinc.com/_media/zybo/zybo_master_xdc.zip
coldnew@gentoo /tmp $ unzip zybo_master_xdc.zip
Archive:  zybo_master_xdc.zip
  inflating: ZYBO_Master.xdc
&lt;/pre&gt;

&lt;p&gt;
接下來一樣選擇 &lt;code&gt;Project Manager -&amp;gt; Add sources&lt;/code&gt; 來增加檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/create_prj2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
這次我們要增加的是 Constraints 檔，因此選擇 &lt;code&gt;Add or create constraints&lt;/code&gt;
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_constraints1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
透過 &lt;code&gt;Add Files&lt;/code&gt; 添加剛剛下載的 ZYBO_Master.xdc 檔案
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/add_constraints2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org1ba98b9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1ba98b9&quot;&gt;ZYBO_Master.xdc&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org1ba98b9&quot;&gt;
&lt;p&gt;
在 ZYBO_Master.xdc 裡面，預設所有對應接腳都是被註解掉的，這邊我們反註解我們需要的 clk 以及 led 接腳，要注意到這邊的 I/O 名稱要對應到前面所寫的 top.v 裡面的 I/O 名稱。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;Clock signal&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L11P_T1_SRCC_35&lt;/span&gt;
set_property PACKAGE_PIN L16 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports clk&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports clk&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;create_clock -add -name sys_clk_pin -period 8.00 -waveform {0 4} [get_ports clk]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;LEDs&lt;/span&gt;
&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23P_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;0&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L23N_T3_35&lt;/span&gt;
set_property PACKAGE_PIN M15 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;1&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_0_35&lt;/span&gt;
set_property PACKAGE_PIN G14 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;2&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;

&lt;span style=&quot;color: #5f5f5f; font-style: italic;&quot;&gt;##&lt;/span&gt;&lt;span style=&quot;color: #9ac; font-style: italic;&quot;&gt;IO_L3N_T0_DQS_AD1N_35&lt;/span&gt;
set_property PACKAGE_PIN D18 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
set_property IOSTANDARD LVCMOS33 &lt;span style=&quot;color: #aadddd;&quot;&gt;[&lt;/span&gt;get_ports &lt;span style=&quot;color: #81d4fa;&quot;&gt;{&lt;/span&gt;led&lt;span style=&quot;color: #aaccff;&quot;&gt;[&lt;/span&gt;3&lt;span style=&quot;color: #aaccff;&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #81d4fa;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;color: #aadddd;&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
這樣我們就把 Verilog 模組和實際硬體對應的部份解決了
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge0adee7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge0adee7&quot;&gt;產生位元流 (bitstream)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge0adee7&quot;&gt;
&lt;p&gt;
前面的處理都好了後，接下來點選 &lt;code&gt;Program and Debug -&amp;gt; Generate Bitstream&lt;/code&gt; 去讓 Vivado 將這個專案產生出位元流 (bitstream)，ZYNQ 會根據 bitstream 的資訊對 FPGA 進行設定。
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/gen_bitstream.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
當 bitstream 產生完成後，會彈出一個視窗，這邊我們選擇 &lt;code&gt;Open Harware Manager&lt;/code&gt; 進入到下載程序
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm1.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-orgc4b8dcd&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc4b8dcd&quot;&gt;下載到 Zybo board&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc4b8dcd&quot;&gt;
&lt;p&gt;
確定此時你有將 Zybo board 接到電腦，並且你 &lt;code&gt;JP5&lt;/code&gt; 設定在 &lt;code&gt;QSPI&lt;/code&gt; 模式下，就像這樣
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/qspi.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
點選 &lt;code&gt;Open target&lt;/code&gt; 選擇我們的目標開發板
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm2.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
選擇 Auto Connect 讓 Vivado 自行尋找下載目標
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm3.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Vivado 告訴我們找到了一台使用 &lt;code&gt;xc7z010&lt;/code&gt; IC 的板子，就是我們的 Zybo board，選擇這個進行燒錄
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm4.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
在下載前，Vivado 會在確認一次 bitstream 的位置，確認無誤後點選 &lt;code&gt;Program&lt;/code&gt; 進行燒錄
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/hwm5.png&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org085cde7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org085cde7&quot;&gt;結果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org085cde7&quot;&gt;
&lt;p&gt;
在你執行 &lt;i&gt;Program device&lt;/i&gt; 後，Vivado 會將剛剛產生的 bitstream 下載到我們的 Zybo Board 並執行它，最後完成的成果如下
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https://coldnew.github.io/6c5717d7/result.gif&quot;&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org10fc4a5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org10fc4a5&quot;&gt;取得程式碼&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org10fc4a5&quot;&gt;
&lt;p&gt;
本文的範例已經放置於 &lt;a href=&quot;https://github.com/coldnew/zybo-examples&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 &lt;code&gt;README.md&lt;/code&gt; 檔案
&lt;/p&gt;

&lt;div data-theme=&quot;default&quot; data-height=&quot;&quot; data-width=&quot;400&quot; data-github=&quot;coldnew/zybo-examples&quot; class=&quot;github-card&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;//cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-org8fac8d6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8fac8d6&quot;&gt;延伸閱讀&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org8fac8d6&quot;&gt;
&lt;p&gt;
&lt;code&gt;[1]&lt;/code&gt; &lt;a href=&quot;http://johanngoetz.blogspot.tw/2014/04/first-steps-with-zybo-development-board.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FPGA Programming: First Steps with the ZYBO Development Board&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[2]&lt;/code&gt; &lt;a href=&quot;http://www.borisivanov.com/fpga/verilog_zybo1.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple Verilog example useing Vivado 2015 with zybo FPGA board v0.1&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[3]&lt;/code&gt; &lt;a href=&quot;http://ece.gmu.edu/coursewebpages/ECE/ECE699_SW_HW/S15/viewgraphs/ECE699_lecture_3.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECE 699: Lecture 3 General Purpose Input Output GPIO&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;[4]&lt;/code&gt; &lt;a href=&quot;http://www.beyond-circuits.com/wordpress/tutorial/tutorial1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial 1: The Simplest FPGA in the World | Beyond Circuits&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
]]></content:encoded>
      <comments>https://coldnew.github.io/6c5717d7/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
