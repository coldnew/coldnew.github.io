<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>coldnew&amp;#39;s blog</title>
    <link>https://coldnew.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 23 Apr 2017 12:27:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>將 Orange Pi Zero 改造成 AirPlay 音頻播放器</title>
      <link>https://coldnew.github.io/d48bba9e/</link>
      <guid>https://coldnew.github.io/d48bba9e/</guid>
      <pubDate>Sun, 23 Apr 2017 12:27:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
最近突然又想自己架設個簡單的 AirPlay 播放器，好透過 wifi 遠端播放我的 iPhone 或是 MacBook 上面的音樂。
&lt;/p&gt;

&lt;p&gt;
剛好手邊的單板電腦都已經有各自的用途，於是便來找一片新的板子，最後鎖定了 &lt;a href=&quot;http://www.orangepi.org/orangepizero/&quot;&gt;Orange Pi Zero&lt;/a&gt; 這片開發板 (我選的是記憶體為 256 MB 的版本)。
&lt;/p&gt;

&lt;p&gt;
會選這片的原因，主要是包含運費後他最便宜(大約 NT 362 元)，剩下要自己準備的則是: USB 電源、USB 手機充電線、8GB MicroSD 卡。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近突然又想自己架設個簡單的 AirPlay 播放器，好透過 wifi 遠端播放我的 iPhone 或是 MacBook 上面的音樂。</p><p>剛好手邊的單板電腦都已經有各自的用途，於是便來找一片新的板子，最後鎖定了 <a href="http://www.orangepi.org/orangepizero/" target="_blank" rel="external">Orange Pi Zero</a> 這片開發板 (我選的是記憶體為 256 MB 的版本)。</p><p>會選這片的原因，主要是包含運費後他最便宜(大約 NT 362 元)，剩下要自己準備的則是: USB 電源、USB 手機充電線、8GB MicroSD 卡。</p><a id="more"></a><p>這邊就來紀錄一下我怎樣進行設定的。</p><div id="outline-container-org51a6fd3" class="outline-2"><h2 id="org51a6fd3">下載 Image</h2><div class="outline-text-2" id="text-org51a6fd3"><p>首先連線到 <a href="http://www.orangepi.org/downloadresources/" target="_blank" rel="external"><a href="http://www.orangepi.org/downloadresources/" target="_blank" rel="external">http://www.orangepi.org/downloadresources/</a></a> ，取得你要用的 Image。由於我只是要用於文字介面，因此選擇 <code>Debian Server</code> 。</p><div class="figure"><p><img src="a4.png"></p></div><p>下載好 Image 並解壓縮後，可以直接透過 <code>dd</code> 命令將其燒錄到 SD 卡 (假設 SD 卡設備為: /dev/sdc )</p><pre class="example">coldnew@gentoo ~ $ sudo dd if=debian_server_For_OrangePizero_v0_9_2.img of=/dev/sdc bs=1m</pre></div></div><div id="outline-container-org45f6f55" class="outline-2"><h2 id="org45f6f55">連接 UART</h2><div class="outline-text-2" id="text-org45f6f55"><p>將 SD 卡插上後，我會先透過 USB 轉 TTL 的轉接線來登入終端介面</p><p>從 <a href="http://linux-sunxi.org/Xunlong_Orange_Pi_Zero" target="_blank" rel="external">Xunlong Orange Pi Zero</a> 上面可以看到 Orange Pi Zero 的腳位是這樣定義的:</p><div class="figure"><p><img src="a6.jpg"></p></div><p>因此我們接線的時候，要把 USB 轉 TTL 線上面的 TX 接到 Orange Pi Zero 的 RX, TTL 線上面的 RX 接到 Orange Pi Zero 的 TX:</p><div class="figure"><p><img src="a5.jpg"></p></div><p>如果接上去後，開機沒任何訊息的話，可以試著把 TX 和 RX 線對調，看看是不是接錯了。</p></div></div><div id="outline-container-org0e5a62e" class="outline-2"><h2 id="org0e5a62e">預設帳號密碼</h2><div class="outline-text-2" id="text-org0e5a62e"><p><a href="http://www.orangepi.org/orangepizero/" target="_blank" rel="external">Orange Pi Zero</a> 預設的帳號密碼是這樣的:</p><ul class="org-ul"><li>帳號: root</li><li>密碼: orangepi</li></ul><p>不要輸入錯誤進可以進去啦</p><pre class="example">Debian GNU/Linux 8 OrangePizero ttyS0OrangePizero login: rootPassword:</pre></div></div><div id="outline-container-orgdaca503" class="outline-2"><h2 id="orgdaca503">擴充檔案系統大小</h2><div class="outline-text-2" id="text-orgdaca503"><p>進入到系統的第一步，當然就是擴充 SD 卡的空間了</p><pre class="example">root@OrangePizero:~# fs_resizeDisk /dev/mmcblk0: 7.4 GiB, 7969177600 bytes, 15564800 sectors/dev/mmcblk0p1       40960  172031  131072   64M  b W95 FAT32/dev/mmcblk0p2      172032 2113536 1941505  948M 83 LinuxMax block: 15563776Part end: 2113536Part start: 172032WARNING: Do you want to resize "/dev/mmcblk0p2" (y/N)?  yPARTITION RESIZED.*********************************************Rootfs Extended. Please REBOOT to take effect*********************************************</pre><p>好了後，我們就可以來進行網路設定，你也可以先接上網路線，然後更新套件。</p></div></div><div id="outline-container-org0e341ae" class="outline-2"><h2 id="org0e341ae">設定 wifi</h2><div class="outline-text-2" id="text-org0e341ae"><p>我自己對於 wifi 的設定，一直都是習慣使用 <a href="https://zh.wikipedia.org/zh-tw/NetworkManager" target="_blank" rel="external">NetworkManager</a> 來進行的。因此在這邊先啟動 NetworkManager:</p><pre class="example">root@OrangePizero:~# systemctl start NetworkManagerroot@OrangePizero:~# systemctl enable NetworkManager</pre><p>另外，由於 <a href="http://www.orangepi.org/orangepizero/" target="_blank" rel="external">Orange Pi Zero</a> 有兩個 wifi 設備，一個是 p2p0，另外一個是 wlan1</p><pre class="example">root@OrangePizero:~# nmcli devDEVICE   TYPE      STATE      CONNECTIONeth0     ethernet  connected  eth0p2p0     wifi      unmanaged  --gre0     gre       unmanaged  --lo       loopback  unmanaged  --wlan1    wifi      unmanaged  --ip6tnl0  unknown   unmanaged  --sit0     unknown   unmanaged  --tunl0    unknown   unmanaged  --</pre><p>由於 NetworkManager 預設會先去抓 p2p0 (按照字母排列)，因此我會設定成讓 NetworkManager 忽略 p2p0 這個設備，避免設定 wifi 變得麻煩。</p><p>編輯  <code>/etc/NetworkManager/NetworkManager.conf</code> ，加入以下資訊:</p><div class="org-src-container"><pre class="src src-conf">[<span style="color: #fff59d;">main</span>]<span style="color: #aaccff;">plugins</span>=ifupdown,keyfile[<span style="color: #fff59d;">ifupdown</span>]<span style="color: #aaccff;">managed</span>=true[<span style="color: #fff59d;">keyfile</span>]<span style="color: #aaccff;">unmanaged-devices</span>=interface-name:p2p0</pre></div><p>好了後，重新啟動 NetworkManager</p><pre class="example">root@OrangePizero:~# systemctl restart NetworkManager</pre><p>這樣我們就可以列出我們可以連線的無線網路:</p><pre class="example">root@OrangePizero:~# nmcli dev wifi list*  SSID        MODE   CHAN  RATE       SIGNAL  BARS  SECURITY   Edgar       Infra  10    54 Mbit/s  100     ▂▄▆█  WPA1 WPA2   AUSTIN&amp;FAY  Infra  6     54 Mbit/s  45      ▂▄__  WPA1 WPA2   75226490    Infra  1     54 Mbit/s  35      ▂▄__  WPA2   2.4aaaaaaa  Infra  4     54 Mbit/s  34      ▂▄__  WPA1 WPA2   RT-N16      Infra  6     54 Mbit/s  29      ▂___  WPA2   a89565282   Infra  1     54 Mbit/s  25      ▂___  WPA1 WPA2   dlink       Infra  11    54 Mbit/s  20      ▂___  WPA1 WPA2   mat         Infra  3     54 Mbit/s  22      ▂___  WPA1</pre><p>假設我們要連接的 ESSID 為 Edgar，則接下來使用以下命令進行連接 </p><pre class="example">root@OrangePizero:~# nmtui-connect Edgar</pre><p>你會看到出現一個輸入密碼的視窗，輸入進去後應該就可以正常連上網路了</p><div class="figure"><p><img src="a1.png"></p></div><p>如果你想要一個指令就完成這個動作，你可以使用下面的命令 (替換 &lt;essid&gt; 和 &lt;password&gt;)</p><pre class="example">root@OrangePizero:~# nmcli dev wifi connect &lt;essid&gt; password &lt;password&gt;</pre><p>這樣我們就完成無線網路的連接。</p></div></div><div id="outline-container-orgc79f487" class="outline-2"><h2 id="orgc79f487">設定 avahi-daemon</h2><div class="outline-text-2" id="text-orgc79f487"><p>為了讓 Apple 設備可以透過 <a href="https://en.wikipedia.org/wiki/Zero-configuration_networking" target="_blank" rel="external">Zeroconf</a> 協定找到同一網域下的設備，我們必須啟用 <a href="https://en.wikipedia.org/wiki/Avahi_(software)" target="_blank" rel="external">Avahi</a>。</p><p>這邊啟用 avahi 並將其加入開機啟動項目去。</p><pre class="example">root@OrangePizero:~# systemctl start avahi-daemonroot@OrangePizero:~# systemctl enable avahi-daemon</pre></div></div><div id="outline-container-orge179e57" class="outline-2"><h2 id="orge179e57">編譯並安裝 shairport-sync</h2><div class="outline-text-2" id="text-orge179e57"><p>首先，我們要安裝一些軟體來幫助我們編譯並安裝 Shairport。</p><div class="org-src-container"><pre class="src src-sh">root@OrangePizero:~# apt-get install build-essential git autoconf libtool <span style="color: #aadddd;">\</span>    libdaemon-dev libasound2-dev libpopt-dev libconfig-dev <span style="color: #aadddd;">\</span>    avahi-daemon libavahi-client-dev <span style="color: #aadddd;">\</span>    libssl-dev</pre></div><p>該裝的軟體都裝完以後，我們就可以下載最新的 shairport-sync 程式碼並安裝到系統內。</p><div class="org-src-container"><pre class="src src-sh">git clone https://github.com/mikebrady/shairport-sync.git<span style="color: #ccaaff;">cd</span> shairport-sync &amp;&amp; autoreconf -i -f</pre></div><p>接下來就是依照 <a href="https://github.com/mikebrady/shairport-sync" target="_blank" rel="external">shairport-sync</a> 的 README 進行設置，我是設定了這些參數</p><div class="org-src-container"><pre class="src src-sh">./configure <span style="color: #aadddd;">\</span>    --with-alsa --with-stdout --with-pipe --with-avahi <span style="color: #aadddd;">\</span>    --with-ssl=openssl --with-metadata --with-systemd</pre></div><p>接下來將整個程式安裝到系統中</p><pre class="example">root@OrangePizero:~/shairport-sync# make install</pre><p>因為在前面的參數我是設定為給 <i>systemd</i> 的使用者使用，因此需要增加使用者與群組</p><pre class="example">root@OrangePizero:~# groupadd -r shairport-syncroot@OrangePizero:~# useradd -r -M -g shairport-sync -s /usr/bin/nologin -G audio shairport-sync</pre><p>接著加入到 <i>systemd</i> 開機設定中，並啟用 shairport-sync 服務</p><pre class="example">root@OrangePizero:~# systemctl enable shairport-syncroot@OrangePizero:~# systemctl start shairport-sync</pre><p>完成後，來設定輸出設備，這邊我採用的是 USB DAC。</p></div></div><div id="outline-container-org3e53415" class="outline-2"><h2 id="org3e53415">設定 USB DAC</h2><div class="outline-text-2" id="text-org3e53415"><p>我自己播放音樂的時候，都是透過 USB DAC 來進行播放的 (這樣音質較好)，因此要多進行一些步驟，讓 <a href="http://www.orangepi.org/orangepizero/" target="_blank" rel="external">Orange Pi Zero</a> 可以透過 USB 音效卡輸出。</p></div><div id="outline-container-orga55348b" class="outline-3"><h3 id="orga55348b">載入需要的驅動</h3><div class="outline-text-3" id="text-orga55348b"><p>正常來講，我們只要載入了 <code>snd_usb_audio</code> 這個驅動，就可以讓 ALSA 識別 USB 音效卡。</p><p>不過&#x2026;&#x2026;</p><pre class="example">root@OrangePizero:/lib/modules# modprobe snd_usb_audiomodprobe: ERROR: ../libkmod/libkmod.c:557 kmod_search_moddep() could not open moddep file '/lib/modules/3.4.39/modules.dep.bin'</pre><p>好吧，有東西從缺，改用 <code>insmod</code> 的方式來載入。我們在 <code>/etc/rc.local</code> 加上這些東西</p><div class="org-src-container"><pre class="src src-sh">insmod /lib/modules/3.4.39_zero/snd-usbmidi-lib.koinsmod /lib/modules/3.4.39_zero/snd-hwdep.koinsmod /lib/modules/3.4.39_zero/snd-usb-audio.ko</pre></div><p>這樣重開機後，你可以透過 <code>lsmod</code> 確認需要用到的驅動是否有真的被載入:</p><pre class="example">root@OrangePizero:~# lsmodModule                  Size  Used bysnd_usb_audio          79205  2snd_hwdep               5337  1 snd_usb_audiosnd_usbmidi_lib        17391  1 snd_usb_audioxradio_wlan           230792  0</pre><p>如果上面列出的模組有缺的話，可以透過以下命令檢查是否 <code>/etc/rc.local</code> 有哪個地方出錯</p><pre class="example">root@OrangePizero:~# systemctl status rc-local● rc-local.service - /etc/rc.local Compatibility   Loaded: loaded (/lib/systemd/system/rc-local.service; static)   Active: active (exited) since Thu 1970-01-01 00:38:08 UTC; 47 years 3 months agoJan 01 00:38:07 OrangePizero systemd[1]: Starting /etc/rc.local Compatibility...Jan 01 00:38:08 OrangePizero systemd[1]: Started /etc/rc.local Compatibility.</pre><p>確認該被載入的驅動有正常載入後，我們來指定 ALSA 預設得輸出設備。</p></div></div><div id="outline-container-orgfe2abdd" class="outline-3"><h3 id="orgfe2abdd">指定 ALSA 輸出設備</h3><div class="outline-text-3" id="text-orgfe2abdd"><p>那我們要怎樣讓 ALSA 知道我們指定的 USB DAC 的輸出位置呢?</p><p>首先先列出可以使用的音效卡資訊:</p><pre class="example">root@OrangePizero:~# cat /proc/asound/cards0 [audiocodec     ]: audiocodec - audiocodec                     audiocodec1 [sndhdmi        ]: sndhdmi - sndhdmi                     sndhdmi2 [Set            ]: USB-Audio - C-Media USB Headphone Set                     C-Media USB Headphone Set at usb-sunxi-ohci-1, full speed</pre><p>找到編號是 <code>2</code> 後，我們就可以編輯 <code>/etc/asound.conf</code> 指定預設的 alsa 設備：</p><pre class="example">defaults.pcm.card 2defaults.ctl.card 2</pre><p>這樣子播放的時候，ALSA 就會選用 <code>USB-Audio - C-Media USB Headphone Set</code> 這個設備進行播放。</p></div></div></div><div id="outline-container-org6d5da5c" class="outline-2"><h2 id="org6d5da5c">在 macOS 下透過 AirPlay 播放</h2><div class="outline-text-2" id="text-org6d5da5c"><p>所有設定完成後，只要你的 macOS 和你的 AirPlay 設備在同一個網域，你就可以這樣找到他:</p><div class="figure"><p><img src="a2.png" width="40%"></p></div><p>或是透過 iTunes 選擇設備:</p><div class="figure"><p><img src="a3.png" width="40%"></p></div><p>試試看，播放聲音的時候，聲音是不是透過連接在 Orange Pi 上面的 USB DAC 送出來的 :)</p></div></div><div id="outline-container-orgcd66977" class="outline-2"><h2 id="orgcd66977">參考資料</h2><div class="outline-text-2" id="text-orgcd66977"><ul class="org-ul"><li><a href="http://linux-sunxi.org/Xunlong_Orange_Pi_Zero" target="_blank" rel="external">Xunlong Orange Pi Zero - linux-sunxi.org</a></li><li><a href="https://wiki.archlinux.org/index.php/NetworkManager#nmcli" target="_blank" rel="external">NetworkManager - ArchWiki</a></li><li><a href="http://coldnew.github.io/blog/2015/11-12_shairport-sync/">使用 shairport-sync 在 Raspberry Pi 上上建立 AirPlay 音樂播放器</a></li><li><a href="http://piboards.com/2017/02/13/orange-pi-as-time-machine-server/" target="_blank" rel="external">Orange Pi as Time Machine Server | Pi Boards</a></li><li><a href="https://www.linuxbabe.com/linux-server/how-to-enable-etcrc-local-with-systemd" target="_blank" rel="external">How to Enable /etc/rc.local with Systemd</a></li></ul></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/d48bba9e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Clasp: Common Lisp using LLVM and C++ for Molecular Metaprogramming 筆記</title>
      <link>https://coldnew.github.io/aacb8a72/</link>
      <guid>https://coldnew.github.io/aacb8a72/</guid>
      <pubDate>Thu, 06 Oct 2016 16:13:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
為了了解  &lt;a href=&quot;https://github.com/drmeister/clasp&quot;&gt;Clasp&lt;/a&gt; 這個可以把 Common Lisp 編譯到 LLVM 上的編譯器是如何實作的，於是找來這場演講。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>為了了解  <a href="https://github.com/drmeister/clasp" target="_blank" rel="external">Clasp</a> 這個可以把 Common Lisp 編譯到 LLVM 上的編譯器是如何實作的，於是找來這場演講。</p><a id="more"></a><iframe width="560" height="315" src="https://www.youtube.com/embed/8X69_42Mj-g" frameborder="0" allowfullscreen></iframe><br><p>講者這場的投影片我沒找到，到是有找到別場次的: <a href="https://usercontent.irccloud-cdn.com/file/4QyNmxAz/els.pdf" target="_blank" rel="external">投影片下載</a></p><br><p>先簡單講些心得，這場演講是 Google 邀請 <a href="https://github.com/drmeister/clasp" target="_blank" rel="external">Clasp</a> 的作者 <a href="https://chem.cst.temple.edu/schafmeister.html" target="_blank" rel="external">Christian Schafmeister</a> 去進行的演講，講者為一化學教授。這場演講剛開頭講了大約 20 多分鐘的化學，而講者為了解決 Molecular (分子生物學) 的問題，決定透過 Common Lisp 的 metaprogramming 的能力來提昇整體計算程式的開發以及計算能力，因此實作了一個可以將 Common Lisp 編譯到 LLVM 上的編譯器。</p><p>目前 Clojure 沒有實作編譯到 LLVM 的其中一個原因是缺少了合適的 GC (Garbage Collector)，因此如果我們想要自行實作 Clojure -&gt; LLVM 編譯器的話，就一定需要自行實現高效能的 GC 才行。</p><p>讓我們回到演講，講者需要實作的東西需要用到很多 C++ 函式庫，但是寫 C++ 很麻煩，因此他想用更高階的語言: Common Lisp 來實現自己的程式，結果不小心實作了一個 Common Lisp 編譯器:  <a href="https://github.com/drmeister/clasp" target="_blank" rel="external">Clasp</a></p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a1.png"></p></div><p>而 <a href="https://github.com/drmeister/clasp" target="_blank" rel="external">Clasp</a> 是以 C++ 實作的，並會把 Common Lisp 程式碼轉成 LLVM IR</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a2.png"></p></div><p>接下來講者解釋了一下它到底要用這套工具做什麼，這邊就去看影片吧 (簡單來說是解決數學計算)。</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a3.png"></p></div><p>另外一個講者想做的，就是透過 C++ 寫 Common Lisp 模組，並且在 Common Lisp 裡面載入它</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a4.png"></p></div><p>所以為何會選用 Common Lisp 呢? 當然是因為 LISP 很好用阿，只是那些不會用的人一直嫌 LISP 括號太多~</p><p>(然後這群人居然可以寫的下 Javascript，也可謂世界奇觀了~)</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a5.png"></p></div><p>當然，懂 LISP 的人都知道使用 Common Lisp 的其中一個理由一定是因為 LISP 的 Macro 太好用了!!</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a6.png"></p></div><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a7.png"></p></div><p>因此講者選用了 Common Lisp 來進行開發，可是這樣子 C++ 的函式庫要怎麼辦呢？總不能重寫吧?原本的 Common Lisp 缺乏了很方便和 C++ 進行調用的接口</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a8.png"></p></div><p>其實 Common Lisp 是有 FFI (foreign FUnction Interface)接口的，可以直接載入用 C 寫的函式庫，不過 FFI 用於 C++ 就會有其他問題，比如我們需要在寫一個 wrapper 去包 C++ 的 class。</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/a9.png"></p></div><p>而實際上，在目前的 Common Lisp 上的確需要透過 C 語言去包一層，讓 Common Lisp 可以使用 C++ 函式庫</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b.png"></p></div><p>為了解決這個問題，講者想到了是不是可以透過 C++ template 來處理這一塊</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b1.png"></p></div><p>事實上在講者早期撰寫的函式庫中，Boost.Python 這個模組就用到了這樣的概念，透過 C++ template 做個 hook 讓 Python 程式可以呼叫 C++ 函式庫</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b2.png"></p></div><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b3.png"></p></div><p>因此，講者就做了 <a href="https://github.com/drmeister/clasp" target="_blank" rel="external">Clasp</a> 這個 Common Lisp 編譯器啦，裡面有些程式碼是從 Embedded Common Lisp 那邊 A 來的呦~</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b4.png"></p></div><p>然後這時候講者講了讓我 Orz 的一句話&#x2026;..</p><br><blockquote><p>I did not use the compiler because I don't understand it, I wrote a new one.</p><p>I wrote a compiler, I never wrote compiler before.</p></blockquote><br><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b5.png"></p></div><p>所以 <a href="https://github.com/drmeister/clasp" target="_blank" rel="external">Clasp</a> 到底有哪些特別的呢?</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b6.png"></p></div><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/b7.png"></p></div><p>所以的確  <a href="https://github.com/drmeister/clasp" target="_blank" rel="external">Clasp</a> 有實作 GC (Garbage Collector)，並且有兩種實作，也就是說如果我想做 Clojure -&gt; LLVM，我也需要自行實作這些 GC 才行。</p><p>而這個編譯器還有一個 pointer 追蹤器，可以追蹤指標的使用並且告知 GC。</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/c.png"></p></div><p>那要怎樣在 Clasp 裡面使用 C++ 函式庫呢? 就這樣 ~</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/c1.png"></p></div><p>複雜一點的範例則是這樣:</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/c2.png"></p></div><p>編譯成動態函式後，就可以在 Clasp 裡面這樣的載入</p><div class="figure"><p><img src="Clasp-Common-Lisp-using-LLVM-and-C++-for-Molecular-Metaprogramming-筆記/c3.png"></p></div><p>介紹完 Clasp 後，就是 QA 囉，有興趣自己去看 QA ~</p><p>如果你聽完這個演講後，對於這個 Common Lisp 實作有興趣，可以去 GitHub 下載看看:</p><div class="github-card" data-github="drmeister/clasp" data-width="400" data-height="" data-theme="default"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script>]]></content:encoded>
      
      <comments>https://coldnew.github.io/aacb8a72/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ClojuTRE 2016 演講筆記</title>
      <link>https://coldnew.github.io/fec9a5ee/</link>
      <guid>https://coldnew.github.io/fec9a5ee/</guid>
      <pubDate>Sun, 02 Oct 2016 18:13:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
趁著假日來趕一下進度，於是把我看過的 &lt;a href=&quot;http://clojutre.org/2016/&quot;&gt;ClojuTRE 2016&lt;/a&gt; 心得/筆記紀錄在這邊。
&lt;/p&gt;

&lt;p&gt;
嗯&amp;#x2026;&amp;#x2026;其實 ClojuTRE 2016 每一場演講我都看完了&amp;#x2026;..
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>趁著假日來趕一下進度，於是把我看過的 <a href="http://clojutre.org/2016/" target="_blank" rel="external">ClojuTRE 2016</a> 心得/筆記紀錄在這邊。</p><p>嗯&#x2026;&#x2026;其實 ClojuTRE 2016 每一場演講我都看完了&#x2026;..</p><a id="more"></a><p>當然，我並不是每一場都聽的懂，於是這筆記只能僅供參考，請勿盡信 orz&#x2026;</p><p>有些演講真的很難畫重點，還是挑自己有興趣的看吧!!</p><div id="outline-container-org40dc66d" class="outline-2"><h2 id="org40dc66d">Using Clojure to provide computerized psychotherapy</h2><div class="outline-text-2" id="text-org40dc66d"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/Ze3Acb42f3o?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>講者投影片: <a href="http://clojutre.org/2016/slides/Using-Clojure-to-provide-computerized-psychotherapy.pdf" target="_blank" rel="external">下載連結</a></p><p>這場演講在講 Clojure 用於心理治療 (psychotherapy) 上，一開始講者提出了問題:</p><div class="figure"><p><img src="a1.png"></p></div><p>對於這些問題，我們可以有一些解法:</p><div class="figure"><p><img src="a2.png"></p></div><p>而更多的問題，則是沒有足夠的人手在心裡治療上，因此講者提到了可以透過電腦來協助，點子來自於 treatment manuals</p><div class="figure"><p><img src="a3.png"></p></div><p>而 網路認知行為治療 (iCBT, internet-based Cognitive behavior therapy) 則大部分提供了如上面的那樣的自我治療(sel-help)資訊，這種方式減少了一些問題，比如治療師(therapist)和病患之間的距離</p><p>然後後面講者繼續講了一些問題，解法一是用 Clojure 寫了些網頁程式&#x2026;.(嗯，看影片吧) ，而這網頁程式透過 <a href="http://www.luminusweb.net" target="_blank" rel="external">Luminus framework</a> 製作，值得一提的是講者第一個學的程式語言就是 Clojure。</p><div class="figure"><p><img src="a4.png"></p></div></div></div><div id="outline-container-orgeff3537" class="outline-2"><h2 id="orgeff3537">The Universe As A Value</h2><div class="outline-text-2" id="text-orgeff3537"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/odPAkEO2uPQ?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>投影片: <a href="https://juxt.pro/talks/clojutre-2016.html#/sec-title-slide" target="_blank" rel="external">下載連結</a></p><p>這場演講第一次聽的時候我傻眼了，於是就再聽了第二次。</p><p>講者一開始先稍微講了些關於宇宙 (Universe) 的事情，然後導向愛因斯坦的相對論，我們可以假設有一個觀察者如下</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">observer</span> <span style="color: #81d4fa;">(</span>atom <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:universe</span> u <span style="color: #ccaaff;">:time</span> t<span style="color: #aaccff;">}</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>而愛因斯坦說過，時間和觀察者是相對的 (time is relative to observer)，兩個不同的觀察者會看到不同的宇宙 (Universe)，也就是說，有許多不同的宇宙(Universe)存在。</p><div class="figure"><p><img src="p1.png"></p></div><p>我們可以定義 <code>𝕌</code> 這個符號為所有可能可以觀察到的宇宙空間(𝕌 is the set of all possible observable universes)，因此，我們就可以定義 Clojure 程式用來選擇下一個 Universe。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">next-u</span>  <span style="color: #97abc6; font-style: italic;">"Given an observed universe u, return a possible 'next' universe."</span>  <span style="color: #81d4fa;">[</span>u t<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span>rand-nth <span style="color: #aaccff;">(</span>filter #<span style="color: #aaeecc;">(</span>consistent? <span style="color: #aaccff;">%</span> u t<span style="color: #aaeecc;">)</span> &#120140;<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>而下一個程式碼，則是讓一個觀察者 (observer) 切換到另外一組 Universe 去</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">switch-universe!</span>  <span style="color: #97abc6; font-style: italic;">"Put the given observer in another universe"</span>  <span style="color: #81d4fa;">[</span>observer<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span>swap!   <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #aaeecc;">[</span><span style="color: #ccaaff;">{</span><span style="color: #ccaaff;">:keys</span> <span style="color: #fff59d;">[</span>universe time<span style="color: #fff59d;">]</span><span style="color: #ccaaff;">}</span><span style="color: #aaeecc;">]</span>     <span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:universe</span> <span style="color: #ccaaff;">(</span>next-u universe time<span style="color: #ccaaff;">)</span>      <span style="color: #ccaaff;">:time</span> <span style="color: #ccaaff;">(</span>inc time<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">}</span><span style="color: #aaccff;">)</span>   observer<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>而我們可以這樣執行我們的觀察者:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">run-observer</span>  <span style="color: #97abc6; font-style: italic;">"Run the observer, giving them the impression of passing time"</span>  <span style="color: #81d4fa;">[</span>observer<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">dorun</span> <span style="color: #aaccff;">(</span>iterate switch-universe! observer<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>接下來接到了 <a href="http://toutestquantique.fr/en/pump-probe/" target="_blank" rel="external">Pump-probe technique</a> ，嗯&#x2026;我不知道他在講啥 (摀臉)&#x2026;.所以只好秀一下他接下來的投影片:</p><div class="figure"><p><img src="p2.png"></p></div><p>接下來話鋒一轉，突然變成說&#x2026;在 ClojureScript 中，無論是 Om 或是 Reagent, 我們都有一個地方定義 app state (universe)</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">The app 'universe'</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">app-state</span>  <span style="color: #81d4fa;">(</span>atom   <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:drawer</span> <span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:items</span> <span style="color: #ccaaff;">[</span><span style="color: #fff59d;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"ear-plugs"</span><span style="color: #fff59d;">}</span><span style="color: #ccaaff;">]</span><span style="color: #aaeecc;">}</span>    shopping    <span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:items</span>     <span style="color: #ccaaff;">[</span><span style="color: #fff59d;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"Coffee"</span> <span style="color: #ccaaff;">:quantity</span> 2<span style="color: #fff59d;">}</span>      <span style="color: #fff59d;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"Milk"</span> <span style="color: #ccaaff;">:quantity</span> 2<span style="color: #fff59d;">}</span>      <span style="color: #fff59d;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"Bird seed"</span> <span style="color: #ccaaff;">:quantity</span> <span style="color: #ccaaff;">:lots</span><span style="color: #fff59d;">}</span><span style="color: #ccaaff;">]</span><span style="color: #aaeecc;">}</span><span style="color: #aaccff;">}</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>接著我們就可以用 <a href="https://clojuredocs.org/clojure.core/deref" target="_blank" rel="external">deref</a> 去查看我們的 Universe (app state)</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>deref app-state<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">or</span>@app-state</pre></div><p>而在這種狀況下，我們滿足了以下兩種規範:</p><ul class="org-ul"><li><p>Consistency</p><p>In the render phase, the value we render is constant</p></li><li><p>Concurrency</p><p>We can take our time, nobody is waiting for us!</p></li></ul><p>這種 app-state 的形式和物件導向 (Object Orientation) 是不同的，我們知道物件導向是這樣的:</p><blockquote><p>Object Orientation: Lots of changing state, scatered around.</p></blockquote><br><p>講者舉 <a href="https://juxt.pro/" target="_blank" rel="external">https://juxt.pro/</a> 為例，這個網站有很多 state 要去處理，因此我們可以做一個 record 去弄這些 state</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defrecord</span> <span style="color: #fff59d;">AppState</span> <span style="color: #81d4fa;">[</span>data-sources<span style="color: #81d4fa;">]</span>  <span style="color: #fff59d;">clojure.lang.IDeref</span>  <span style="color: #81d4fa;">(</span>deref <span style="color: #aaccff;">[</span>this<span style="color: #aaccff;">]</span>    <span style="color: #aaccff;">(</span><span style="color: #fff59d;">skup</span><span style="color: #c6cccc; background-color: #202020;">/</span>refresh! this<span style="color: #aaccff;">)</span>    <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Return the 'universe as a value'</span>    <span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Skippy McSkipface: https://github.com/juxt/skip</span></pre></div><p>接下來我們就可以對這些 state 進行 derefernece 的動作</p><div class="figure"><p><img src="p3.png"></p></div><p>那要怎樣提昇 referesh 的效能呢?我們可以透過這些支援 time-travel 的工具來進行:</p><div class="figure"><p><img src="p4.png"></p></div><p>而在開發環境，則可以透過 background watchers 來對資料進行更新的動作</p><div class="figure"><p><img src="p5.png"></p></div><p>而這樣做，講者提出了一個結果:</p><div class="figure"><p><img src="p6.png"></p></div><p>嗯&#x2026;我必須承認我聽了兩次還是聽不太懂 = =</p><p>最後講者對比了一下 C 和 Lisp:</p><blockquote><p>It seems to me that there have been two really clean, consistent models of programming so far:the C model and the Lisp model.</p><p>&#x2013; Paul Graham</p></blockquote><br><blockquote><p>"You're not constructing it like making a tone of source code and compiling it periodically, you're constructing it the way you construct a city: build some of it, it's running all the time, so it's kind of like a live programming language."</p><p>&#x2013; Dick Gabriel On Lisp, Software Engineering Radio Episode 84</p></blockquote></div></div><div id="outline-container-org1473321" class="outline-2"><h2 id="org1473321">Native mobile apps with ClojureScript</h2><div class="outline-text-2" id="text-org1473321"><br><iframe width="" height="315" src="https://www.youtube.com/embed/6IYm34nDL64?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>終於有看到一場在講 react-native 作用於 ClojureScript 上的演講！！ 這之前我有稍微玩過，但沒認真寫這樣的程式。</p><p>關於 ClojureScript 作用在 react-native 上的資料，可以到 <a href="http://cljsrn.org/" target="_blank" rel="external">http://cljsrn.org/</a> 去找，或是 <a href="http://clojurians.net/" target="_blank" rel="external">Clojurians</a> 的 Slack <code>#cljsrn</code> 頻道。</p><p>這場演講先從 react-native 開始介紹，說明它和 Cordova/HTML5 的不同:</p><div class="figure"><p><img src="cljsrn1.png"></p></div><p>接下來則是以開發者的觀點來看 react-native，一個基本的 react-native 程式長這樣:</p><div class="org-src-container"><pre class="src src-js-jsx"><span style="color: #aaffaa;">import</span> React, <span style="color: #aadddd;">{</span> Component <span style="color: #aadddd;">}</span> from <span style="color: #aadddd;">'react'</span>;<span style="color: #aaffaa;">import</span> <span style="color: #aadddd;">{</span> Text, View <span style="color: #aadddd;">}</span> from <span style="color: #aadddd;">'react-native'</span>;<span style="color: #aaffaa;">class</span> WhyReactNativeIsSoGreat <span style="color: #aaffaa;">extends</span> Component <span style="color: #aadddd;">{</span>    render<span style="color: #81d4fa;">()</span> <span style="color: #81d4fa;">{</span>        <span style="color: #aaffaa;">return</span> <span style="color: #aaccff;">(</span>            &lt;View&gt;              &lt;Text&gt;                If you like React on the web, yoou<span style="color: #aadddd;">'ll like React Native.</span><span style="color: #aadddd;">              &lt;/Text&gt;</span><span style="color: #aadddd;">              &lt;Text&gt;</span><span style="color: #aadddd;">                You just use native components like '</span>View<span style="color: #aadddd;">' and '</span>Text<span style="color: #aadddd;">',</span><span style="color: #aadddd;">                instead of web components like '</span>div<span style="color: #aadddd;">' and '</span>span<span style="color: #aadddd;">'.</span><span style="color: #aadddd;">              &lt;/Text&gt;</span><span style="color: #aadddd;">            &lt;/View&gt;</span><span style="color: #aadddd;">        );</span><span style="color: #aadddd;">    }</span><span style="color: #aadddd;">}</span></pre></div><p>而 ClojureScript 的相對應改寫則是:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">rn-example.core</span>  <span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:require</span> <span style="color: #aaccff;">[</span><span style="color: #fff59d;">reagent.core</span> <span style="color: #ccaaff;">:as</span> r<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">react-native</span>  <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">js</span><span style="color: #c6cccc; background-color: #202020;">/</span>require   <span style="color: #aadddd;">"react-native/Libraries/react-native/react-native.js"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">view</span> <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">r</span><span style="color: #c6cccc; background-color: #202020;">/</span>adapt-react-class <span style="color: #aaccff;">(</span>.-View react-native<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">text</span> <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">r</span><span style="color: #c6cccc; background-color: #202020;">/</span>adapt-react-class <span style="color: #aaccff;">(</span>.-Text react-native<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">why-react-native-is-so-great</span> <span style="color: #81d4fa;">[]</span>  <span style="color: #81d4fa;">[</span>view   <span style="color: #aaccff;">[</span>text <span style="color: #aadddd;">"If you like React on the web, you'll like React Nateive"</span><span style="color: #aaccff;">]</span>   <span style="color: #aaccff;">[</span>text <span style="color: #aadddd;">"You just use native components like 'View' and 'Text'</span><span style="color: #aadddd;">instead of web components like 'div' and 'span'."</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span></pre></div><p>由上面範例可以看到，除了一開始載入一些 javascript 函式庫需要比較骯髒的手段外，剩下的就很純粹是 Clojure 的資料結構的處理。</p><p>而在 ClojureScript 上面，目前有兩個 build tools 針對 ClojureScript 在 react-native 上的:</p><div class="row "><div class="col-md-6 "><div class="github-card" data-github="mjmeintjes/boot-react-native" data-width="400" data-height="" data-theme="default"></div></div><div class="col-md-6"><div class="github-card" data-github="drapanjanas/re-natal" data-width="400" data-height="" data-theme="default"></div></div> </div><p>講者是這樣評論這兩套工具的:</p><ul class="org-ul"><li><p>boot-react-native</p><p>Uses boot, works closer to the RN packager but is slower and inferior out of the box experience (persornal experience)</p></li><li><p>re-natal</p><p>Uses leinigen, runtime errors are not traceable, templates for re-frame, om.next and rum</p></li></ul><p>而最常用的前端框架則是基於 reagent 的 <a href="https://github.com/Day8/re-frame" target="_blank" rel="external">re-frame</a> 。</p><p>測試方面，則是需要透過 <code>react-native-mock</code> 去對 ract-native 組件進行測試，圖片和函式庫則是透過 <code>mockery</code> 來進行測試。</p><p>至於效能的比較，就直接看投影片吧：</p><div class="figure"><p><img src="cljsrn2.png"></p></div></div></div><div id="outline-container-orge0d8389" class="outline-2"><h2 id="orge0d8389">Isomorphic web apps with Rum</h2><div class="outline-text-2" id="text-orge0d8389"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/2fLx4fu9VV8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>本場次為 <a href="https://github.com/tonsky/rum" target="_blank" rel="external">rum</a> 這個 ClojureScript 對於 React.js 的封裝的作者的演講，講者 <a href="https://github.com/tonsky" target="_blank" rel="external">tonsky</a> 同時也是許多知名 Clojure/Script 函式庫專案的維護者。</p><div class="github-card" data-github="tonsky/rum" data-width="400" data-height="" data-theme="default"></div><p><a href="https://github.com/tonsky" target="_blank" rel="external">tonsky</a> 一開始介紹幾種不同在 ClojureScript 上對於 React.js 的封裝函式庫，然後介紹自己設計  <a href="https://github.com/tonsky/rum" target="_blank" rel="external">rum</a>  的幾個動機，其中一個是更好的與 <a href="https://github.com/tonsky/datascript" target="_blank" rel="external">datascript</a> 或是其他資料儲存函式庫相容。</p><p>所以基本的 rum 程式長怎樣呢?</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">rum</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #aaffaa;">defc</span> <span style="color: #aaccff;">label</span> <span style="color: #81d4fa;">[</span>text class<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">[</span><span style="color: #ccaaff;">:div.lbl</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> class<span style="color: #aaccff;">}</span> text<span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">rum</span><span style="color: #c6cccc; background-color: #202020;">/</span>mount <span style="color: #81d4fa;">(</span>label <span style="color: #aadddd;">"Hello"</span> <span style="color: #aadddd;">"header"</span><span style="color: #81d4fa;">)</span>           <span style="color: #fff59d;">js</span><span style="color: #c6cccc; background-color: #202020;">/</span>document.body<span style="color: #aadddd;">)</span></pre></div><p>包含 state 的複雜點的範例則是:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">mixin</span>  <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:will-mount</span>   <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #aaeecc;">[</span>state<span style="color: #aaeecc;">]</span>     <span style="color: #aaeecc;">(</span>assoc state <span style="color: #ccaaff;">:key</span> <span style="color: #ccaaff;">(</span>atom <span style="color: #ccaaff;">nil</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">rum</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #aaffaa;">defc</span> <span style="color: #aaccff;">label</span> &lt; mixin <span style="color: #81d4fa;">[</span>text class<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[</span><span style="color: #ccaaff;">:div.label</span> <span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:class</span> class<span style="color: #aaeecc;">}</span> text<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>而 rum 也支援 serveri-side 渲染 (<a href="https://anmonteiro.com/2016/09/om-next-server-side-rendering/" target="_blank" rel="external">Om.Next 也支援囉~</a>)，運作的流程是這樣:</p><div class="figure"><p><img src="rum1.png"></p></div><p>那用 rum 有什麼好處呢？講者提出了以下幾點:</p><ul class="org-ul"><li>Complex single-page apps with fine control</li><li>Custom/mixed state models</li><li>Server-side rendering and templating</li></ul><p>而用 rum 的壞處則是:</p><ul class="org-ul"><li>Doesn't teach you how to write apps</li></ul></div></div><div id="outline-container-orgdde0a1f" class="outline-2"><h2 id="orgdde0a1f">The Story of Sir Owl Lisp</h2><div class="outline-text-2" id="text-orgdde0a1f"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/utOVF0U7Zd8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p><a href="https://en.wikipedia.org/wiki/Owl_Lisp" target="_blank" rel="external">Owl Lisp</a> 是一個純函數式的 Scheme 實現，講者為 <a href="https://github.com/aoh/owl-lisp" target="_blank" rel="external">owl-lisp</a> 作者，此一專案作為寵物專案 (pet project, 閒暇時做的好玩專案或是殺時間用) 從 2011 年開始自今。</p><p>這場演講前面基本上在講古，包含了一些圖靈機、lambda 演算法以及 LISP 語言的故事，後面開始介紹  <a href="https://github.com/aoh/owl-lisp" target="_blank" rel="external">owl-lisp</a> ，這是一個依照 R7RS 標準的 Scheme 語言。</p><div class="github-card" data-github="aoh/owl-lisp" data-width="400" data-height="" data-theme="default"></div></div></div><div id="outline-container-org5136d83" class="outline-2"><h2 id="org5136d83">Doing data science with Clojure: the good, the bad, the ugly</h2><div class="outline-text-2" id="text-org5136d83"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/xtmggfGD3RQ?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>投影片連結: <a href="https://www.slideshare.net/mobile/simonbelak/doing-data-science-with-clojure-65886938" target="_blank" rel="external">線上看</a></p><blockquote><p>Easy things should be easy and hard things should be possible.</p><p>&#x2013; L. Wall</p></blockquote><br><p>老實說我聽不太懂講者在講什麼&#x2026;.. Orz&#x2026;</p><p>不過講者提到一個他寫的函式庫:</p><div class="github-card" data-github="sbelak/huri" data-width="400" data-height="" data-theme="default"></div><p>然後&#x2026;我還是聽不懂，所以只好把他 quote 的名言秀一下了 orz&#x2026;</p><blockquote><p>This is possibly Clojure's most important property: the syntax expresses the code's semantic layers. An experienced reader of Clojure can skip over most of the code and have a lossless understanding of its highlevel intent.</p><p>&#x2013; Z.Tellman, Elements of Clojure</p></blockquote><br><p>接下來講者稍微提到了 <a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 這個預計要在 Clojure 1.9 加入的函式庫，可以減少查找問題的時間，以及 <a href="http://gorilla-repl.org" target="_blank" rel="external">gorilla-repl</a> 這種類似 ipython notebook 的工具。</p><p>在後面，講者終於講到前面他說的函式庫 <a href="https://github.com/sbelak/huri" target="_blank" rel="external">huri</a>， 你可以透過他在  <a href="http://gorilla-repl.org" target="_blank" rel="external">gorilla-repl</a> 上畫圖。</p></div></div><div id="outline-container-orga7511ce" class="outline-2"><h2 id="orga7511ce">Interactive Clojure code snippets in any web page with KLIPSE</h2><div class="outline-text-2" id="text-orga7511ce"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/33mTFjPIN10?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>投影片連結: <a href="http://slides.klipse.tech/klipse-clojutre-2016/" target="_blank" rel="external">線上看</a></p><p><a href="http://app.klipse.tech" target="_blank" rel="external">klipse</a> 是一個完全運作在瀏覽器上的 cljs REPL，可以動態的驗證 ClojureScript 的運作，該作者同時也寫了不少關於 ClojureScript 運作的文章。</p><p>本次演講除了說到 ClojoureScript 的部份，也提到 klipse 可以執行 ruby, python 程式碼，我猜他大概有實現一個簡單的解釋器才對，還沒去看這部份的程式碼。</p><div class="github-card" data-github="viebel/klipse" data-width="400" data-height="" data-theme="default"></div></div></div><div id="outline-container-org34650f3" class="outline-2"><h2 id="org34650f3">Distributed transducers</h2><div class="outline-text-2" id="text-org34650f3"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/_9jdb5TOShk?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>投影片連結: <a href="https://github.com/mhjort/distributed-transducers-poc/releases/download/v1.0/Distributed.Transducers.pdf" target="_blank" rel="external">點我下載</a></p><p>本篇講述講者實作分佈式版的 fold 函式，並透過 AWS lambda 來加速運作。</p><p>講者提供了一個查找類似詞的函式來描述整個要解決問題的狀況:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">similar-words-1</span> <span style="color: #81d4fa;">[</span>word words min-distance<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span> words       <span style="color: #aaccff;">(</span>map <span style="color: #aaeecc;">(</span>partial levensthein-distance word<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>filter <span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #ccaaff;">[</span><span style="color: #fff59d;">[</span>d _<span style="color: #fff59d;">]</span><span style="color: #ccaaff;">]</span> <span style="color: #ccaaff;">(</span>&lt;= d min-distance<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>reduce group-by-distance <span style="color: #aaeecc;">{}</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>similar-words-1 <span style="color: #aadddd;">"word"</span> <span style="color: #81d4fa;">[</span><span style="color: #aadddd;">"sword"</span> <span style="color: #aadddd;">"lord"</span> <span style="color: #aadddd;">"card"</span> <span style="color: #aadddd;">"cat"</span><span style="color: #81d4fa;">]</span> 2<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; {1 #{"sword" "lord"}, 2 #{"card"}}</span></pre></div><p>當然我們可以把這樣的程式改用 transducer 改寫，來提昇程式的效能</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">similar-words-2</span> <span style="color: #81d4fa;">[</span>word words min-distance<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span>transduce <span style="color: #aaccff;">(</span>comp <span style="color: #aaeecc;">(</span>map <span style="color: #ccaaff;">(</span>partial levensthein-distance word<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>                <span style="color: #aaeecc;">(</span>filter <span style="color: #ccaaff;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #fff59d;">[</span><span style="color: #ff8888;">[</span>d _<span style="color: #ff8888;">]</span><span style="color: #fff59d;">]</span> <span style="color: #fff59d;">(</span>&lt;= d min-distance<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>             group-by-distance             words<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>但是這樣的程式無法並行運算，因此我們再用 fold 來改寫</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">similar-words-3</span> <span style="color: #81d4fa;">[</span>word words min-distance<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">r</span><span style="color: #c6cccc; background-color: #202020;">/</span>fold <span style="color: #aaccff;">(</span>partial merge-with concat<span style="color: #aaccff;">)</span>          group-by-distance          <span style="color: #aaccff;">(</span><span style="color: #fff59d;">r</span><span style="color: #c6cccc; background-color: #202020;">/</span>folder words                    <span style="color: #aaeecc;">(</span>comp <span style="color: #ccaaff;">(</span>map <span style="color: #fff59d;">(</span>partial levensthein-distance word<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span>                       <span style="color: #ccaaff;">(</span>filter <span style="color: #fff59d;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #ff8888;">[</span><span style="color: #795548;">[</span>d _<span style="color: #795548;">]</span><span style="color: #ff8888;">]</span> <span style="color: #ff8888;">(</span>&lt;= d min-distance<span style="color: #ff8888;">)</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>不過有一個問題，fold 會同時執行兩個函式，一個用來執行 reduce，稱為 <code>reducing function</code> ，另外一個則是用來合併結果，稱為 <code>combining function</code> ，而 <code>reducing function</code> 會並行的執行。(<a href="https://adambard.com/blog/clojure-reducers-for-mortals/" target="_blank" rel="external">參考資料</a>)</p><blockquote><p>fold uses two functions: a "reducing" function, which it calls as a regular reduce across segments of the input collection, and a "combining" function, which combines the results of these reductions.</p></blockquote><p>因此我們可以再把這個程式改寫</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">similar-words-4</span> <span style="color: #81d4fa;">[</span>word words min-distance<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">r</span><span style="color: #c6cccc; background-color: #202020;">/</span>fold <span style="color: #aaccff;">(</span>partial merge-with concat<span style="color: #aaccff;">)</span>          <span style="color: #aaccff;">(</span><span style="color: #aaeecc;">(</span>comp <span style="color: #ccaaff;">(</span>map <span style="color: #fff59d;">(</span>partial levensthein-distance word<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span>              <span style="color: #ccaaff;">(</span>filter <span style="color: #fff59d;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #ff8888;">[</span><span style="color: #795548;">[</span>d _<span style="color: #795548;">]</span><span style="color: #ff8888;">]</span> <span style="color: #ff8888;">(</span>&lt;= d min-distance<span style="color: #ff8888;">)</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span> group-by-distance<span style="color: #aaccff;">)</span>          words<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>這樣改寫後，效果好多了，但是還有最後一個問題: 並行化的 fold 只能運作在 non-lazy sequence 上，於是再加一些手腳。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">similar-words-5</span> <span style="color: #81d4fa;">[</span>word words min-distance<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">r</span><span style="color: #c6cccc; background-color: #202020;">/</span>fold <span style="color: #aaccff;">(</span>partial merge-with concat<span style="color: #aaccff;">)</span>          <span style="color: #aaccff;">(</span><span style="color: #aaeecc;">(</span>comp <span style="color: #ccaaff;">(</span>map <span style="color: #fff59d;">(</span>partial levensthein-distance word<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span>              <span style="color: #ccaaff;">(</span>filter <span style="color: #fff59d;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #ff8888;">[</span><span style="color: #795548;">[</span>d _<span style="color: #795548;">]</span><span style="color: #ff8888;">]</span> <span style="color: #ff8888;">(</span>&lt;= d min-distance<span style="color: #ff8888;">)</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span> group-by-distance<span style="color: #aaccff;">)</span>          <span style="color: #aaccff;">(</span>vec words<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>跑出來的結果如下，在講者的 HP zBook 筆電 (i7 雙核)上執行的結果是這樣的</p><ul class="org-ul"><li>一般版本:  ~175 s</li><li>Transducer: ~170 s</li><li>Parallel fold: ~108 s</li></ul><p>做完這些測試後，講者想到了，是否分佈式的 fold 可以提供更好的效能?</p><p>講者選用了 AWS Lambda 以及 Amazon SQS 來進行這個測試，整體的架構是這個樣子的:</p><div class="figure"><p><img src="ar1.png"></p></div><p>接下來你要在你的 project.clj 加入以下這些設定</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #ccaaff;">:plugins</span> <span style="color: #aadddd;">[</span><span style="color: #81d4fa;">[</span>lein-clj-lambda <span style="color: #aadddd;">"0.5.1"</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">]</span><span style="color: #ccaaff;">:lambda</span> <span style="color: #aadddd;">{</span><span style="color: #aadddd;">"demo"</span> <span style="color: #81d4fa;">[</span><span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:handler</span> <span style="color: #aadddd;">"distributed-transducers-poc.LambdaFn"</span>                  <span style="color: #ccaaff;">:memory-size</span> 1536                  <span style="color: #ccaaff;">:timeout</span> 300                  <span style="color: #ccaaff;">:function-name</span> <span style="color: #aadddd;">"distributed-transducers-poc"</span>                  <span style="color: #ccaaff;">:region</span> <span style="color: #aadddd;">"eu-west-1"</span>                  <span style="color: #ccaaff;">:policy-statements</span> <span style="color: #aaeecc;">[</span><span style="color: #ccaaff;">{</span><span style="color: #ccaaff;">:Effect</span> <span style="color: #aadddd;">"Allow"</span>                                       <span style="color: #ccaaff;">:Action</span> <span style="color: #fff59d;">[</span><span style="color: #aadddd;">"sqs:*"</span><span style="color: #fff59d;">]</span>                                       <span style="color: #ccaaff;">:Resource</span> <span style="color: #fff59d;">[</span><span style="color: #aadddd;">"arn:aws:sqs:eu-west-1:*"</span><span style="color: #fff59d;">]</span><span style="color: #ccaaff;">}</span><span style="color: #aaeecc;">]</span>                  <span style="color: #ccaaff;">:s3</span> <span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:bucket</span> <span style="color: #aadddd;">"mhjort-distributed-transducers-poc"</span>                       <span style="color: #ccaaff;">:object-key</span> <span style="color: #aadddd;">"lambda.jar"</span><span style="color: #aaeecc;">}</span><span style="color: #aaccff;">}</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">}</span></pre></div><p>然後使用下面命令進行 deploy</p><pre class="example">lein lambda install demo</pre><p>講者給出了範例，示範用 fold 以及 dfold 執行程式的狀況</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">distributed-transducers-poc.demo</span>  <span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:require</span> <span style="color: #aaccff;">[</span><span style="color: #fff59d;">distributed-transducers-ppc.rc</span> <span style="color: #ccaaff;">:refer</span> <span style="color: #aaeecc;">[</span>dfold<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">]</span>            <span style="color: #aaccff;">[</span><span style="color: #fff59d;">clojure.core.reducers</span> <span style="color: #ccaaff;">:as</span> r<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">r</span><span style="color: #c6cccc; background-color: #202020;">/</span>fold + <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">(</span>map inc<span style="color: #aaccff;">)</span> +<span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">(</span>range 100000<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>dfold + <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">(</span>map inc<span style="color: #aaccff;">)</span> +<span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">(</span>range 100000<span style="color: #81d4fa;">)</span> 2<span style="color: #aadddd;">)</span> <span style="color: #9ac; font-style: italic;">; &lt;= 2 is how many instance you run</span></pre></div><p>那&#x2026; 哪些資料會被送到 SQS 呢?</p><ul class="org-ul"><li>要被執行的東西 (Chunk of items to be processed)</li><li>Reduct function</li></ul><p>而在最後，使用分佈式 fold 的程式會變成這樣</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">similar-words-6</span> <span style="color: #81d4fa;">[</span>word words min-distance<span style="color: #81d4fa;">]</span>    <span style="color: #81d4fa;">(</span>dfold <span style="color: #aaccff;">(</span>partial merge-with concat<span style="color: #aaccff;">)</span>           <span style="color: #aaccff;">(</span><span style="color: #aaeecc;">(</span>comp <span style="color: #ccaaff;">(</span>map <span style="color: #fff59d;">(</span>partial levensthein-distance word<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span>               <span style="color: #ccaaff;">(</span>filter <span style="color: #fff59d;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #ff8888;">[</span><span style="color: #795548;">[</span>d _<span style="color: #795548;">]</span><span style="color: #ff8888;">]</span> <span style="color: #ff8888;">(</span>&lt;= d min-distance<span style="color: #ff8888;">)</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span> group-by-distance<span style="color: #aaccff;">)</span>           <span style="color: #aaccff;">(</span>vec words<span style="color: #aaccff;">)</span>           10<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>而最後整體測試結果則是:</p><ul class="org-ul"><li>筆電 (一般): ~175 s</li><li>筆電 (transducer): ~170 s</li><li>筆電 (parallel fold): ~108 s</li><li>AWS Lambda (10 nodes, cost 0.01 $): ~40 s</li><li>AWS Lambda (20 nodes, cost 0.02 $): ~28 s</li></ul></div></div><div id="outline-container-orgf767c8f" class="outline-2"><h2 id="orgf767c8f">Introduction to clojure.spec - Arne Brasseur</h2><div class="outline-text-2" id="text-orgf767c8f"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/-MeOPF94LhI?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><blockquote><p>講者為 <a href="https://lambdaisland.com" target="_blank" rel="external">LambdaIsland</a> 的維護者，該網站提供了一系列的 Clojure/ClojureScript 教學，若有興趣的話可以付費訂閱。</p></blockquote><br><p><a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 是 Clojure 預計在 1.9 版加入的新功能，對於 Clojure 這種動態型別語言而言，雖然容易開發，但是一旦你傳送給函式的型別不對，就很可能造成除錯不易。</p><p>在 <a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 出現之前，比較有名的型別檢查是 <a href="https://github.com/clojure/core.typed" target="_blank" rel="external">core.typed</a> 以及 <a href="https://github.com/plumatic/schema" target="_blank" rel="external">schema</a> ，而 <a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 將會成為 buildin 在 Clojure 的一部分函式。</p><p><a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 的加入並不會導致程式執行變慢，用到他的時間只有在開發時使用 REPL 以及編譯的時候，所以到底要怎樣用呢？</p><p>如果你是 leinigen 的用戶，更改你的 <code>project.clj</code> 成如下</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defperoject</span> <span style="color: #aaccff;">myproject</span> <span style="color: #aadddd;">"0.1.0-SNAPAHOT"</span>  <span style="color: #ccaaff;">:dependencies</span> <span style="color: #81d4fa;">[</span><span style="color: #aaccff;">[</span><span style="color: #fff59d;">org.clojure</span><span style="color: #c6cccc; background-color: #202020;">/</span>clojure <span style="color: #aadddd;">"1.9.0-alpha13"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span></pre></div><p>boot 的用戶則是在你的 <code>build.boot</code> 加入</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>set-env! <span style="color: #ccaaff;">:dependencies</span> '<span style="color: #81d4fa;">[</span><span style="color: #aaccff;">[</span><span style="color: #fff59d;">org.clojure</span><span style="color: #c6cccc; background-color: #202020;">/</span>clojure <span style="color: #aadddd;">"1.9.0-alpha13"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span></pre></div><p>於是讓我們開始使用 <a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 吧! 講者假設現在有一個機器人主廚 (Robot Chef) 正在弄一份菜單 (recipes)，而這份菜單內容是這樣的:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">tomato-sauce-recipe</span>  <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">ingredients</span> <span style="color: #aaccff;">[</span>250 <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"peeled tomatoes"</span>                          3 <span style="color: #ccaaff;">:clove</span> <span style="color: #aadddd;">"garlic"</span>                          5 <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"pepper"</span><span style="color: #aaccff;">]</span>   <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">steps</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"heat a pan"</span>                    <span style="color: #aadddd;">"throw everything in"</span>                    <span style="color: #aadddd;">"stir"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span></pre></div><p>像這種透過 / (slash) 組成的 keyword (關鍵字)，我們稱呼為 namespace keyword</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #ccaaff;">:</span><span style="color: #fff59d;">grettings</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">kittos</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; </span><span style="color: #9ac; font-style: italic;">:grettings/kittos</span></pre></div><p>為何要用 namespace keyword 呢？一個原因是可以避免到名稱衝突，所以我們可以把所有的 keyword 合併在同一個 map 中</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:</span><span style="color: #fff59d;">http</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">method</span> <span style="color: #ccaaff;">:get</span> <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">method</span> <span style="color: #ccaaff;">:stir</span><span style="color: #aadddd;">}</span></pre></div><p>實際上在 Clojure 中，變數也是包含在 namespace 中的</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">robochef.core</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">ingredents</span> <span style="color: #81d4fa;">{</span>,,,<span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef.core</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">ingredients</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; </span><span style="color: #9ac; font-style: italic;">:robochef.core/ingredients</span><span style="color: #ccaaff;">::ingredients</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; </span><span style="color: #9ac; font-style: italic;">:robochef.core/ingredients</span></pre></div><p>也因此，在一個 map 中使用 namespace 作為 prefix 是很常見的</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">recipe-name</span> <span style="color: #aadddd;">"..."</span> <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">ingredients</span> <span style="color: #81d4fa;">[</span>,,,<span style="color: #81d4fa;">]</span> <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">steps</span> <span style="color: #81d4fa;">[</span>,,,<span style="color: #81d4fa;">]</span> <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">cooking-time</span> 30<span style="color: #aadddd;">}</span></pre></div><p>而在 Clojure 1.9 中，將會有新的語法可以把上面的東西變成這樣</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">recipe</span> #<span style="color: #ccaaff;">:robochef</span><span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:recipes-name</span> <span style="color: #aadddd;">""</span>                       <span style="color: #ccaaff;">:ingredients</span> <span style="color: #aaccff;">[</span>,,,<span style="color: #aaccff;">]</span>                       <span style="color: #ccaaff;">:steps</span> <span style="color: #aaccff;">[</span>,,,<span style="color: #aaccff;">]</span>                       <span style="color: #ccaaff;">:cooking-time</span> 30<span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span><span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">keys</span> <span style="color: #aaeecc;">[</span>steps serves<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">}</span> recipe<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">doseq</span> <span style="color: #aaccff;">[</span>s steps<span style="color: #aaccff;">]</span>    ,,,<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>在了解這些前置訊息後，我們終於可以來到 <a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 了，首先我們把 <a href="http://clojure.org/about/spec" target="_blank" rel="external">clojure.spec</a> 的命名空間(namespace) 指定為 <code>s</code> ，接下來我們加入以下這些 spec，這會將這些 spec 加入到全域去 (global registry)</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">robochef.core</span>  <span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:require</span> <span style="color: #aaccff;">[</span><span style="color: #fff59d;">clojure.spec</span> <span style="color: #ccaaff;">:as</span> s<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">keep in mind </span><span style="color: #9ac; font-style: italic;">::recipe</span><span style="color: #9ac; font-style: italic;"> == </span><span style="color: #9ac; font-style: italic;">:robochef.core/recipe</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">::recipe</span> <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>keys <span style="color: #ccaaff;">:req</span> <span style="color: #aaccff;">[</span><span style="color: #ccaaff;">::ingredients</span><span style="color: #aaccff;">]</span>                        <span style="color: #ccaaff;">:opt</span> <span style="color: #aaccff;">[</span><span style="color: #ccaaff;">::steps</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">::ingredients</span> <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>* <span style="color: #aaccff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>cat <span style="color: #ccaaff;">:amount</span> number?                                 <span style="color: #ccaaff;">:unit</span> keyword?                                 <span style="color: #ccaaff;">:name</span> string?<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">::steps</span> ,,,<span style="color: #aadddd;">)</span></pre></div><p>好了後，我們就可以這樣去驗證，符合 spec 的狀況是這樣的</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>valid? <span style="color: #ccaaff;">::robochef/ingredients</span> <span style="color: #81d4fa;">[</span>5 <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"tea"</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; true</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>conform <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">ingredients</span> <span style="color: #81d4fa;">[</span>5 <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"tea"</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">[{</span><span style="color: #9ac; font-style: italic;">:amount</span><span style="color: #9ac; font-style: italic;"> 5, </span><span style="color: #9ac; font-style: italic;">:unit</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:g</span><span style="color: #9ac; font-style: italic;">, </span><span style="color: #9ac; font-style: italic;">:name</span><span style="color: #9ac; font-style: italic;"> "tea"}]</span></pre></div><p>那錯誤的情況呢? 我們可以透過 <code>clojure.spec/explain</code> 來幫我們找出狀況</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>valid? <span style="color: #ccaaff;">::robochef/ingredients</span> <span style="color: #81d4fa;">[</span><span style="color: #aadddd;">"10"</span> <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"tea"</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; false</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>conform <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">ingredients</span> <span style="color: #81d4fa;">[</span><span style="color: #aadddd;">"10"</span> <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"tea"</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; </span><span style="color: #9ac; font-style: italic;">:clojure.spec/invalid</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>explain <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">ingredients</span> <span style="color: #81d4fa;">[</span><span style="color: #aadddd;">"10"</span> <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"tea"</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">In: [0] val: "10" fails spec:</span><span style="color: #5f5f5f; font-style: italic;">;;   </span><span style="color: #9ac; font-style: italic;">:robochef/ingredients</span><span style="color: #9ac; font-style: italic;"> at: [</span><span style="color: #9ac; font-style: italic;">:amount</span><span style="color: #9ac; font-style: italic;">] predicate: number?</span></pre></div><p>我們也可以用 generator 去產生符合數量並可以通過測試的結果</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>exercise <span style="color: #ccaaff;">:</span><span style="color: #fff59d;">robochef</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">ingredients</span> 2<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">([() []]</span><span style="color: #5f5f5f; font-style: italic;">;;  </span><span style="color: #9ac; font-style: italic;">[(0 </span><span style="color: #9ac; font-style: italic;">:Hi</span><span style="color: #9ac; font-style: italic;"> "0") [{</span><span style="color: #9ac; font-style: italic;">:amount</span><span style="color: #9ac; font-style: italic;"> 0, </span><span style="color: #9ac; font-style: italic;">:unit</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:Hi</span><span style="color: #9ac; font-style: italic;">, </span><span style="color: #9ac; font-style: italic;">:name</span><span style="color: #9ac; font-style: italic;"> "0"}]])</span></pre></div><p>更多的內容我還在消化中，就請看影片吧 ~</p><p>後面演講則稍微提到一下 <a href="https://github.com/clojure/test.check" target="_blank" rel="external">test.check</a> 這個測試用的函式庫。</p><div class="github-card" data-github="clojure/test.check" data-width="400" data-height="" data-theme="default"></div></div></div><div id="outline-container-org91f25d5" class="outline-2"><h2 id="org91f25d5">Clojure of Things</h2><div class="outline-text-2" id="text-org91f25d5"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/FUV_5Hwi5FU?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>講者提及自己的經驗，如何用 Clojure 在目前火紅的 IoT (Internet of things) 上，並使用了 <a href="http://pibrella.com" target="_blank" rel="external">pibrella</a> 這個 Raspberry Pi 的擴充板進行展示，透過 Clojure REPL 動態的控制 pibrella 的 I/O。</p><p>作者使用的函式庫目前我沒在網路上找到，但是我猜他是用 <a href="https://github.com/Pi4J/pi4j" target="_blank" rel="external">pi4j</a> 來作為 Clojure 控制 Raspberry pi 的函式庫。</p><div class="github-card" data-github="Pi4J/pi4j" data-width="400" data-height="" data-theme="default"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script></div></div><div id="outline-container-orgab917e9" class="outline-2"><h2 id="orgab917e9">The Next Five Years of ClojureScript</h2><div class="outline-text-2" id="text-orgab917e9"><br><iframe width="560" height="315" src="https://www.youtube.com/embed/mty0RwkPmE8?list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT" frameborder="0" allowfullscreen></iframe><br><p>這場是目前 ClojureScript 主要維護者 David Nolen 環顧了過去幾年 ClojureScript 開始開發的狀況，以及未來的情況。</p><p>在這場演講後半段也提及到如何參與 ClojureScript 推廣/開發等議題，也有人提問 David Nolen 對於 WebAssembly 的看法等等。</p><p>這場演講我覺的蠻不錯的，很喜歡這種有講故事風格的演講。</p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/fec9a5ee/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Unknown perls from the Clojure standard library 筆記</title>
      <link>https://coldnew.github.io/eea89759/</link>
      <guid>https://coldnew.github.io/eea89759/</guid>
      <pubDate>Tue, 27 Sep 2016 10:58:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
看完 &lt;a href=&quot;http://clojutre.org/2015/&quot;&gt;ClojuTRE 2015&lt;/a&gt; 的 &lt;a href=&quot;https://www.youtube.com/watch?v=QI9Fc5TT87A&quot;&gt;Unknown pearls from the Clojure standard library - Renzo Borgatti&lt;/a&gt; 演講後，來紀錄個筆記。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>看完 <a href="http://clojutre.org/2015/" target="_blank" rel="external">ClojuTRE 2015</a> 的 <a href="https://www.youtube.com/watch?v=QI9Fc5TT87A" target="_blank" rel="external">Unknown pearls from the Clojure standard library - Renzo Borgatti</a> 演講後，來紀錄個筆記。</p><a id="more"></a><iframe width="560" height="315" src="https://www.youtube.com/embed/QI9Fc5TT87A" frameborder="0" allowfullscreen></iframe><p>這場演講介紹了一些在 clojure.core 裡面的函式，這些函式平常可能不太有機會用到，但是可以協助我們除錯程式的問題。</p><p>投影片: <a href="https://github.com/reborg/clojuTRE-2015/raw/master/slides/renzo-borgatti-stdlib.pdf" target="_blank" rel="external">下載連結</a></p><div id="outline-container-org74d6cd8" class="outline-2"><h2 id="org74d6cd8">destructure</h2><div class="outline-text-2" id="text-org74d6cd8"><p><a href="http://clojure.org/guides/destructuring" target="_blank" rel="external">destructure</a> (解構) 在 Clojure 裡面是個非常實用的功能，可以方便我們對資料直接指派變數去代替它，如下:</p><div class="row "><div class="col-md-6 "><p><b>No destructuring</b></p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span>data <span style="color: #aaccff;">[</span>1 2 3<span style="color: #aaccff;">]</span>      a <span style="color: #aaccff;">(</span>nth data 0<span style="color: #aaccff;">)</span>      b <span style="color: #aaccff;">(</span>nth data 1<span style="color: #aaccff;">)</span>      c <span style="color: #aaccff;">(</span>nth data 2<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span>println <span style="color: #aadddd;">"a:"</span> a <span style="color: #aadddd;">"b:"</span> b <span style="color: #aadddd;">"c:"</span> c<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; a: 1 b: 2 c: 3</span></pre></div></div><div class="col-md-6"><p><b>With destructuring</b></p><div class="org-src-container"><pre class="src src-clojure"> <span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span><span style="color: #aaccff;">[</span>a b c<span style="color: #aaccff;">]</span> <span style="color: #aaccff;">[</span>1 2 3<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span>   <span style="color: #81d4fa;">(</span>println <span style="color: #aadddd;">"a:"</span> a <span style="color: #aadddd;">"b:"</span> b <span style="color: #aadddd;">"c:"</span> c<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span> <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; a: 1 b: 2 c: 3</span> &#65279; &#65279; &#65279;</pre></div></div> </div><p>我們可以透過 <a href="https://clojuredocs.org/clojure.core/destructure" target="_blank" rel="external">destructure</a> 去觀察一個東西是如何被解構的，這邊是投影片給的範例:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>destructure '<span style="color: #81d4fa;">[</span><span style="color: #aaccff;">[</span>x y &amp; others<span style="color: #aaccff;">]</span> v<span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; [v2 v</span><span style="color: #5f5f5f; font-style: italic;">;;     </span><span style="color: #9ac; font-style: italic;">x (nth v2 0 nil)</span><span style="color: #5f5f5f; font-style: italic;">;;     </span><span style="color: #9ac; font-style: italic;">y (nth v2 1 nil)</span><span style="color: #5f5f5f; font-style: italic;">;;     </span><span style="color: #9ac; font-style: italic;">others (nthnext v2 2)]</span></pre></div><p>當然投影片給的是整理後的結果，實際上我執行得到的結果是這樣的</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">[</span>vec__23596 v seq__23597 <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">clojure.core</span><span style="color: #c6cccc; background-color: #202020;">/</span>seq vec__23596<span style="color: #81d4fa;">)</span> first__23598 <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">clojure.core</span><span style="color: #c6cccc; background-color: #202020;">/</span>first seq__23597<span style="color: #81d4fa;">)</span> seq__23597 <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">clojure.core</span><span style="color: #c6cccc; background-color: #202020;">/</span>next seq__23597<span style="color: #81d4fa;">)</span> x first__23598 first__23598 <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">clojure.core</span><span style="color: #c6cccc; background-color: #202020;">/</span>first seq__23597<span style="color: #81d4fa;">)</span> seq__23597 <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">clojure.core</span><span style="color: #c6cccc; background-color: #202020;">/</span>next seq__23597<span style="color: #81d4fa;">)</span> y first__23598 others seq__23597<span style="color: #aadddd;">]</span></pre></div></div></div><div id="outline-container-org1134f68" class="outline-2"><h2 id="org1134f68">reductions</h2><div class="outline-text-2" id="text-org1134f68"><p>我們在 Clojure 中很常用 <a href="http://clojuredocs.org/clojure.core/reduce" target="_blank" rel="external">reduce</a> 去將一個函數作用到 list 上的每兩個元素上，然後返回最後的結果，最常見的簡單函數就是一個 list 的元素全部相加</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>reduce + <span style="color: #81d4fa;">(</span>range 10<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; 45</span></pre></div><p>而 <a href="http://clojuredocs.org/clojure.core/reduce" target="_blank" rel="external">reduce</a> 的運作過程，則可以透過 <a href="https://clojuredocs.org/clojure.core/reductions" target="_blank" rel="external">reductions</a> 來協助我們進行查看，可以看到這邊最後得到的 <code>45</code> 就是我們想要的結果。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>reductions + <span style="color: #81d4fa;">(</span>range 10<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  (0 1 3 6 10 15 21 28 36 45)</span></pre></div></div></div><div id="outline-container-org1591709" class="outline-2"><h2 id="org1591709">test</h2><div class="outline-text-2" id="text-org1591709"><p>在 Clojure 中，我們可以在 <a href="http://clojure.org/reference/metadata" target="_blank" rel="external">metadata</a> 中設定好對一個函數的測試方式，然後呼叫 <a href="https://clojuredocs.org/clojure.core/test" target="_blank" rel="external">test</a> 對該函數進行測試，這項功能很適合用在小函式的一些 assertion 測試上。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">add+</span>  <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:test</span> #<span style="color: #aaccff;">(</span><span style="color: #aaffaa;">do</span>            <span style="color: #aaeecc;">(</span>assert <span style="color: #ccaaff;">(</span>= <span style="color: #fff59d;">(</span>add+ 2 3<span style="color: #fff59d;">)</span> 5<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>            <span style="color: #aaeecc;">(</span>assert <span style="color: #ccaaff;">(</span>= <span style="color: #fff59d;">(</span>add+ 4 4<span style="color: #fff59d;">)</span> 8<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">}</span>  <span style="color: #81d4fa;">[</span>x y<span style="color: #81d4fa;">]</span> <span style="color: #81d4fa;">(</span>+ x y<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>test #'add+<span style="color: #aadddd;">)</span> <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">&lt;= trigger</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; </span><span style="color: #9ac; font-style: italic;">:ok</span></pre></div><p>你也可以透過 <a href="https://clojuredocs.org/clojure.core/meta" target="_blank" rel="external">meta</a> 去查看你這個函式的 metadata 或是測試用的函式資訊</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>meta #'addd+<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:arglists</span> <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[</span>x y<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span>, <span style="color: #ccaaff;">:test</span> #function<span style="color: #81d4fa;">[</span><span style="color: #fff59d;">hello.core</span><span style="color: #c6cccc; background-color: #202020;">/</span>fn--23678<span style="color: #81d4fa;">]</span>, <span style="color: #ccaaff;">:line</span> 350, <span style="color: #ccaaff;">:column</span> 4, <span style="color: #ccaaff;">:file</span> <span style="color: #aadddd;">"/home/coldnew/Workspace/hello/src/hello/cpre.clj"</span>, <span style="color: #ccaaff;">:name</span> add+, <span style="color: #ccaaff;">:ns</span> #namespace<span style="color: #81d4fa;">[</span><span style="color: #fff59d;">hello.core</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">}</span></pre></div></div></div><div id="outline-container-org9e56d42" class="outline-2"><h2 id="org9e56d42">clojure.pprint/cl-format</h2><div class="outline-text-2" id="text-org9e56d42"><p><a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">clojure.pprint/cl-format</a> 是 Clojure 移植 Common Lisp 的 format 函式，對於同時寫 Clojure 和 ClojureScript 的開發者而言， <a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">cl-format</a> 可以同時用於 Clojure 和 ClojureScript 上，方便了不少。</p><p>(註:  <a href="http://dev.clojure.org/jira/browse/CLJS-324" target="_blank" rel="external">CLJS-324 ISSUE</a> 尚未被解決前，Clojure 的 <a href="https://clojuredocs.org/clojure.core/format" target="_blank" rel="external">format</a> 是無法用於 ClojureScript 上的)</p><p>如果要更多關於 <a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">cl-format</a> 的使用，可以看看  <a href="http://www.gigamonkeys.com/book/a-few-format-recipes.html" target="_blank" rel="external">Praticle Common Lisp</a> 一書，我在 <a href="http://coldnew.github.io/blog/2016/03-27_leftpad/">clojure/clojurescript 與 left-pad</a> 一文亦有提到如何透過 <a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">cl-format</a> 實作 Clojure/ClojureScript 皆可以用的 leftpad 函式。</p><p>投影片上給的範例則是這樣:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.pprint</span><span style="color: #c6cccc; background-color: #202020;">/</span>cl-format <span style="color: #ccaaff;">nil</span> <span style="color: #aadddd;">"~</span><span style="color: #aadddd;">:r</span><span style="color: #aadddd;">"</span> 1234<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; one thousand, two hundred thirty-fourth</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.pprint</span><span style="color: #c6cccc; background-color: #202020;">/</span>cl-format <span style="color: #ccaaff;">nil</span> <span style="color: #aadddd;">"~@r"</span> 1234<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; MCCXXXIV</span></pre></div></div></div><div id="outline-container-org94ae714" class="outline-2"><h2 id="org94ae714">clojure.java.browse/browse-url</h2><div class="outline-text-2" id="text-org94ae714"><p><a href="https://clojuredocs.org/clojure.java.browse/browse-url" target="_blank" rel="external">clojure.java.browse/browse-url</a> 會呼叫系統預設的瀏覽器，開啟你所指定的網頁。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.java.browse</span><span style="color: #c6cccc; background-color: #202020;">/</span>browse-url <span style="color: #aadddd;">"http://localhost:3000"</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-org6ff7d76" class="outline-2"><h2 id="org6ff7d76">clojure.java.javadoc/javadoc</h2><div class="outline-text-2" id="text-org6ff7d76"><p>Clojure 畢竟是 JVM 上的語言，有時候我們需要查看一些 javadoc，或是查看 Clojure 內部的 Java 實現，可以透過 <a href="https://clojuredocs.org/clojure.java.javadoc/javadoc" target="_blank" rel="external">clojure.java.javadoc/javadoc</a> 來查看</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.java.javadoc</span><span style="color: #c6cccc; background-color: #202020;">/</span>javadoc <span style="color: #81d4fa;">(</span>list* 1 <span style="color: #aaccff;">[]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; open clojure.lang.Cons Javadoc</span></pre></div></div></div><div id="outline-container-org26117ee" class="outline-2"><h2 id="org26117ee">clojure.reflect/reflect</h2><div class="outline-text-2" id="text-org26117ee"><p>老實說我看了還是不知道這是什麼，也許是和 Java 的 <a href="http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful" target="_blank" rel="external">reflection</a> 有關，不過我們還是可以在 <a href="https://clojuredocs.org/clojure.reflect/reflect" target="_blank" rel="external">clojure.reflect/reflect</a> 的文檔中看出一些東西</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>require '<span style="color: #81d4fa;">[</span><span style="color: #fff59d;">clojure.reflect</span> <span style="color: #ccaaff;">:refer</span> <span style="color: #aaccff;">[</span>reflect<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>require '<span style="color: #81d4fa;">[</span><span style="color: #fff59d;">clojure.pprint</span> <span style="color: #ccaaff;">:refer</span> <span style="color: #aaccff;">[</span>print-table<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Here we have a simple function that prints the</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">important bits of the class definition in a table.</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span> <span style="color: #fff59d;">String</span>     reflect     <span style="color: #ccaaff;">:members</span>     print-table<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|                    </span><span style="color: #9ac; font-style: italic;">:name</span><span style="color: #9ac; font-style: italic;"> |           </span><span style="color: #9ac; font-style: italic;">:return-type</span><span style="color: #9ac; font-style: italic;"> | </span><span style="color: #9ac; font-style: italic;">:declaring-class</span><span style="color: #9ac; font-style: italic;"> |                                       </span><span style="color: #9ac; font-style: italic;">:parameter-types</span><span style="color: #9ac; font-style: italic;"> |                       </span><span style="color: #9ac; font-style: italic;">:exception-types</span><span style="color: #9ac; font-style: italic;"> |                        </span><span style="color: #9ac; font-style: italic;">:flags</span><span style="color: #9ac; font-style: italic;"> |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|--------------------------+------------------------+------------------+--------------------------------------------------------+----------------------------------------+-------------------------------|</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|               replaceAll |       java.lang.String | java.lang.String |                    [java.lang.String java.lang.String] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|   CASE_INSENSITIVE_ORDER |                        | java.lang.String |                                                        |                                        |     #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:static</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:final</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|                  indexOf |                    int | java.lang.String |                    [char&lt;&gt; int int char&lt;&gt; int int int] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:static</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|           codePointCount |                    int | java.lang.String |                                              [int int] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|                 getChars |                   void | java.lang.String |                                   [int int char&lt;&gt; int] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|            regionMatches |                boolean | java.lang.String |                         [int java.lang.String int int] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|                  isEmpty |                boolean | java.lang.String |                                                     [] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|              codePointAt |                    int | java.lang.String |                                                  [int] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|              lastIndexOf |                    int | java.lang.String |                                     [java.lang.String] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">|               startsWith |                boolean | java.lang.String |                                 [java.lang.String int] |                                     [] |                    #{</span><span style="color: #9ac; font-style: italic;">:public</span><span style="color: #9ac; font-style: italic;">} |</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">...etc</span></pre></div><p>講者在投影片中給的範例則是這個: (注意到結果是節錄呦~)</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>require '<span style="color: #81d4fa;">[</span><span style="color: #fff59d;">clojure.reflect</span> <span style="color: #ccaaff;">:refer</span> <span style="color: #aaccff;">[</span>reflect<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>println <span style="color: #81d4fa;">(</span>with-out-str <span style="color: #aaccff;">(</span><span style="color: #fff59d;">clojure.pprint</span><span style="color: #c6cccc; background-color: #202020;">/</span>write <span style="color: #aaeecc;">(</span>reflect <span style="color: #ccaaff;">:a</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">extract from a typical output:</span><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:name</span> invoke, <span style="color: #ccaaff;">:return-type</span> <span style="color: #fff59d;">java.lang.Object</span>, <span style="color: #ccaaff;">:declaring-class</span> <span style="color: #fff59d;">clojure.lang.Keyword</span>, <span style="color: #ccaaff;">:parameter-types</span> <span style="color: #81d4fa;">[</span><span style="color: #fff59d;">java.lang.Object</span> <span style="color: #fff59d;">java.lang.Object</span><span style="color: #81d4fa;">]</span>, <span style="color: #ccaaff;">:exception-types</span> <span style="color: #81d4fa;">[]</span>, <span style="color: #ccaaff;">:flags</span> #<span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:public</span> <span style="color: #ccaaff;">:final</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">}</span></pre></div></div></div><div id="outline-container-orgc6f37fb" class="outline-2"><h2 id="orgc6f37fb">clojure.inspector/inspect-tree</h2><div class="outline-text-2" id="text-orgc6f37fb"><p>我們在處理一些樹狀資料時(ex: JSON 格式)，有個圖示化的工具可以方便瀏覽所有資訊，這邊可以透過 <a href="https://clojuredocs.org/clojure.inspector/inspect-tree" target="_blank" rel="external">clojure.inspector/inspect-tree</a> 來查看</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>require '<span style="color: #81d4fa;">[</span><span style="color: #fff59d;">clojure.inspector</span> <span style="color: #ccaaff;">:as</span> i<span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">m</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> <span style="color: #aadddd;">"a"</span>        <span style="color: #ccaaff;">:b</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:c</span> <span style="color: #aadddd;">"c"</span>            <span style="color: #ccaaff;">:d</span> <span style="color: #aaeecc;">[</span>1 2 3<span style="color: #aaeecc;">]</span>            <span style="color: #ccaaff;">:e</span> <span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:f</span> <span style="color: #aadddd;">"f"</span>                <span style="color: #ccaaff;">:g</span> <span style="color: #aadddd;">"g"</span>                <span style="color: #ccaaff;">:h</span> <span style="color: #aadddd;">"h"</span><span style="color: #aaeecc;">}</span><span style="color: #aaccff;">}</span>        <span style="color: #ccaaff;">:i</span> <span style="color: #aaccff;">[</span>1 2 3<span style="color: #aaccff;">]</span>        <span style="color: #ccaaff;">:l</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:m</span> <span style="color: #aadddd;">"m"</span>            <span style="color: #ccaaff;">:n</span> <span style="color: #aadddd;">"n"</span><span style="color: #aaccff;">}</span>        <span style="color: #ccaaff;">:o</span> <span style="color: #aaccff;">[</span><span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:p</span> <span style="color: #aadddd;">"p"</span> <span style="color: #ccaaff;">:q</span> <span style="color: #aadddd;">"q"</span><span style="color: #aaeecc;">}</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">i</span><span style="color: #c6cccc; background-color: #202020;">/</span>inspect-tree m<span style="color: #aadddd;">)</span></pre></div><p>這樣呼叫，會得到如下的視窗</p><div class="figure"><p><img src="inspect-tree.png"></p></div></div></div><div id="outline-container-org7fed263" class="outline-2"><h2 id="org7fed263">clojure.lang.PersistentQueue</h2><div class="outline-text-2" id="text-org7fed263"><p><a href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentQueue.java" target="_blank" rel="external">clojure.lang.persistentQueue</a> 是 Clojure 下並未寫在 doc 上面的 Queue 實現 (java) ，我們可以用它來實作我們需要的 queue (佇列) 功能</p><p>基本上，你有以下幾種方法可以對你的 PersistentQueue 進行處理</p><ul class="org-ul"><li><p>peek</p><p>取得 queue 最頂端的資料(head)</p></li><li><p>pop</p><p>回傳不包含最頂端資料(head)的一個新的 PersistentQueue</p></li><li><p>conj</p><p>將資料加入到 queue 的尾巴</p></li><li><p>empty?</p><p>檢測 queue 是否為空的</p></li><li><p>seq</p><p>將 queue 的資料變成序列 (sequence)</p></li></ul><p>投影片上，講者是舉這範例:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">e</span> <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">clojure.lang.PersistentQueue</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">EMPTY</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">buf</span> <span style="color: #81d4fa;">(</span>reduce conj e <span style="color: #aaccff;">(</span>range 10<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>peek buf<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; 0</span><span style="color: #aadddd;">(</span>peek <span style="color: #81d4fa;">(</span>pop buf<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; 1</span><span style="color: #aadddd;">(</span>peek <span style="color: #81d4fa;">(</span>pop <span style="color: #aaccff;">(</span>pop buf<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; 2</span></pre></div><p>而 <a href="http://stackoverflow.com/questions/3136453/immutable-queue-in-clojure" target="_blank" rel="external">StackOverflow</a> 則是有人舉出了如何透過  <a href="https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentQueue.java" target="_blank" rel="external">clojure.lang.persistentQueue</a> 實現自己的 queue 函式</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">queue</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[]</span> <span style="color: #fff59d;">clojure.lang.PersistentQueue</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">EMPTY</span><span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[</span>coll<span style="color: #aaccff;">]</span> <span style="color: #aaccff;">(</span>reduce conj <span style="color: #fff59d;">clojure.lang.PersistentQueue</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">EMPTY</span> coll<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defmethod</span> <span style="color: #aaccff;">print-method</span> <span style="color: #fff59d;">clojure.lang.PersistentQueue</span>  <span style="color: #81d4fa;">[</span>q ^<span style="color: #fff59d;">java.io.Writer</span> w<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #ff8888;">.write</span> w <span style="color: #aadddd;">"#queue "</span><span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span>print-method <span style="color: #aaccff;">(</span>sequence q<span style="color: #aaccff;">)</span> w<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>comment  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #aaccff;">[</span><span style="color: #ccaaff;">*data-readers*</span> <span style="color: #aaeecc;">{</span>'queue #'queue<span style="color: #aaeecc;">}</span><span style="color: #aaccff;">]</span>    <span style="color: #aaccff;">(</span>read-string <span style="color: #aaeecc;">(</span>pr-str <span style="color: #ccaaff;">(</span>queue <span style="color: #fff59d;">[</span>1 2 3<span style="color: #fff59d;">]</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-orgbc1ebad" class="outline-2"><h2 id="orgbc1ebad">fnil</h2><div class="outline-text-2" id="text-orgbc1ebad"><p>我們在用 Clojure 處理東西的時候，有時候可能是資料本身就是 nil 的情況，這種狀況下對 nil 進行處理可能就會導致 Exception 的狀況發生</p><p>在傳統的 LISP 中，常以 <code>or</code> 作為一個保護，一旦遇到 nil 的情況，則回傳預設值</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">or</span> <span style="color: #ccaaff;">nil</span> 10<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; 10</span></pre></div><p><a href="https://clojuredocs.org/clojure.core/fnil" target="_blank" rel="external">fnil</a> 則是用來替你的函式多加一層保護，讓函式遇到 nil 的狀況可以避免一些 Exception 的發生</p><p>講者在投影片上提供的範例是這樣的:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">m</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:host</span> <span style="color: #aadddd;">"127.0.0.1"</span> <span style="color: #ccaaff;">:port</span> <span style="color: #ccaaff;">nil</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>update m <span style="color: #ccaaff;">:port</span> <span style="color: #81d4fa;">(</span>fnil #<span style="color: #aaccff;">(</span><span style="color: #fff59d;">Integer</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">parseInt</span> <span style="color: #aaccff;">%</span><span style="color: #aaccff;">)</span> <span style="color: #aadddd;">"80"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; {</span><span style="color: #9ac; font-style: italic;">:host</span><span style="color: #9ac; font-style: italic;"> "127.0.0.1", </span><span style="color: #9ac; font-style: italic;">:port</span><span style="color: #9ac; font-style: italic;"> 80}</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">m</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:host</span> <span style="color: #aadddd;">"127.0.0.1"</span> <span style="color: #ccaaff;">:port</span> <span style="color: #aadddd;">"8008"</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>update m <span style="color: #ccaaff;">:port</span> <span style="color: #81d4fa;">(</span>fnil #<span style="color: #aaccff;">(</span><span style="color: #fff59d;">Integer</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">parseInt</span> <span style="color: #aaccff;">%</span><span style="color: #aaccff;">)</span> <span style="color: #aadddd;">"80"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; {</span><span style="color: #9ac; font-style: italic;">:host</span><span style="color: #9ac; font-style: italic;"> "127.0.0.1", </span><span style="color: #9ac; font-style: italic;">:port</span><span style="color: #9ac; font-style: italic;"> 8008}</span></pre></div><p>不過我們也可以將其拆開來看，這樣會更好理解</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">Integer</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">parseInt</span> <span style="color: #aadddd;">"10"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; 10</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">Integer</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">parseInt</span> <span style="color: #ccaaff;">nil</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  Unhandled java.lang.NumberFormatException</span><span style="color: #aadddd;">(</span><span style="color: #81d4fa;">(</span>fnil #<span style="color: #aaccff;">(</span><span style="color: #fff59d;">Integer</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">parseInt</span> <span style="color: #aaccff;">%</span><span style="color: #aaccff;">)</span> 80<span style="color: #81d4fa;">)</span> <span style="color: #aadddd;">"1000"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; 1000</span></pre></div></div></div><div id="outline-container-orgd6acee4" class="outline-2"><h2 id="orgd6acee4">counted?</h2><div class="outline-text-2" id="text-orgd6acee4"><p><a href="https://clojuredocs.org/clojure.core/counted_q" target="_blank" rel="external">counted?</a> 是 O(1) 的操作，用來查看目標是否具有實作 <a href="https://clojuredocs.org/clojure.core/count" target="_blank" rel="external">count</a> 函式</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>counted? <span style="color: #81d4fa;">[</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span> <span style="color: #ccaaff;">:c</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; true</span><span style="color: #aadddd;">(</span>counted? '<span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span> <span style="color: #ccaaff;">:c</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; true</span><span style="color: #aadddd;">(</span>counted? <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> 1 <span style="color: #ccaaff;">:b</span> 2 <span style="color: #ccaaff;">:c</span> 3<span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; true</span><span style="color: #aadddd;">(</span>counted? #<span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span> <span style="color: #ccaaff;">:c</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; true</span><span style="color: #aadddd;">(</span>counted? <span style="color: #aadddd;">"asdf"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; false</span><span style="color: #aadddd;">(</span>counted? <span style="color: #81d4fa;">(</span>into-array <span style="color: #fff59d;">Integer</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ccaaff;">TYPE</span> <span style="color: #aaccff;">[</span>1 2 3<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; false</span></pre></div></div></div><div id="outline-container-orgbcd4af6" class="outline-2"><h2 id="orgbcd4af6">reversible?</h2><div class="outline-text-2" id="text-orgbcd4af6"><p>[[<a href="https://clojuredocs.org/clojure.core/reversible_q%5D%5Breversibl%5B%5Bfile" target="_blank" rel="external">https://clojuredocs.org/clojure.core/reversible_q][reversibl[[file</a>:][]]] 也是 O(1) 的操作，用來查看目標是否有實作 <a href="https://clojuredocs.org/clojure.core/reversible_q" target="_blank" rel="external">reversible</a> 函式</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>reversible? <span style="color: #81d4fa;">[]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  true</span><span style="color: #aadddd;">(</span>reversible? <span style="color: #81d4fa;">(</span>sorted-map<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  true</span><span style="color: #aadddd;">(</span>reversible? <span style="color: #81d4fa;">(</span>sorted-set<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  true</span><span style="color: #aadddd;">(</span>reversible? '<span style="color: #81d4fa;">()</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  false</span><span style="color: #aadddd;">(</span>reversible? <span style="color: #81d4fa;">{}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  false</span><span style="color: #aadddd;">(</span>reversible? #<span style="color: #81d4fa;">{}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  false</span></pre></div></div></div><div id="outline-container-org2f6312a" class="outline-2"><h2 id="org2f6312a">vector-of</h2><div class="outline-text-2" id="text-org2f6312a"><p><a href="https://clojuredocs.org/clojure.core/vector-of" target="_blank" rel="external">vector-of</a> 會根據你提供的類型 (permitive type) 來將參數轉換成相對應型別的向量 (vector)</p><p>可以使用的類型有 <code>:int</code> , <code>:long</code> , <code>:float</code> , <code>:double</code> , <code>:byte</code> , <code>:short</code> , <code>:char</code> , <code>:boolean</code></p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>conj <span style="color: #81d4fa;">(</span>vector-of <span style="color: #ccaaff;">:int</span><span style="color: #81d4fa;">)</span> 1 2 3<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; [1 2 3]  ; &lt;-- note, these are unboxed internally</span><span style="color: #aadddd;">(</span>vector-of <span style="color: #ccaaff;">:int</span> 1 2 3<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; [1 2 3]  ; same here</span><span style="color: #aadddd;">(</span>vector-of <span style="color: #ccaaff;">:float</span> 1 2 3<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; [1.0 2.0 3.0]</span><span style="color: #aadddd;">(</span>type <span style="color: #81d4fa;">(</span>conj <span style="color: #aaccff;">(</span>vector-of <span style="color: #ccaaff;">:int</span><span style="color: #aaccff;">)</span> 1 2 3<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; clojure.core.Vec</span><span style="color: #aadddd;">(</span>type <span style="color: #81d4fa;">(</span>conj <span style="color: #aaccff;">(</span>vector-of <span style="color: #ccaaff;">:float</span><span style="color: #aaccff;">)</span> 1 2 3<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; clojure.core.Vec</span></pre></div></div></div><div id="outline-container-orgb04eda2" class="outline-2"><h2 id="orgb04eda2">clojure.set/rename-keys</h2><div class="outline-text-2" id="text-orgb04eda2"><p><a href="https://clojuredocs.org/clojure.set/rename-keys" target="_blank" rel="external">clojure.set/rename-keys</a> 可以用來改變目前現有的 hash-map 的關鍵字 (keyword) 名稱</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>require '<span style="color: #fff59d;">clojure.set</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.set</span><span style="color: #c6cccc; background-color: #202020;">/</span>rename-keys <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> 1, <span style="color: #ccaaff;">:b</span> 2<span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:new-a</span>, <span style="color: #ccaaff;">:b</span> <span style="color: #ccaaff;">:new-b</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; {</span><span style="color: #9ac; font-style: italic;">:new-a</span><span style="color: #9ac; font-style: italic;"> 1, </span><span style="color: #9ac; font-style: italic;">:new-b</span><span style="color: #9ac; font-style: italic;"> 2}</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">cloure.set</span><span style="color: #c6cccc; background-color: #202020;">/</span>rename-keys <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> 1<span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:b</span> <span style="color: #ccaaff;">:new-b</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; {</span><span style="color: #9ac; font-style: italic;">:a</span><span style="color: #9ac; font-style: italic;"> 1}</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">You need to be careful about key collisions.  You probably shouldn't</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">depend on the exact behavior.</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.set</span><span style="color: #c6cccc; background-color: #202020;">/</span>rename-keys <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> 1 <span style="color: #ccaaff;">:b</span> 2<span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; {</span><span style="color: #9ac; font-style: italic;">:b</span><span style="color: #9ac; font-style: italic;"> 1}</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.set</span><span style="color: #c6cccc; background-color: #202020;">/</span>rename-keys  <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> 1 <span style="color: #ccaaff;">:b</span> 2<span style="color: #81d4fa;">}</span>  <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span> <span style="color: #ccaaff;">:b</span> <span style="color: #ccaaff;">:a</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; {</span><span style="color: #9ac; font-style: italic;">:a</span><span style="color: #9ac; font-style: italic;"> 1}</span></pre></div></div></div><div id="outline-container-orga1ec355" class="outline-2"><h2 id="orga1ec355">clojure.data/diff</h2><div class="outline-text-2" id="text-orga1ec355"><p><a href="https://clojuredocs.org/clojure.data/diff" target="_blank" rel="external">clojure.data/diff</a> 用來對兩個序列(sequence)進行比較，並回傳比較的結果</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>require '<span style="color: #fff59d;">clojure.data</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.data</span><span style="color: #c6cccc; background-color: #202020;">/</span>diff <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> 1 <span style="color: #ccaaff;">:b</span> 2<span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:a</span> 3 <span style="color: #ccaaff;">:b</span> 2 <span style="color: #ccaaff;">:c</span> 3<span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; ({</span><span style="color: #9ac; font-style: italic;">:a</span><span style="color: #9ac; font-style: italic;"> 1} {</span><span style="color: #9ac; font-style: italic;">:a</span><span style="color: #9ac; font-style: italic;"> 3, </span><span style="color: #9ac; font-style: italic;">:c</span><span style="color: #9ac; font-style: italic;"> 3} {</span><span style="color: #9ac; font-style: italic;">:b</span><span style="color: #9ac; font-style: italic;"> 2})</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.data</span><span style="color: #c6cccc; background-color: #202020;">/</span>diff <span style="color: #81d4fa;">[</span>1 2 3<span style="color: #81d4fa;">]</span> <span style="color: #81d4fa;">[</span>5 9 3 2 3 7<span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; [[1 2] [5 9 nil 2 3 7] [nil nil 3]]</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.data</span><span style="color: #c6cccc; background-color: #202020;">/</span>diff <span style="color: #81d4fa;">(</span>set <span style="color: #aaccff;">[</span>1 2 3<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">(</span>set <span style="color: #aaccff;">[</span>5 9 3 2 3 7<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; [#{1}  #{7 9 5}        #{3 2}]</span></pre></div></div></div><div id="outline-container-org83a69d9" class="outline-2"><h2 id="org83a69d9">munge</h2><div class="outline-text-2" id="text-org83a69d9"><p><a href="https://clojuredocs.org/clojure.core/munge" target="_blank" rel="external">munge</a> 這個函式並未有文檔，因此只能實際看看用途了</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">foo</span> <span style="color: #81d4fa;">[]</span> <span style="color: #81d4fa;">(</span>println <span style="color: #aadddd;">"foo"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;  #'user/foo</span>foo<span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; #&lt;user$foo user$foo@a0dc71&gt;</span><span style="color: #aadddd;">(</span>munge foo<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; "user_DOLLARSIGN_foo_CIRCA_a0dc71"</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">doseq</span> <span style="color: #81d4fa;">[</span>c <span style="color: #aaccff;">(</span>remove #<span style="color: #aaeecc;">(</span><span style="color: #fff59d;">Character</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">isLetterOrDigit</span> <span style="color: #aaccff;">%</span><span style="color: #aaeecc;">)</span> <span style="color: #aaeecc;">(</span>map char <span style="color: #ccaaff;">(</span>range 32 127<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span>println c <span style="color: #aadddd;">"-&gt;"</span> <span style="color: #aaccff;">(</span>munge c<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Prints:</span><span style="color: #5f5f5f; font-style: italic;">;;   </span><span style="color: #9ac; font-style: italic;">-&gt;</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">! -&gt; _BANG_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">" -&gt; _DOUBLEQUOTE_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;"># -&gt; _SHARP_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">$ -&gt; $</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">% -&gt; _PERCENT_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">&amp; -&gt; _AMPERSAND_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">' -&gt; _SINGLEQUOTE_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">( -&gt; (</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">) -&gt; )</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">* -&gt; _STAR_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">+ -&gt; _PLUS_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">, -&gt; ,</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">- -&gt; _</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">. -&gt; .</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">/ -&gt; _SLASH_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">: -&gt; _COLON_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">; -&gt; ;</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">&lt; -&gt; _LT_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">= -&gt; _EQ_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">&gt; -&gt; _GT_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">? -&gt; _QMARK_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">@ -&gt; _CIRCA_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">[ -&gt; _LBRACK_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">\ -&gt; _BSLASH_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">] -&gt; _RBRACK_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">^ -&gt; _CARET_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">_ -&gt; _</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">` -&gt; `</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">{ -&gt; _LBRACE_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">| -&gt; _BAR_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">} -&gt; _RBRACE_</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">~ -&gt; _TILDE_</span></pre></div></div></div><div id="outline-container-org29060d9" class="outline-2"><h2 id="org29060d9">gensym</h2><div class="outline-text-2" id="text-org29060d9"><p><a href="https://clojuredocs.org/clojure.core/gensym" target="_blank" rel="external">gensym</a> 會產生不衝突名稱的 symbol，這個應該是在 macro 實現時，Clojure 所使用到的函式</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>gensym <span style="color: #aadddd;">"foo"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; foo2020</span><span style="color: #aadddd;">(</span>gensym <span style="color: #aadddd;">"foo"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; foo2027</span></pre></div></div></div><div id="outline-container-orgbc0fdab" class="outline-2"><h2 id="orgbc0fdab">seque</h2><div class="outline-text-2" id="text-orgbc0fdab"><p><a href="https://clojuredocs.org/clojure.core/seque" target="_blank" rel="external">seque</a> 是一種 <code>阻塞隊列(Linked Blocking Queue, LBQ)</code> 的實作，這種實現是線程安全(thread safe)的，可以確保資料先進先出(first in first out, FIFO) 的狀況。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span>start <span style="color: #aaccff;">(</span><span style="color: #fff59d;">System</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">nanoTime</span><span style="color: #aaccff;">)</span>      q <span style="color: #aaccff;">(</span>seque         <span style="color: #aaeecc;">(</span>iterate          #<span style="color: #ccaaff;">(</span><span style="color: #aaffaa;">do</span> <span style="color: #fff59d;">(</span><span style="color: #fff59d;">Thread</span><span style="color: #c6cccc; background-color: #202020;">/</span>sleep 400<span style="color: #fff59d;">)</span> <span style="color: #fff59d;">(</span>inc <span style="color: #aaccff;">%</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span>          0<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span>println <span style="color: #aadddd;">"sleep five seconds..."</span><span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">Thread</span><span style="color: #c6cccc; background-color: #202020;">/</span>sleep 5000<span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">doseq</span> <span style="color: #aaccff;">[</span>i <span style="color: #aaeecc;">(</span>take 20 q<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">]</span>    <span style="color: #aaccff;">(</span>println <span style="color: #aaeecc;">(</span>int <span style="color: #ccaaff;">(</span>/ <span style="color: #fff59d;">(</span>- <span style="color: #ff8888;">(</span><span style="color: #fff59d;">System</span><span style="color: #c6cccc; background-color: #202020;">/</span><span style="color: #ff8888;">nanoTime</span><span style="color: #ff8888;">)</span> start<span style="color: #fff59d;">)</span> 1e7<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>             <span style="color: #aadddd;">":"</span> i<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">The iterate form returns a lazy seq that delays nearly a half-second</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">before returning each subsequent item.  Here seque starts a thread</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">generating the lazy seq.</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">The body of the let allows the seque thread to get ahead by five seconds</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">before it begins consuming the seq using doseq.  The doseq prints a</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">timestamp and the value from the seq when it becomes available.  The</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">first 11 or so are available almost instantly, until the consuming</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">doseq catches up with the producing iterate, at which point the consumer</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">blocks for 400ms before each item can be printed.</span><span style="color: #5f5f5f; font-style: italic;">;;</span><span style="color: #9ac; font-style: italic;">sleep five seconds...</span>500 : 0500 : 1500 : 2500 : 3500 : 4500 : 5500 : 6500 : 7500 : 8500 : 9500 : 10500 : 11520 : 12<span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">......</span></pre></div></div></div><div id="outline-container-orgd2cc687" class="outline-2"><h2 id="orgd2cc687">clojure.zip/zippers</h2><div class="outline-text-2" id="text-orgd2cc687"><p>clojure.zip 是用來處理樹狀結構用函式庫，這篇文章有很好的解釋: <a href="http://blog.lambdaliu.com/posts-output/2016-04-05-understand-clojure-zipper-with-picture/" target="_blank" rel="external">(λx.Liu)Blog=Hacking: Understand clojure.zip with picture</a></p><p><a href="https://clojuredocs.org/clojure.zip/zipper" target="_blank" rel="external">clojure.zip/zipper</a> 則是用來將資料包裝起來，這樣我們就可以透過 clojure.zip 來處理這些樹狀資料</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">zp</span> <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">clojure.zip</span><span style="color: #c6cccc; background-color: #202020;">/</span>zipper vector? seq <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">fn</span> <span style="color: #aaeecc;">[</span>_ c<span style="color: #aaeecc;">]</span> c<span style="color: #aaccff;">)</span>                            <span style="color: #aaccff;">[</span><span style="color: #aaeecc;">[</span>1 2 3<span style="color: #aaeecc;">]</span> <span style="color: #aaeecc;">[</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span><span style="color: #aaeecc;">]</span> 2 3 <span style="color: #aaeecc;">[</span>40 50 60<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; [[[1 2 3] [</span><span style="color: #9ac; font-style: italic;">:a</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:b</span><span style="color: #9ac; font-style: italic;">] 2 3 [40 50 60]] nil]</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">clojure.zip</span><span style="color: #c6cccc; background-color: #202020;">/</span>down zp<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #aadddd;">[</span><span style="color: #81d4fa;">[</span>1 2 3<span style="color: #81d4fa;">]</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:l</span> <span style="color: #aaccff;">[]</span>,  <span style="color: #ccaaff;">:pnodes</span> <span style="color: #aaccff;">[</span><span style="color: #aaeecc;">[</span><span style="color: #ccaaff;">[</span>1 2 3<span style="color: #ccaaff;">]</span> <span style="color: #ccaaff;">[</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span><span style="color: #ccaaff;">]</span> 2 3 <span style="color: #ccaaff;">[</span>40 50 60<span style="color: #ccaaff;">]</span><span style="color: #aaeecc;">]</span><span style="color: #aaccff;">]</span>,  <span style="color: #ccaaff;">:ppath</span> <span style="color: #ccaaff;">nil</span>,  <span style="color: #ccaaff;">:r</span> <span style="color: #aaccff;">(</span><span style="color: #aaeecc;">[</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span><span style="color: #aaeecc;">]</span> 2 3 <span style="color: #aaeecc;">[</span>40 50 60<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">-&gt;</span> zp    <span style="color: #fff59d;">clojure.zip</span><span style="color: #c6cccc; background-color: #202020;">/</span>down    first<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #aadddd;">[</span>1 2 3<span style="color: #aadddd;">]</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">-&gt;</span> zp    <span style="color: #fff59d;">clojure.zip</span><span style="color: #c6cccc; background-color: #202020;">/</span>down    <span style="color: #fff59d;">clojure.zip</span><span style="color: #c6cccc; background-color: #202020;">/</span>right<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #aadddd;">[</span><span style="color: #81d4fa;">[</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span><span style="color: #81d4fa;">]</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:l</span> <span style="color: #aaccff;">[</span><span style="color: #aaeecc;">[</span>1 2 3<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">]</span>,  <span style="color: #ccaaff;">:pnodes</span> <span style="color: #aaccff;">[</span><span style="color: #aaeecc;">[</span><span style="color: #ccaaff;">[</span>1 2 3<span style="color: #ccaaff;">]</span> <span style="color: #ccaaff;">[</span><span style="color: #ccaaff;">:a</span> <span style="color: #ccaaff;">:b</span><span style="color: #ccaaff;">]</span> 2 3 <span style="color: #ccaaff;">[</span>40 50 60<span style="color: #ccaaff;">]</span><span style="color: #aaeecc;">]</span><span style="color: #aaccff;">]</span>,  <span style="color: #ccaaff;">:ppath</span> <span style="color: #ccaaff;">nil</span>,  <span style="color: #ccaaff;">:r</span> <span style="color: #aaccff;">(</span>2 3 <span style="color: #aaeecc;">[</span>40 50 60<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span></pre></div></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/eea89759/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 使用 Yocto 建立系統</title>
      <link>https://coldnew.github.io/c3e8558e/</link>
      <guid>https://coldnew.github.io/c3e8558e/</guid>
      <pubDate>Sun, 11 Sep 2016 13:47:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/zynq_linux_simple/&quot;&gt;zybo board 開發記錄: 執行 Linux 作業系統&lt;/a&gt; 一文中，我們提到了如何自行編譯 u-boot、Linux kernel、busybox 來讓 Zybo Board 可以開機進到 SD 卡上的 Linux 系統。這一次，我們要來談談怎樣使用 &lt;a href=&quot;https://www.yoctoproject.org/&quot;&gt;Yocto Project&lt;/a&gt; 來建立 Zybo board 的 Linux 系統。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在 <a href="http://coldnew.github.io/zybo-board/zynq_linux_simple/">zybo board 開發記錄: 執行 Linux 作業系統</a> 一文中，我們提到了如何自行編譯 u-boot、Linux kernel、busybox 來讓 Zybo Board 可以開機進到 SD 卡上的 Linux 系統。這一次，我們要來談談怎樣使用 <a href="https://www.yoctoproject.org/" target="_blank" rel="external">Yocto Project</a> 來建立 Zybo board 的 Linux 系統。</p><a id="more"></a><p><a href="https://www.yoctoproject.org/" target="_blank" rel="external">Yocto Project</a> 是近年來各大 SoC 商以及開發板商皆參與的 Linux 系統構件工具，透過 Yocto Project 的協助，使用者可以針對自己的需求構件想要的映像檔(image)或是 Root File System，和 Yocto 類似功能的工具則是 <a href="https://buildroot.org/" target="_blank" rel="external">buildroot</a> 。</p><p>本文將以 <a href="http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> 作為目標開發板，示範如何使用 Yocto 來構件他的系統。</p><div id="outline-container-org4f4e750" class="outline-2"><h2 id="org4f4e750">預先準備</h2><div class="outline-text-2" id="text-org4f4e750"><p>根據你使用的 Linux 發行板的不同，你需要安裝一些套件，這邊列出一些發行板的資訊，詳細請參考 <a href="http://www.yoctoproject.org/docs/2.0/ref-manual/ref-manual.html#intro-requirements" target="_blank" rel="external">Yocto Project Reference Manual</a></p><ul class="org-ul"><li><p>Debian/Ubuntu</p><div class="org-src-container"><pre class="src src-sh">coldnew@debian ~ $ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat</pre></div></li><li><p>Fedora</p><div class="org-src-container"><pre class="src src-sh">coldnew@fedora ~ $ sudo dnf install gawk make wget tar bzip2 gzip python unzip perl patch diffutils diffstat git cpp gcc gcc-c++ glibc-devel texinfo chrpath ccache perl-Data-Dumper perl-Text-ParseWords perl-Thread-Queue socat findutils which</pre></div></li><li><p>Gentoo</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~ $ emerge -v dev-vcs/git dev-util/diffstat app-arch/unzip sys-apps/texinfo app-admin/chrpath media-libs/libsdl2 sys-apps/iproute2 x11-terms/xterm net-nds/rpcbind</pre></div><p>如果你和我一樣，使用 Gentoo Linux 的話，在 Gentoo Linux 下要確認你使用的是 Python 2.7</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~ $ eselect python set python2.7eselect python listAvailable Python interpreters:  <span style="color: #aadddd;">[</span>1<span style="color: #aadddd;">]</span>   python2.7 *  <span style="color: #aadddd;">[</span>2<span style="color: #aadddd;">]</span>   python3.2  <span style="color: #aadddd;">[</span>3<span style="color: #aadddd;">]</span>   python3.3pythonPython 2.7.5 <span style="color: #aadddd;">(</span>default, Oct 19 2013, 22:52:27<span style="color: #aadddd;">)</span></pre></div></li></ul></div></div><div id="outline-container-org707d160" class="outline-2"><h2 id="org707d160">格式化 MicroSD 卡</h2><div class="outline-text-2" id="text-org707d160"><p>在這次的開發中，我們要設定 MicroSD 卡片成兩個分區，第一個是 <code>fat32</code> 格式，第二個則使用 <code>ext4</code> 格式，若不會使用 <code>fdisk</code> 命令的話，可以透過 <code>gparted</code> 來進行格式化，以下是我格式化卡片的範例 (8GB 卡片)。</p><div class="figure"><p><img src="format.png"></p></div></div></div><div id="outline-container-org4c81733" class="outline-2"><h2 id="org4c81733">下載 Poky</h2><div class="outline-text-2" id="text-org4c81733"><p>在開始用 <a href="https://www.yoctoproject.org/" target="_blank" rel="external">Yocto Project</a> 之前，我們需要下載 Poky, Poky 是 Yocto 的構件系統，基本上我們會用到的東西都會在 poky 資料夾內</p><p>注意到我們這邊切換到 <code>krogoth</code> 這個分支，Yocto 裡面不同的分支(branch) 代表了不同版本。</p><pre class="example">coldnew@gentoo ~ $ git clone git://git.yoctoproject.org/poky -b krogoth</pre><p>好了後，進入到 poky 資料夾</p><pre class="example">coldnew@gentoo ~/poky $ cd poky</pre></div></div><div id="outline-container-org3e906b2" class="outline-2"><h2 id="org3e906b2">下載 meta-xilinx</h2><div class="outline-text-2" id="text-org3e906b2"><p>Yocto 對於不同的 SoC 廠商，會有提供不同的 layer 來對特定的開源程式加上合適的 patch，或是添加不同 SoC 廠各自需要的韌體(firmware)，以及各開發板特定的設定。在 Xilinx 平台上，我們需要下載 <code>meta-xilinx</code> ，我們需要的 kernel 以及 Zybo board 的設定資訊都在裡面。</p><p>這邊一樣切換到 <code>krogoth</code> 這個分支(branch)</p><pre class="example">coldnew@gentoo ~/poky $ git clone git://github.com/Xilinx/meta-xilinx -b krogoth</pre></div></div><div id="outline-container-orgac95813" class="outline-2"><h2 id="orgac95813">切換到編譯用目錄</h2><div class="outline-text-2" id="text-orgac95813"><p>接下來，我們將透過 <code>source</code> 指令暫時修改當前 shell 的環境變數，並切換到 <code>build</code> 資料夾</p><pre class="example">coldnew@gentoo ~/poky $ source oe-init-build-env buildYou had no conf/local.conf file. This configuration file has therefore beencreated for you with some default values. You may wish to edit it to, forexample, select a different MACHINE (target hardware). See conf/local.conffor more information as common configuration options are commented.You had no conf/bblayers.conf file. This configuration file has therefore beencreated for you with some default values. To add additional metadata layersinto your configuration please add entries to conf/bblayers.conf.The Yocto Project has extensive documentation about OE including a referencemanual which can be found at:    http://yoctoproject.org/documentationFor more information about OpenEmbedded see their website:    http://www.openembedded.org/### Shell environment set up for builds. ###You can now run 'bitbake &lt;target&gt;'Common targets are:    core-image-minimal    core-image-sato    meta-toolchain    meta-ide-supportYou can also run generated qemu images with a command like 'runqemu qemux86'</pre><p>預設的目標機器是 <code>qemux86</code> 因此我們需要修改一下，不過先看一下當前目錄結構</p><pre class="example">coldnew@gentoo ~/poky/build $ tree  .. &lt;b&gt;└── conf &lt;b&gt;    ├── bblayers.conf    ├── local.conf    └── templateconf.cfg1 directory, 3 files</pre><p>我們首先要修改 <code>conf/bblayers.conf</code> ，在上面添加我們剛剛下載的 <code>meta-xilinx</code> ，修改完會像這樣</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">POKY_BBLAYERS_CONF_VERSION is increased each time build/conf/bblayers.conf</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">changes incompatibly</span>POKY_BBLAYERS_CONF_VERSION = <span style="color: #aadddd;">"2"</span>BBPATH = <span style="color: #aadddd;">"${TOPDIR}"</span>BBFILES ?= <span style="color: #aadddd;">""</span>BBLAYERS ?= <span style="color: #aadddd;">" \</span><span style="color: #aadddd;">  /home/coldnew/poky/meta \</span><span style="color: #aadddd;">  /home/coldnew/poky/meta-poky \</span><span style="color: #aadddd;">  /home/coldnew/poky/meta-yocto-bsp \</span><span style="color: #aadddd;">  /home/coldnew/poky/meta-xilinx \</span><span style="color: #aadddd;">  "</span></pre></div><p>接下來，修改 <code>conf/local.conf</code> ，這份檔案可以用來設定要編譯的目標機器，在這邊，我們將目標機器改成 <code>zybo-linux-bd-zynq7</code></p><div class="org-src-container"><pre class="src src-sh">MACHINE ??= <span style="color: #aadddd;">"zybo-linux-bd-zynq7"</span></pre></div><p>都改好了後，就可以開始準備編譯了</p></div></div><div id="outline-container-org5bae90e" class="outline-2"><h2 id="org5bae90e">編譯 core-image-minimal</h2><div class="outline-text-2" id="text-org5bae90e"><p>Yocto 下有許多預設的 image 可以進行編譯，其中最基本的 image 就是 <code>core-image-minimal</code> 了，裡面只會包含一些幾本的組件而已，我們可以透過他來確認我們編譯出來的 rootfs 是否能用。</p><pre class="example">coldnew@gentoo ~/poky/build $ bitbake core-image-minimalParsing recipes: 100% |#######################################################################################################################| Time: 00:01:03Parsing of 883 .bb files complete (0 cached, 883 parsed). 1313 targets, 71 skipped, 0 masked, 0 errors.NOTE: Resolving any missing task queue dependenciesBuild Configuration:BB_VERSION        = "1.30.0"BUILD_SYS         = "x86_64-linux"NATIVELSBSTRING   = "Gentoo-2.3"TARGET_SYS        = "arm-poky-linux-gnueabi"MACHINE           = "zybo-linux-bd-zynq7"DISTRO            = "poky"DISTRO_VERSION    = "2.1.1"TUNE_FEATURES     = "arm armv7a vfp thumb neon       callconvention-hard       cortexa9"TARGET_FPU        = "hard"metameta-pokymeta-yocto-bsp    = "krogoth:aad7166704021d82ad3a5ec468552f8f10360d41"meta-xilinx       = "krogoth:dcd1c218f943c3657b138cb05012c90c65f32a35"NOTE: Fetching uninative binary shim from http://downloads.yoctoproject.org/releases/uninative/1.0.1/x86_64-nativesdk-libc.tar.bz2;sha256sum=acf1e44a0ac2e855e81da6426197d36358bf7b4e88e552ef933128498c8910f8NOTE: Preparing RunQueueNOTE: Executing SetScene TasksNOTE: Executing RunQueue TasksCurrently 4 running tasks (78 of 2127):0: gcc-source-5.3.0-5.3.0-r0 do_unpack (pid 10582)1: m4-native-1.4.17-r0 do_configure (pid 14097)2: binutils-cross-arm-2.26-r0 do_unpack (pid 14533)3: glibc-initial-2.23-r0 do_fetch (pid 15428)</pre><p>接下來因為這是第一次編譯，Yocto 需要下載原始碼以及進行編譯，會花很多時間，所以這時候可以去睡個覺或是看看書等它編譯完成，第二次編譯後會因為有快取機制 (cache)，就不須要花這樣多的時間來進行編譯囉~</p><p>編譯好了以後，我們切入到 <code>tmp/deploy/images/zybo-linux-bd-zynq7/</code> 資料夾，裡面有的就是我們需要的檔案</p><pre class="example">coldnew@gentoo ~/poky/build $ ls tmp/deploy/images/zybo-linux-bd-zynq7/bitstream                                                                    modules--4.4-xilinx+git0+89cc643aff-r0-zybo-linux-bd-zynq7-20160910030958.tgzbitstream-+gitAUTOINC+63ca49fe02-r0.bit                                      modules-zybo-linux-bd-zynq7.tgzboot.bin                                                                     README_-_DO_NOT_DELETE_FILES_IN_THIS_DIRECTORY.txtboot.bin-zybo-linux-bd-zynq7                                                 u-boot-dtb.imgboot.bin-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0               u-boot.elfcore-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.cpio            u-boot-zybo-linux-bd-zynq7.elfcore-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.cpio.gz.u-boot  u-boot-zybo-linux-bd-zynq7.imgcore-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.manifest        u-boot-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0.elfcore-image-minimal-zybo-linux-bd-zynq7-20160910030958.rootfs.tar.gz          u-boot-zybo-linux-bd-zynq7-v2016.03+gitAUTOINC+df61a74e68-r0.imgcore-image-minimal-zybo-linux-bd-zynq7.cpio                                  uImagecore-image-minimal-zybo-linux-bd-zynq7.cpio.gz.u-boot                        uImage--4.4-xilinx+git0+89cc643aff-r0-zybo-linux-bd-zynq7-20160910030958.bincore-image-minimal-zybo-linux-bd-zynq7.manifest                              uImage-zybo-linux-bd-zynq7.bincore-image-minimal-zybo-linux-bd-zynq7.tar.gz                                zybo-linux-bd-zynq7.dtbdownload.bit</pre><p>我們將以下這些檔案複製到 SD 卡的第一個分區</p><pre class="example">bitstream  boot.bin  u-boot-dtb.img  uImage  zybo-linux-bd-zynq7.dtb</pre><p>接下來，在 SD 卡的第一個分割區 (fat32) 建立 <code>uEnv.txt</code> 檔案，用來告訴 u-boot 開機的方式</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #aaccff;">kernel_image</span>=uImage<span style="color: #aaccff;">devicetree_image</span>=zybo-linux-bd-zynq7.dtb<span style="color: #aaccff;">bootargs</span>=<span style="color: #aaccff;">root</span>=/dev/mmcblk0p2 rw rootwait<span style="color: #aaccff;">uenvcmd</span>=fatload mmc 0 0x3000000 $<span style="color: #aadddd;">{</span><span style="color: #aaccff;">kernel_image</span><span style="color: #aadddd;">}</span> &amp;&amp; fatload mmc 0 0x2A00000 $<span style="color: #aadddd;">{</span><span style="color: #aaccff;">devicetree_image</span><span style="color: #aadddd;">}</span> &amp;&amp; bootm 0x3000000 - 0x2A00000</pre></div><p>好了後，將 <code>core-image-minimal-zybo-linux-bd-zynq7.tar.gz</code> 解壓縮到 SD 卡的第二個分割區</p><pre class="example">coldnew@gentoo /tmp/sdc2 $ sudo tar xvf ~/poky/build/tmp/deploy/images/zybo-linux-bd-zynq7/core-image-minimal-zybo-linux-bd-zynq7.tar.gz</pre><p>如果你需要 kernel modules 的話，將 <code>modules-zybo-linux-bd-zynq7.tgz</code> 解壓到 SD 卡的第二個分割區</p><pre class="example">coldnew@gentoo /tmp/sdc2 $ sudo tar xvf ~/poky/build/tmp/deploy/images/zybo-linux-bd-zynq7/modules-zybo-linux-bd-zynq7.tgz</pre><p>至此，我們 SD 卡開機的準備已經完成!!</p></div></div><div id="outline-container-org1169ad2" class="outline-2"><h2 id="org1169ad2">測試開機與結果</h2><div class="outline-text-2" id="text-org1169ad2"><p>是時候來測試結果了，要注意到你的 Zybo Board 的 <code>JP5</code> 要設定成下面這樣，這樣給電時，Zynq 才會讀取 SD 卡上面的 u-boot 並將位元流 (bitstream) 燒錄到 FPGA 中。</p><div class="figure"><p><img src="sdboot.png"></p></div><p>插入剛剛建立好的 SD 卡，並提供電源後，我們可以使用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等，啟動它並開啟 <code>/dev/ttyUSB1</code> 後，設定 baudrate 為 <code>115200</code> ，就可以看到開機並進入到 rootfs 囉。</p><div class="figure"><p><img src="console.png"></p></div></div></div><div id="outline-container-orgc5cf1f6" class="outline-2"><h2 id="orgc5cf1f6">延伸閱讀</h2><div class="outline-text-2" id="text-orgc5cf1f6"><p><code>[1]</code> <a href="https://github.com/Xilinx/meta-xilinx/blob/master/README.booting.md" target="_blank" rel="external">Booting meta-xilinx boards</a></p><p><code>[2]</code> <a href="http://www.yoctoproject.org/docs/2.0/ref-manual/ref-manual.html" target="_blank" rel="external">Yocto Project Reference Manual</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/c3e8558e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 執行 Linux 作業系統</title>
      <link>https://coldnew.github.io/d9dfdd56/</link>
      <guid>https://coldnew.github.io/d9dfdd56/</guid>
      <pubDate>Sun, 17 Jul 2016 11:45:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/zynq_led_flash/&quot;&gt;zybo board 開發記錄: Zynq 與 LED 閃爍控制&lt;/a&gt; 一文中我們談到了如何透過 C 語言撰寫獨立的程式，讓它控制 Zynq 的處理器系統 (Processing System, PS) 去閃爍 LED 的亮暗。既然 Zynq 的處理器系統 (Processing System, PS) 使用的是 ARM Cortex-A9 的處理器，那當然也可以讓我們跑 Linux 在 Zybo Board 上。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在 <a href="http://coldnew.github.io/zybo-board/zynq_led_flash/">zybo board 開發記錄: Zynq 與 LED 閃爍控制</a> 一文中我們談到了如何透過 C 語言撰寫獨立的程式，讓它控制 Zynq 的處理器系統 (Processing System, PS) 去閃爍 LED 的亮暗。既然 Zynq 的處理器系統 (Processing System, PS) 使用的是 ARM Cortex-A9 的處理器，那當然也可以讓我們跑 Linux 在 Zybo Board 上。</p><a id="more"></a><p>本文將簡述如何自行編譯 u-boot 以及 Linux Kernel，並搭配 Busybox 製作簡單的 RootFS 執行於 Zybo Board 上。</p><div id="outline-container-org851c71a" class="outline-2"><h2 id="org851c71a">開發目標</h2><div class="outline-text-2" id="text-org851c71a"><p>在這次的開發中，我們要編譯 u-boot、Linux，並使用 Busybox 製作簡單的 Rootfs 後，透過製作 SD 卡來讓 Zybo Board 透過 SD 卡開機。</p><p>要注意到的是，由於我們要透過 SD 卡開機進入到 Linux 系統，因此我們要透過 <code>JP5</code> 去更改開機模式。</p><div class="figure"><p><img src="zybo_config_pins.png"></p></div></div></div><div id="outline-container-org949ea4b" class="outline-2"><h2 id="org949ea4b">了解開機流程</h2><div class="outline-text-2" id="text-org949ea4b"><p>既然我們要讓 Zybo board 執行 Linux 系統，就要先來了解一下開機流程，才知道我們大概需要準備哪些東西。從  <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_1/ug1165-zynq-embedded-design-tutorial.pdf" target="_blank" rel="external">Zynq-7000 All Programmable SoC: Embedded Design Tutorial - A Hands-On Guide to Effective Embedded System Design (UG1165)</a> 可以看到 Zynq-7000 執行 Linux 系統的開機流程圖。</p><div class="figure"><p><img src="bootp.png"></p></div><p>也就是說，當開始提供電源給 Zynq 處理器系統 (Processing System, PS) 並完成重置(reset) 後，Zynq 內建的 Boot ROM 會去載入 <code>第一階段開機程式 (First Stage Boot Loader, FSBL)</code> ，接著載入 <code>位元流 (bitstream)</code> 去初始化整個 <code>可程式邏輯(Programmable Logic, PL)</code> 。 完成後，接下來就是透過 U-Boot 去載入 Linux Kernel、Device Tree 以及 Root File System。</p><p>了解了這個，我們就知道我們大概要準備哪些東西了。</p></div></div><div id="outline-container-orga4e8bd5" class="outline-2"><h2 id="orga4e8bd5">設定好環境</h2><div class="outline-text-2" id="text-orga4e8bd5"><p>在安裝玩 Vivado 與 Xilinx SDK 後，實際上包含 Zynq 在用的 ARM toolchain 亦同時被安裝到系統中，我們只要使用 <code>source</code> 命令即可讓當前的環境知道 xilinx-arm toolchain 的路徑。這邊以 Viavdo 2016.2 作為範例。</p><pre class="example">coldnew@gentoo ~ $ source /opt/Xilinx/Vivado/2016.2/settings64.sh</pre><p>這樣就可以獲得 arm-xilinx-* toolchain 的命令，實際上有哪些呢? 輸入個 arm-xilinx- 按下 TAB 看看</p><pre class="example">coldnew@gentoo ~ $ arm-xilinx-arm-xilinx-eabi-addr2line            arm-xilinx-eabi-gcc-4.9.2            arm-xilinx-eabi-objcopyarm-xilinx-linux-gnueabi-ar          arm-xilinx-linux-gnueabi-gcc-ar      arm-xilinx-linux-gnueabi-objdumparm-xilinx-eabi-ar                   arm-xilinx-eabi-gcc-ar               arm-xilinx-eabi-objdumparm-xilinx-linux-gnueabi-as          arm-xilinx-linux-gnueabi-gcc-nm      arm-xilinx-linux-gnueabi-ranlibarm-xilinx-eabi-as                   arm-xilinx-eabi-gcc-nm               arm-xilinx-eabi-ranlibarm-xilinx-linux-gnueabi-c++         arm-xilinx-linux-gnueabi-gcc-ranlib  arm-xilinx-linux-gnueabi-readelfarm-xilinx-eabi-c++                  arm-xilinx-eabi-gcc-ranlib           arm-xilinx-eabi-readelfarm-xilinx-linux-gnueabi-c++filt     arm-xilinx-linux-gnueabi-gcov        arm-xilinx-linux-gnueabi-sizearm-xilinx-eabi-c++filt              arm-xilinx-eabi-gcov                 arm-xilinx-eabi-sizearm-xilinx-linux-gnueabi-cpp         arm-xilinx-linux-gnueabi-gdb         arm-xilinx-linux-gnueabi-spritearm-xilinx-eabi-cpp                  arm-xilinx-eabi-gdb                  arm-xilinx-eabi-spritearm-xilinx-linux-gnueabi-elfedit     arm-xilinx-linux-gnueabi-gprof       arm-xilinx-linux-gnueabi-stringsarm-xilinx-eabi-elfedit              arm-xilinx-eabi-gprof                arm-xilinx-eabi-stringsarm-xilinx-linux-gnueabi-g++         arm-xilinx-linux-gnueabi-ld          arm-xilinx-linux-gnueabi-striparm-xilinx-eabi-g++                  arm-xilinx-eabi-ld                   arm-xilinx-eabi-striparm-xilinx-linux-gnueabi-gcc         arm-xilinx-linux-gnueabi-nmarm-xilinx-eabi-gcc                  arm-xilinx-eabi-nm                   arm-xilinx-linux-gnueabi-addr2linearm-xilinx-linux-gnueabi-gcc-4.9.2   arm-xilinx-linux-gnueabi-objcopy</pre><p>如果你系統上已經有其他的 ARM toolchain 的話，可以考慮跳過這一步驟，接下來要格式化 Micro SD 卡。</p></div></div><div id="outline-container-org50cea4e" class="outline-2"><h2 id="org50cea4e">格式化 MicroSD 卡</h2><div class="outline-text-2" id="text-org50cea4e"><p>在這次的開發中，我們要設定 MicroSD 卡片成兩個分區，第一個是 <code>fat32</code> 格式，第二個則使用 <code>ext4</code> 格式，若不會使用 <code>fdisk</code> 命令的話，可以透過 <code>gparted</code> 來進行格式化，以下是我格式化卡片的範例 (8GB 卡片)。</p><div class="figure"><p><img src="format.png"></p></div><p>(實際上在本文的範例中，只會用到第一個分區，第二個分區是為了往後文章要開機到大一點的 rootfs 準備的。)</p></div></div><div id="outline-container-org1a181fa" class="outline-2"><h2 id="org1a181fa">編譯 u-boot</h2><div class="outline-text-2" id="text-org1a181fa"><p>我們首先去 <a href="https://github.com/DigilentInc/u-boot-Digilent-Dev" target="_blank" rel="external">GitHub</a> 下載 DigilentInc 加入 zybo board 後的 u-boot 版本，要注意這邊要選擇 <code>master-next</code> 分支。</p><div class="org-src-container"><pre class="src src-sh">git clone https://github.com/DigilentInc/u-boot-Digilent-Dev.git -b master-next</pre></div><p>完成後進入到該資料夾</p><pre class="example">coldnew@gentoo ~ $ cd u-boot-Digilent-Dev</pre><p>編譯 u-boot，記得指派編譯目標為 <code>zynq_zybo_config</code></p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/u-boot-Digilent-Dev $ <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make zynq_zybo_configcoldnew@gentoo ~/u-boot-Digilent-Dev $ <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make</pre></div><p>編譯完成後，注意一下 <code>u-boot</code> 這個檔案，他就是我們等等要用到的 u-boot 執行檔，不過由於 Xilinx Tool 要找有 .elf 副檔名的檔案，因此我們把它複製成 <code>u-boot.elf</code> 。</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/u-boot-Digilent-Dev $ cp u-boot u-boot.elf</pre></div></div></div><div id="outline-container-org1487b06" class="outline-2"><h2 id="org1487b06">編譯 Linux kernel</h2><div class="outline-text-2" id="text-org1487b06"><p>編譯好 u-boot 後，接下來就是編譯 Linux Kernel 了，我們一樣選擇 DigilentInc 加入 zybo board 後的 Linux Kernel 版本，記得要選 <code>master-next</code> 分支。</p><div class="org-src-container"><pre class="src src-sh">git clone https://github.com/DigilentInc/Linux-Digilent-Dev.git -b master-next</pre></div><p>接著，當然就是編譯了，不過在這之前請先確定你有裝 <code>u-boot-tools</code> 這套件，我們需要裡面的 mkimage 指令，Gentoo Linux 可以直接用以下命令來安裝。</p><pre class="example">coldnew@gentoo ~ $ sudo emerge dev-embedded/u-boot-tools</pre><p>完成後進入 Linux Kernel 資料夾</p><pre class="example">coldnew@gentoo ~ $ cd Linux-Digilent-Dev</pre><p>編譯我們需要的 <code>uImage</code> 文件，記得要指定 config 為 <code>xilinx_zynq_defconfig</code> 以及設定 <code>UIMAGE_LOADADDR</code> 為 <code>0x8000</code> 。</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/Linux-Digilent-Dev $ <span style="color: #aaccff;">ARCH</span>=arm <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make xilinx_zynq_defconfigcoldnew@gentoo ~/Linux-Digilent-Dev $ <span style="color: #aaccff;">ARCH</span>=arm <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- makecoldnew@gentoo ~/Linux-Digilent-Dev $ <span style="color: #aaccff;">ARCH</span>=arm <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make <span style="color: #aaccff;">UIMAGE_LOADADDR</span>=0x8000 uImagecoldnew@gentoo ~/Linux-Digilent-Dev $ <span style="color: #aaccff;">ARCH</span>=arm <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make zynq-zybo.dtb</pre></div><p>編譯完後，我們會需要 <code>arch/arm/boot/uImage</code> 以及 <code>arch/arm/boot/dts/zynq-zybo.dtb</code> 這兩個檔案，後者就是 device tree 編譯出來的資料檔。</p><p>由於放入到 SD 卡上的 device tree 檔案名稱為 <code>devicetree.dtb</code> ，因此這邊將 <code>zynq-zybo.dtb</code> 改一下名。</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/Linux-Digilent-Dev $ cp arch/arm/boot/dts/zynq-zybo.dtb devicetree.dtb</pre></div><p>如果你想手動修改 Device Tree 並再重新編譯的話，也可以這樣去產生我們要的 <code>devicetree.dtb</code> 。</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/Linux-Digilent-Dev $ ./scripts/dtc/dtc -I dts -O dtb -o devicetree.dtb arch/arm/boot/dts/zynq-zybo.dts</pre></div></div></div><div id="outline-container-org4fc88c9" class="outline-2"><h2 id="org4fc88c9">編譯 BusyBox</h2><div class="outline-text-2" id="text-org4fc88c9"><p><a href="http://www.busybox.net/" target="_blank" rel="external">Busybox</a> 是一個非常有趣的程式，舉凡我們在 Linux 下最常用的命令如 ls、cd 等到 sed、vi 他都具有相對應的簡單實現，此外，這些命令實際上都只是一個軟連結 (symlink) 連結到名為 busybox 的執行檔，也就是說，如果我們將 busybox 進行靜態編譯 (static link)，則製作出來的系統整體大小大約為 2 MB (kernel) + 1.4 MB (busybox)，而這個系統卻又可以具有許多 UN*X 下的常用命令，也因此 busybox 很常用於空間有限的系統。</p><p>我們在這個開發過程中，由於只是驗證執行 Linux 系統的功能，因此選用 Busybox 來作為我們的 rootfs。</p><p>首先先下載 Busybox 的原始碼，這裡選用 <code>1_25_stable</code> 這個穩定分支</p><div class="org-src-container"><pre class="src src-sh">git clone git://git.busybox.net/busybox -b 1_25_stable</pre></div><p>進行我們自己的設定</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/busybox $ <span style="color: #aaccff;">ARCH</span>=arm <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make menuconfig</pre></div><p>在進行設定時有以下幾點要確實注意，我們要將 busybox 編譯為靜態連結，並且增加 <code>init</code> 功能，主要設定如下:</p><pre class="example">Busybox Settings  ---&gt;        Build Options  ---&gt;               [*] Build BusyBox as a static binary (no shared libs)Init Utilities  ---&gt;        [*] initLogin/Password Management Utilities  ---&gt;        [*] gettyShells  ---&gt;        [*] ash</pre><p>設定完成後開始進行編譯</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/busybox $ <span style="color: #aaccff;">ARCH</span>=arm <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make</pre></div><p>編譯完成後透過 <code>make install</code> 命令，會將編譯出來的 busybox 與軟連結(symlink)產生在 <code>_install</code> 資料夾內</p><div class="org-src-container"><pre class="src src-sh">coldnew@Rosia ~/busybox $ <span style="color: #aaccff;">ARCH</span>=arm <span style="color: #aaccff;">CROSS_COMPILE</span>=arm-xilinx-linux-gnueabi- make install</pre></div><p>建立一些缺少的資料夾 (/dev、/sys &#x2026;etc)</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/busybox $ cd _install &amp;&amp; mkdir -p proc sys dev etc/init.d root</pre></div><p>建立 <code>etc/init.d/rcS</code> 作為啟動腳本，並添加以下內容</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/busybox/_install $ vim etc/init.d/rcS<span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #9ac; font-style: italic;">!/bin/sh</span>mount -t proc none /procmount -t sysfs none /sys/sbin/mdev -s</pre></div><p>將 <code>etc/init.d/rcS</code> 加入可執行權限</p><pre class="example">coldnew@gentoo ~/busybox/_install $ chmod +x etc/init.d/rcS</pre><p>建立 <code>etc/inittab</code> ，這會讓我們可以透過 UART 登入 zybo board</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/busybox/_install $ vim etc/inittab<span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #9ac; font-style: italic;">!/bin/sh</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Init script</span>::sysinit:/etc/init.d/rcS<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Start shell on the serial ports</span>::respawn:/sbin/getty -L ttyPS0 115200 vt100<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">What to do when restarting the init process</span>::restart:/sbin/init<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">What to do before rebooting</span>::shutdown:/bin/umount -a -r</pre></div><p>設定預設的 <code>/etc/passwd</code> 檔案，我們要讓 root 用戶登入時不用輸入密碼</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/busybox/_install $ vim etc/passwdroot::0:0:root:/root:/bin/sh</pre></div><p>建立 <code>/init</code> 並軟連結到 <code>/sbin/init</code> ，避免 Linux Kernel 開機時找不到 rootfs 的 init。</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~/busybox/_install $ ln -s /sbin/init init</pre></div><p>接下來，由於這次我們只是要開機到 ramdisk 上的 rootfs, 因此將 busybox 做出的 rootfs 打包成 cpio 格式。</p><pre class="example">coldnew@gentoo ~/busybox/_install $ find . | sudo cpio -H newc -o | gzip -9 &gt; ../uramdisk.cpio.gz</pre><p>再透過 <code>mkimage</code> 將這個 <code>uramdisk.cpio.gz</code> 檔案轉成 uboot 用的 <code>uramdisk.image.gz</code></p><pre class="example">coldnew@gentoo ~/busybox/_install $  mkimage -A arm -T ramdisk -C gzip -d ../uramdisk.cpio.gz ../uramdisk.image.gzImage Name:Created:      Sun Jul 17 19:02:08 2016Image Type:   ARM Linux RAMDisk Image (gzip compressed)Data Size:    1042106 Bytes = 1017.68 kB = 0.99 MBLoad Address: 00000000Entry Point:  00000000</pre><p>在這邊的這個 <code>uramdisk.image.gz</code> 就是我們開機會進入到的 rootfs，也是我們等等要放到 SD 卡第一個磁區的檔案。</p></div></div><div id="outline-container-orgcca6e02" class="outline-2"><h2 id="orgcca6e02">編譯位元流 (bitstream)</h2><div class="outline-text-2" id="text-orgcca6e02"><p>在 <a href="https://coldnew.github.io/zybo-board/linux_bd/">zybo board 開發記錄: 升級 Digilent 提供的設計檔</a> 一文中，我們提到了怎樣升級 <a href="http://store.digilentinc.com/" target="_blank" rel="external">Digilent</a> 提供的預先定義好接腳的設定檔 (zybo_base_system) ，這次的專案，我們就直接用這個設定檔案來進行 Linux 開機的動作。</p><p>首先你必須根據該篇文章，將你的 Zybo board 設定檔案升級到你用的 Vivado 版本，完成後我們重新建立一個乾淨的專案。</p><p>先來把先前生成的舊專案清掉:</p><pre class="example">coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ sh cleanup.sh</pre><p>接下來用 Vivado 2016.2 重新生出新的專案 ~</p><pre class="example">coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ /opt/Xilinx/Vivado/2016.2/bin/vivado -mode batch -source create_project.tcl</pre><p>完成後，會看到 <code>ZYBO/Projects/linux_bd/proj</code> 目錄變成這樣:</p><pre class="example">coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ tree -L 1. &lt;b&gt;├── cleanup.cmd├── cleanup.sh├── create_project.tcl├── ip_upgrade.log &lt;g&gt;├── linux_bd.cache &lt;b&gt;├── linux_bd.hw &lt;b&gt;├── linux_bd.ip_user_files &lt;b&gt;├── linux_bd.sim &lt;b&gt;├── linux_bd.srcs &lt;b&gt;├── linux_bd.xpr├── vivado.jou└── vivado.log &lt;g&gt;5 directories, 7 files</pre><p>我們使用 Vivado 打開 <code>linux_bd.xpr</code> 這個專案。</p><div class="figure"><p><img src="oprj.png"></p></div><p>如果你有興趣看他生出來的 Block Design 是怎樣的，也可以切到 Block Design 那頁看看</p><div class="figure"><p><img src="linux_bd.png"></p></div><p>我們直接點選 <code>Program and Debug -&gt; Generate Bitstream</code> 產生我們要的位元流 (bitstream)</p><div class="figure"><p><img src="ge.png"></p></div></div></div><div id="outline-container-org1f80839" class="outline-2"><h2 id="org1f80839">建立 FSBL</h2><div class="outline-text-2" id="text-org1f80839"><p>到此，我們除了 <code>第一階段開機程式 (First Stage Boot Loader, FSBL)</code> 外，其他的程式都已經編譯出執行檔了，讓我們來處理 FSBL 吧。</p><p>首先點選 <code>File -&gt; Export -&gt; Export hardware</code></p><div class="figure"><p><img src="e1.png"></p></div><p>記得要勾選 <code>Include bitstream</code></p><div class="figure"><p><img src="e2.png"></p></div><p>完成後，執行 Xilinx SDK</p><div class="figure"><p><img src="e3.png"></p></div><p>透過 <code>File -&gt; New -&gt; Application Project</code> 去建立我們的新專案</p><div class="figure"><p><img src="ax1.png"></p></div><p>設定這個專案為 <code>standalone</code> 的專案</p><div class="figure"><p><img src="ax2.png"></p></div><p>選擇樣板為 <code>Zynq FSBL</code></p><div class="figure"><p><img src="ax3.png"></p></div><p>選擇我們剛剛建立的 <code>FSBL</code> 專案，按下右鍵選擇 <code>Build Project</code> 進行編譯</p><div class="figure"><p><img src="ax4.png"></p></div></div></div><div id="outline-container-org66dd658" class="outline-2"><h2 id="org66dd658">建立 BOOT.bin</h2><div class="outline-text-2" id="text-org66dd658"><p>編譯完 FSBL 後，選擇 <code>Xilinx Tools -&gt; Create Boot Image</code> 去建立我們的 BOOT.bin</p><div class="figure"><p><img src="ax5.png"></p></div><p>在 <code>Boot image partitions</code> 那邊，加入我們的 bitstream 以及 u-boot 檔案，記得要按照順序加入。</p><p>完成後，點選 <code>Create Image</code> 就會產生我們要的 <code>BOOT.bin</code> 到指定路徑。</p><div class="figure"><p><img src="ax6.png"></p></div><p>在這個步驟中，如果你是指令控的話，我們也可以在產生 FSBL.elf 後，建立一個名為 <code>boot.bif</code> 的檔案，其內容如下</p><div class="org-src-container"><pre class="src src-c"><span style="color: #5f5f5f; font-style: italic;">//</span><span style="color: #9ac; font-style: italic;">arch = zynq; split = false; format = BIN</span><span style="color: #ccaaff;">the_ROM_image</span>:<span style="color: #aadddd;">{</span>    <span style="color: #81d4fa;">[</span>bootloader<span style="color: #81d4fa;">]</span>/path/to/fsbl-build/fsbl.elf    /path/to/linux_bd/linux_bd.sdk/linux_bd_wrapper.bit    /path/to/u-boot/u-boot.elf<span style="color: #aadddd;">}</span></pre></div><p>接下來透過 <code>bootgen</code> 這個命令去產生 <code>BOOT.bin</code></p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~ $ bootgen -image boot.bif -w on -o i BOOT.bin</pre></div></div></div><div id="outline-container-org009d11f" class="outline-2"><h2 id="org009d11f">將檔案複製到 Micro SD 卡</h2><div class="outline-text-2" id="text-org009d11f"><p>好了，我們已經完成了所有準備動作，是時候將檔案放到 Micro SD 卡並看看結果了，在本文中我們會將以下幾個檔案放到 <code>第一個分割區 (fat32)</code> 。</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo /tmp/sdc1 $ tree -L 1<span style="color: #ccaaff;">.</span>&#9500;&#9472;&#9472; BOOT.bin&#9500;&#9472;&#9472; devicetree.dtb&#9500;&#9472;&#9472; uImage&#9492;&#9472;&#9472; uramdisk.image.gz0 directories, 4 files</pre></div><p>也就是說我們的 SD 卡有的東西，要像 <a href="http://www.zynqbook.com/" target="_blank" rel="external">The Zynq Book</a> p.439 這張圖那樣</p><div class="figure"><p><img src="f2.png"></p></div></div></div><div id="outline-container-orgf4e4e2e" class="outline-2"><h2 id="orgf4e4e2e">測試開機與結果</h2><div class="outline-text-2" id="text-orgf4e4e2e"><p>是時候來測試結果了，要注意到你的 Zybo Board 的 <code>JP5</code> 要設定成下面這樣，這樣給電時，Zynq 才會讀取 SD 卡上面的 u-boot 並將位元流 (bitstream) 燒錄到 FPGA 中。</p><div class="figure"><p><img src="sdboot.png"></p></div><p>插入剛剛建立好的 SD 卡，並提供電源後，我們可以使用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等，啟動它並開啟 <code>/dev/ttyUSB1</code> 後，設定 baudrate 為 <code>115200</code> ，就可以看到開機到 rootfs 的狀態。</p><div class="figure"><p><img src="s1.png"></p></div></div></div><div id="outline-container-org0330386" class="outline-2"><h2 id="org0330386">取得程式碼</h2><div class="outline-text-2" id="text-org0330386"><p>本文的範例已經放置於 <a href="https://github.com/coldnew/zybo-examples" target="_blank" rel="external">GitHub</a> 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 <code>README.md</code> 檔案</p><div data-theme="default" data-height="" data-width="400" data-github="coldnew/zybo-examples" class="github-card"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script></div></div><div id="outline-container-org09decde" class="outline-2"><h2 id="org09decde">延伸閱讀</h2><div class="outline-text-2" id="text-org09decde"><p><code>[1]</code> <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_1/ug1165-zynq-embedded-design-tutorial.pdf" target="_blank" rel="external">Zynq-7000 All Programmable SoC: Embedded Design Tutorial - A Hands-On Guide to Effective Embedded System Design (UG1165)</a></p><p><code>[2]</code> <a href="http://www.dbrss.org/zybo/tutorial4.html" target="_blank" rel="external">ZYBO Zync-7000 Development Board Work - Booting Linux on the ZYBO</a></p><p><code>[3]</code> <a href="http://www.zynqbook.com/" target="_blank" rel="external">The Zynq Book</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/d9dfdd56/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: Zynq 與 LED 閃爍控制</title>
      <link>https://coldnew.github.io/dec85bd3/</link>
      <guid>https://coldnew.github.io/dec85bd3/</guid>
      <pubDate>Tue, 05 Jul 2016 15:41:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/zybo-board/pl_led/&quot;&gt;zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍&lt;/a&gt; 一文中我們說到了怎樣純粹使用 可程式邏輯 (Programmable Logic, PL) 去控制 Zybo board 上面的四個 LED 燈 (LD0 ~ LD3)，接下來就讓我們透過 Zynq 上的 ARM 處理器來作到同樣的一件事情吧。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在 <a href="http://coldnew.github.io/zybo-board/pl_led/">zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍</a> 一文中我們說到了怎樣純粹使用 可程式邏輯 (Programmable Logic, PL) 去控制 Zybo board 上面的四個 LED 燈 (LD0 ~ LD3)，接下來就讓我們透過 Zynq 上的 ARM 處理器來作到同樣的一件事情吧。</p><a id="more"></a><p>本文主要參考自 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Digilentinc</a> 的 <a href="https://reference.digilentinc.com/zybo/gsg" target="_blank" rel="external">Getting Start Guide</a> 並加入我自己試玩的一些心得。</p><div id="outline-container-org208a6a2" class="outline-2"><h2 id="org208a6a2">開發目標</h2><div class="outline-text-2" id="text-org208a6a2"><p>我們要透過 Zynq 上的 ARM 處理器，也就是 處理系統 (Processing System, PS)去控制 LED，具體目標與電路資訊如下:</p><div class="figure"><p><img src="zybo_led.png"></p></div><p>根據 <a href="https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf" target="_blank" rel="external">ZYBO FPGA Board Reference Manual</a> 上面的資料，我們想要控制的這四個在板子上的 LED 都是位於可程式邏輯區(Programmable Logic, PL)可以碰觸到的地方，如果你想要透過 Zynq 去對這些 LED 進行控制，你就會需要透過  AXI GPIO 的幫助，就像這樣:</p><div class="figure"><p><img src="zynq_axi_gpio_led.png"></p></div></div></div><div id="outline-container-org1898507" class="outline-2"><h2 id="org1898507">認識 AXI 匯流排</h2><div class="outline-text-2" id="text-org1898507"><p>AXI 匯流排是作什麼用的？我們就從 Zynq 的架構來看 (參照 <a href="http://www.zynqbook.com/" target="_blank" rel="external">The Zynq Book</a> p.28)</p><div class="figure"><p><img src="zynq_hw_arch.png"></p></div><p>由上圖可以看到 AXI 匯流排橫跨了處理器系統 (Processing System, PS) 與可程式邏輯 (Programmable Logc, PL) 兩區，並連接到週邊。</p><p>實際上，AXI 協議為 ARM 的協議規範，來自於 AMBA 匯流排架構，若你對整個協議的內容有興趣，可以到 ARM 的 <a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.set.amba/index.html" target="_blank" rel="external">網站</a> 去下載規格書。</p></div></div><div id="outline-container-org580a212" class="outline-2"><h2 id="org580a212">建立我們的專案</h2><div class="outline-text-2" id="text-org580a212"><p>我們首先當然是建立我們的專案了，在進行這一步前，請先確定你有按照 <a href="https://coldnew.github.io/zybo-board/vivado_zybo_setting_file/">讓 Vivado 有 Zybo Board 的設定檔</a> 一文所說，將 Zybo board 的設計導入。</p><p>啟動了 Vivado 後，點選 <code>Create New Project</code> 。</p><div class="figure"><p><img src="create_prj0.png"></p></div><p>接下來指定好你的專案名稱與路徑</p><div class="figure"><p><img src="cprj1.png"></p></div><p>選擇 <code>RTL Project</code></p><div class="figure"><p><img src="new_prj.png"></p></div><p>在開發板選項中，選擇 <code>Zybo Board</code></p><div class="figure"><p><img src="new_prj2.png"></p></div><p>完成專案建立</p><div class="figure"><p><img src="cprj2.png"></p></div></div></div><div id="outline-container-org02197b7" class="outline-2"><h2 id="org02197b7">建立 Block Design</h2><div class="outline-text-2" id="text-org02197b7"><p>當我們的設計需要用到 Zynq 的處理器系統(Processing System, PS)時候，就需要透過 Block Design 來建立我們的電路設計，首先點選 <code>IP Integrator -&gt; Create Block Design</code> 。</p><div class="figure"><p><img src="cb1.png"></p></div><p>接著點選 <code>OK</code> 建立我們的 block design</p><div class="figure"><p><img src="cb2.png"></p></div><p>點選 <code>Add IP</code> 按鈕去增加我們需要的 IP 核</p><div class="figure"><p><img src="cb3.png"></p></div><p>我們首先尋找 <code>Zynq</code> 並將 <code>ZYNQ7 Processing System</code> 加入到我們的 Block Design，並點選 <code>Run Block Automation</code> 對 Zynq 處理器進行一些設定</p><div class="figure"><p><img src="cb4.png"></p></div><p>進入到 <code>Run Block Automation</code> 的設定頁面後，確認 <code>processing_system7_0</code> 有被勾選到，並且 <code>Cross Trigger In</code> 以及 <code>Cross Trigger Out</code> 都是 <code>Disable</code> 的狀態，點選 Ok 結束設定。</p><div class="figure"><p><img src="cb5.png"></p></div><p>上面的設定好了後，就會看到 ZYNQ7 Processing System 的 DDR 以及 FIXED_IO 都有接線出來</p><div class="figure"><p><img src="cb6.png"></p></div><p>點選 <code>Add IP</code> 按鈕去增加我們需要的 IP 核，這次我們要增加 <code>AXI_GPIO</code> ，用來對可程式邏輯(Programmable Logic, PL)區域的 LED 進行控制，完成後點選上方的 <code>Run Connection Automation</code> 按鈕</p><div class="figure"><p><img src="cb7.png"></p></div><p>在 <code>Run Conenction Automation</code> 視窗內，我們選擇 <code>Custom</code> (其實也可以在這邊直接選擇 <code>leds 4bits</code>)</p><div class="figure"><p><img src="cb8-1.png"></p></div><p>接下來勾選 <code>S_AXI</code> ，並點選 Ok 進行確認。</p><div class="figure"><p><img src="cb8.png"></p></div><p>好了後會像這樣，我們接下來對 <code>axi_gpio_0</code> 這個區塊點兩下，進行手動設定</p><div class="figure"><p><img src="cb9.png"></p></div><p>在 <code>IP Configuration</code> 頁面，設定 GPIO 為輸出腳，並設寬度為 <code>4</code> ，這邊我將輸出預設值設定為 0xF, 也就是預設這四個 LED 用的輸出腳都是 High 的電壓。完成後點選 OK, 結束 AXI_GPIO 的設定。</p><div class="figure"><p><img src="cb10.png"></p></div><p>接下來點選 <code>Validate Design</code> 按鈕，我們要確認我們的 Block Design 沒問題才能夠繼續往下走。</p><div class="figure"><p><img src="cb11.png"></p></div><p>正常來講不會有啥問題才對，我們結束 Block Design 的工作</p><div class="figure"><p><img src="cb12.png"></p></div></div></div><div id="outline-container-orgb43ffdd" class="outline-2"><h2 id="orgb43ffdd">加入 Constraints</h2><div class="outline-text-2" id="text-orgb43ffdd"><p>在 <a href="http://coldnew.github.io/zybo-board/pl_led/">zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍</a> 一文有提到如何取得 Constraints 檔案，不過為了讓這篇文章完整，我們再講一次。</p><p>我們先連結到 <a href="https://reference.digilentinc.com/zybo:zybo" target="_blank" rel="external">Zybo Resource Center</a> 去下載 <code>Master XDC</code> 檔案。</p><div class="figure"><p><img src="dl_constraints.png"></p></div><p>你也可以直接透過 wget 命令下載並解壓出 <code>ZYBO_Master.xdc</code> 這個檔案，它就是本節要加入的 Constraints 檔</p><pre class="example">coldnew@gentoo /tmp $ wget https://reference.digilentinc.com/_media/zybo/zybo_master_xdc.zipcoldnew@gentoo /tmp $ unzip zybo_master_xdc.zipArchive:  zybo_master_xdc.zip  inflating: ZYBO_Master.xdc</pre><p>接下來一樣選擇 <code>Project Manager -&gt; Add sources</code> 來增加檔案</p><div class="figure"><p><img src="as1.png"></p></div><p>這次我們要增加的是 Constraints 檔，因此選擇 <code>Add or create constraints</code></p><div class="figure"><p><img src="add_constraints1.png"></p></div><p>透過 <code>Add Files</code> 添加剛剛下載的 ZYBO_Master.xdc 檔案</p><div class="figure"><p><img src="add_constraints2.png"></p></div></div><div id="outline-container-orga166f76" class="outline-3"><h3 id="orga166f76">ZYBO_Master.xdc</h3><div class="outline-text-3" id="text-orga166f76"><p>在 ZYBO_Master.xdc 裡面，預設所有對應接腳都是被註解掉的，這邊我們反註解我們需要的 led 接腳，要記得一下這邊的 I/O 名稱，我們等等要和產生出來的 HDL Wrapper 進行對應的工作。</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">LEDs</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_L23P_T3_35</span>set_property PACKAGE_PIN M14 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>0<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>0<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_L23N_T3_35</span>set_property PACKAGE_PIN M15 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>1<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>1<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_0_35</span>set_property PACKAGE_PIN G14 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>2<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>2<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_L3N_T0_DQS_AD1N_35</span>set_property PACKAGE_PIN D18 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>3<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>3<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span></pre></div><p>這樣我們就可以準備將 Block Design 和硬體接腳對應在一起了。</p></div></div></div><div id="outline-container-org74df5ae" class="outline-2"><h2 id="org74df5ae">產生 HDL Wrapper</h2><div class="outline-text-2" id="text-org74df5ae"><p>接下來我們要透過 Block Design 產生我們的 HDL wrapper，對你的 Block Design 檔案點選右鍵，選擇 <code>Create HDL Wrapper</code> 。它會根據你專案設定的語言 (VHDL 或是 Verilog) 來產生相對的 HDL 程式碼。</p><div class="figure"><p><img src="w1.png"></p></div><p>產生出來的東西我們可能需要改些東西，為了避免麻煩這邊我選第一個選項。</p><div class="figure"><p><img src="w2.png"></p></div><p>好了後，假設你的 Block Design 檔案叫做 design_1.bd，那就會產生 design_1_wrapper.v 或是 design_1_wrapper.vhdl 這樣的檔案</p><div class="figure"><p><img src="w3.png"></p></div><p>我們接著要修改這個 HDL Wrapper，這是為什麼呢? 回去看一下前面做好的 Block Design 以及 Constraints 的資訊，我們可以看到 Block Design 設定好的 AXI_GPIO 其輸出腳叫做 <code>gpio_rtl</code> ，而在 Constraints 中，我們目標的 LED 輸出腳名稱是 <code>led</code> ，因此我們要調整一下這個 HDL Wrapper 讓 <code>gpio_rtl</code> 和 <code>led</code> 可以對應在一起。</p><div class="figure"><p><img src="w4.png"></p></div><p>由於在本範例中，design_1_wrapper.v 也就是 toplevel 的模組，因此在這邊將對外的 <code>gpio_rtl_tri_o</code> 接腳改為 <code>led</code> 讓它接出即可。</p><div class="org-src-container"><pre class="src src-diff"><span style="color: #dddddd;">diff --git a/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v b/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v</span><span style="color: #dddddd;">index 7b1b0bd..c57caa0 100644</span><span style="color: #aaaaaa; background-color: #202020;">--- </span><span style="color: #aaaaaa; background-color: #202020;">a/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v</span><span style="color: #aaaaaa; background-color: #202020;">+++ </span><span style="color: #aaaaaa; background-color: #202020;">b/led_flash_zynq.srcs/sources_1/imports/hdl/design_1_wrapper.v</span><span style="color: #aaaaaa; background-color: #202020;">@@ -31,7 +31,7 @@</span><span style="color: #aaaaaa; background-color: #202020;"> module design_1_wrapper</span><span style="color: #dddddd;">     FIXED_IO_ps_clk,</span><span style="color: #dddddd;">     FIXED_IO_ps_porb,</span><span style="color: #dddddd;">     FIXED_IO_ps_srstb,</span><span style="color: #ff3333; font-weight: bold;">-</span><span style="color: #ff3333; font-weight: bold;">    gpio_rtl_tri_o);</span><span style="color: #aaffaa; font-weight: bold;">+</span><span style="color: #aaffaa; font-weight: bold;">    led);</span><span style="color: #dddddd;">   inout [14:0]DDR_addr;</span><span style="color: #dddddd;">   inout [2:0]DDR_ba;</span><span style="color: #dddddd;">   inout DDR_cas_n;</span><span style="color: #aaaaaa; background-color: #202020;">@@ -53,7 +53,7 @@</span><span style="color: #aaaaaa; background-color: #202020;"> module design_1_wrapper</span><span style="color: #dddddd;">   inout FIXED_IO_ps_clk;</span><span style="color: #dddddd;">   inout FIXED_IO_ps_porb;</span><span style="color: #dddddd;">   inout FIXED_IO_ps_srstb;</span><span style="color: #ff3333; font-weight: bold;">-</span><span style="color: #ff3333; font-weight: bold;">  output [3:0]gpio_rtl_tri_o;</span><span style="color: #aaffaa; font-weight: bold;">+</span><span style="color: #aaffaa; font-weight: bold;">  output [3:0]led;</span><span style="color: #dddddd;">   wire [14:0]DDR_addr;</span><span style="color: #dddddd;">   wire [2:0]DDR_ba;</span><span style="color: #aaaaaa; background-color: #202020;">@@ -76,7 +76,7 @@</span><span style="color: #aaaaaa; background-color: #202020;"> module design_1_wrapper</span><span style="color: #dddddd;">   wire FIXED_IO_ps_clk;</span><span style="color: #dddddd;">   wire FIXED_IO_ps_porb;</span><span style="color: #dddddd;">   wire FIXED_IO_ps_srstb;</span><span style="color: #ff3333; font-weight: bold;">-</span><span style="color: #ff3333; font-weight: bold;">  wire [3:0]gpio_rtl_tri_o;</span><span style="color: #aaffaa; font-weight: bold;">+</span><span style="color: #aaffaa; font-weight: bold;">  wire [3:0]led;</span><span style="color: #dddddd;">   design_1 design_1_i</span><span style="color: #dddddd;">        (.DDR_addr(DDR_addr),</span><span style="color: #aaaaaa; background-color: #202020;">@@ -100,5 +100,5 @@</span><span style="color: #aaaaaa; background-color: #202020;"> module design_1_wrapper</span><span style="color: #dddddd;">         .FIXED_IO_ps_clk(FIXED_IO_ps_clk),</span><span style="color: #dddddd;">         .FIXED_IO_ps_porb(FIXED_IO_ps_porb),</span><span style="color: #dddddd;">         .FIXED_IO_ps_srstb(FIXED_IO_ps_srstb),</span><span style="color: #ff3333; font-weight: bold;">-</span><span style="color: #ff3333; font-weight: bold;">        .gpio_rtl_tri_o(gpio_rtl_tri_o));</span><span style="color: #aaffaa; font-weight: bold;">+</span><span style="color: #aaffaa; font-weight: bold;">        .gpio_rtl_tri_o(led));</span><span style="color: #dddddd;"> endmodule</span></pre></div><p>改好後，點選上方的 <code>Run Implementation</code> 來確認我們這樣的修改是否能編譯/驗證成功。</p><div class="figure"><p><img src="w5.png"></p></div></div></div><div id="outline-container-orgbcb0d93" class="outline-2"><h2 id="orgbcb0d93">產生位元流 (bitstream)</h2><div class="outline-text-2" id="text-orgbcb0d93"><p>前面的處理都好了後，接下來點選 <code>Program and Debug -&gt; Generate Bitstream</code> 去讓 Vivado 將這個專案產生出位元流 (bitstream)，ZYNQ 會根據 bitstream 的資訊對 FPGA 進行設定。</p><div class="figure"><p><img src="w6.png"></p></div><p>當 bitstream 產生完成後，由於我們這次的實作，是要透過寫 C 語言程式來控制 Zynq 進行 LED 的亮暗，因此要先將剛剛產生的硬體資訊輸出給 Xilinx SDK 去。</p><p>點選 <code>File -&gt; Export -&gt; Export Hardware</code></p><div class="figure"><p><img src="w7.png"></p></div><p>確定你有勾選 <code>Include bitstream</code> ，點選 Ok</p><div class="figure"><p><img src="w8.png"></p></div><p>完成後，啟動 Xilinx SDK</p><div class="figure"><p><img src="w9.png"></p></div></div></div><div id="outline-container-orgde6a75a" class="outline-2"><h2 id="orgde6a75a">Xilinx SDK</h2><div class="outline-text-2" id="text-orgde6a75a"><p>我們啟動 Xilinx SDK 後，可以先看到一些像是位址映射 (Address Map) 的資訊</p><div class="figure"><p><img src="x1.png"></p></div><p>選擇 <code>File -&gt; New -&gt; Application Project</code> 去建立新的專案</p><div class="figure"><p><img src="x2.png"></p></div><p>這邊我命名這個專案叫做 LED，並且為獨立的程式</p><div class="figure"><p><img src="x3.png"></p></div><p>選擇 <code>Empty Application</code> ，我們要自己來寫我們的程式。</p><div class="figure"><p><img src="x4.png"></p></div><p>當專案建立完成後，會自動打開 <code>LED_bsp</code> 裡面的 <code>system.mss</code> ，裡面會顯示我們所用的週邊範例程式碼以及使用手冊的連結，我們可以點選這些連結來了解這些週邊要怎樣使用。</p><div class="figure"><p><img src="doc.png"></p></div><p>如果你連結點選不開的話，可以到你安裝 SDK 的路徑下去尋找，比如說我裝的是 Vivado 2016.2，則手冊的路徑在</p><pre class="example">/opt/Xilinx/SDK/2016.2/data/embeddedsw/XilinxProcessorIPLib/drivers</pre><p>這裡給個結果的範例，比如我想要查詢 xgpio 的資料，則可以看到如下的 HTML 檔案</p><div class="figure"><p><img src="doc2.png"></p></div></div><div id="outline-container-orgd84a7f3" class="outline-3"><h3 id="orgd84a7f3">建立 main.c</h3><div class="outline-text-3" id="text-orgd84a7f3"><p>由於我們建立的是空白專案，必須自己添加自己的主程式，因此我們對 LED 專案的 src 按下右鍵，選擇建立新的檔案</p><div class="figure"><p><img src="x5.png"></p></div><p>這邊將它命名為 <code>main.c</code> ，也就是我們唯一的主程式，點選 <code>Finish</code> 完成檔案建立。</p><div class="figure"><p><img src="x6.png"></p></div><p>在 main.c 加入以下程式碼，具體功能待會在說明。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">"xparameters.h"</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">"xgpio.h"</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">stdio.h</span><span style="color: #aadddd;">&gt;</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">stdlib.h</span><span style="color: #aadddd;">&gt;</span><span style="color: #fff59d;">void</span> <span style="color: #aaccff;">simple_delay</span> <span style="color: #aadddd;">(</span><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">simple_delay</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>        <span style="color: #aaffaa;">volatile</span> <span style="color: #fff59d;">int</span> <span style="color: #aaccff;">i</span> = 0;        <span style="color: #aaffaa;">for</span> <span style="color: #81d4fa;">(</span>i = 0; i &lt; simple_delay; i++<span style="color: #81d4fa;">)</span>;<span style="color: #aadddd;">}</span><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">main</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">argc</span>, <span style="color: #fff59d;">char</span> *<span style="color: #aaccff;">argv</span><span style="color: #81d4fa;">[]</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>        <span style="color: #fff59d;">XGpio</span> <span style="color: #aaccff;">led_gpio</span>;              <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">LED Instance </span><span style="color: #5f5f5f; font-style: italic;">*/</span>        <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">Initialize LED GPIO settings </span><span style="color: #5f5f5f; font-style: italic;">*/</span>        XGpio_Initialize<span style="color: #81d4fa;">(</span>&amp;led_gpio, XPAR_AXI_GPIO_0_DEVICE_ID<span style="color: #81d4fa;">)</span>;        XGpio_SetDataDirection<span style="color: #81d4fa;">(</span>&amp;led_gpio, 1, 0<span style="color: #81d4fa;">)</span>;        <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">Output something via UART1, 115200 baudrate </span><span style="color: #5f5f5f; font-style: italic;">*/</span>        printf<span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"Start to blink led_gpio !!!\n\r"</span><span style="color: #81d4fa;">)</span>;        <span style="color: #fff59d;">int</span> <span style="color: #aaccff;">led_value</span> = 0x03;   <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">default led_gpio value </span><span style="color: #5f5f5f; font-style: italic;">*/</span>        <span style="color: #aaffaa;">while</span><span style="color: #81d4fa;">(</span>1<span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">{</span>                printf<span style="color: #aaccff;">(</span><span style="color: #aadddd;">"led_gpio value set to 0x%X\n\r"</span>, led_value<span style="color: #aaccff;">)</span>;                <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">Set GPIO Channel 1 value. </span><span style="color: #5f5f5f; font-style: italic;">*/</span>                XGpio_DiscreteWrite<span style="color: #aaccff;">(</span>&amp;led_gpio, 1 , led_value<span style="color: #aaccff;">)</span>;                <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">sleep and change led_gpio value </span><span style="color: #5f5f5f; font-style: italic;">*/</span>                simple_delay<span style="color: #aaccff;">(</span>10000000<span style="color: #aaccff;">)</span>;                led_value = ~led_value;        <span style="color: #81d4fa;">}</span>        <span style="color: #aaffaa;">return</span> 0;<span style="color: #aadddd;">}</span></pre></div></div></div><div id="outline-container-orgf89434e" class="outline-3"><h3 id="orgf89434e">main.c</h3><div class="outline-text-3" id="text-orgf89434e"><p>在 main.c 的開頭，我們載入了需要使用的幾個標頭檔，在 Xilinx SDK 中，已經包含了一些預設好的函式庫等功能，具體資訊請查閱 <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_3/oslib_rm.pdf" target="_blank" rel="external">Xilinx OS and Libraries Document Collection</a> (UG643) 手冊。</p><p><code>xparameters.h</code> 這個標頭檔則是 Xilinx SDK 自己產生的，裡面會包含一些關於你使用的 IP Core 的資訊，比如標準輸出的基底位址 (base address) 或是其他和你這份硬體相關的設定。而 <code>xgpio.h</code> 則提供了一些高階的抽象函式，讓你開發 GPIO 相關的功能可以更加輕鬆。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">"xparameters.h"</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">"xgpio.h"</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">stdio.h</span><span style="color: #aadddd;">&gt;</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">stdlib.h</span><span style="color: #aadddd;">&gt;</span></pre></div><p>我們用一個非常簡單的延遲 (delay) 函式讓 CPU 很忙碌的計算，來達到延遲程式的效果。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #fff59d;">void</span> <span style="color: #aaccff;">simple_delay</span> <span style="color: #aadddd;">(</span><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">simple_delay</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>        <span style="color: #aaffaa;">volatile</span> <span style="color: #fff59d;">int</span> <span style="color: #aaccff;">i</span> = 0;        <span style="color: #aaffaa;">for</span> <span style="color: #81d4fa;">(</span>i = 0; i &lt; simple_delay; i++<span style="color: #81d4fa;">)</span>;<span style="color: #aadddd;">}</span></pre></div><p>接下來是我們的主程式，我們將它拆開來看，後面見到的程式碼都會塞到主程式中。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">main</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">argc</span>, <span style="color: #fff59d;">char</span> *<span style="color: #aaccff;">argv</span><span style="color: #81d4fa;">[]</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>        <span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">code</span>        <span style="color: #aaffaa;">return</span> 0;<span style="color: #aadddd;">}</span></pre></div><p>是時候進入到 GPIO 的功能設定，注意到 <code>XPAR_AXI_GPIO_0_DEVICE_ID</code> 這個，你可以把它對應回我們的 Block Design 的 <code>axi_gpio_0</code> ，這個巨集(Macro)即是 Xilinx SDK 產生，定義在 <code>xparameter.h</code> 裡面。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #fff59d;">XGpio</span> <span style="color: #aaccff;">led_gpio</span>;              <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">LED Instance </span><span style="color: #5f5f5f; font-style: italic;">*/</span><span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">Initialize LED GPIO settings </span><span style="color: #5f5f5f; font-style: italic;">*/</span>XGpio_Initialize<span style="color: #aadddd;">(</span>&amp;led_gpio, XPAR_AXI_GPIO_0_DEVICE_ID<span style="color: #aadddd;">)</span>;XGpio_SetDataDirection<span style="color: #aadddd;">(</span>&amp;led_gpio, 1, 0<span style="color: #aadddd;">)</span>;</pre></div><p>我們透過 printf 去顯示一些簡單得除錯訊息，這邊的訊息會透過 UART 輸出，你可以透過電腦端的軟體來收到(ex: gtkterm、teraterm)，我自己是透過 emacs 的 <code>serial-term</code> 命令來收訊息，baud rate 則是設定為 <code>115200</code> 、連接目標則是 <code>/dev/ttyUSB1</code> 。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">Output something via UART1, 115200 baudrate </span><span style="color: #5f5f5f; font-style: italic;">*/</span>printf<span style="color: #aadddd;">(</span><span style="color: #aadddd;">"Start to blink led !!!\n\r"</span><span style="color: #aadddd;">)</span>;</pre></div><p>最後，使用一個無窮迴圈去控制 LED 數值的變化，並透過 <code>XGpio_DiscreteWrite</code> 去對 GPIO 的通道 1 (參考前面 Block Design) 進行資料寫入的工程，再調整下一次到迴圈時要的 LED 數值，一直重複這些動作。</p><p>就這樣，我們的程式完成了。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">led_value</span> = 0x03;   <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">default led value </span><span style="color: #5f5f5f; font-style: italic;">*/</span><span style="color: #aaffaa;">while</span><span style="color: #aadddd;">(</span>1<span style="color: #aadddd;">)</span> <span style="color: #aadddd;">{</span>        printf<span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"led value set to 0x%X\n\n"</span>, led_value<span style="color: #81d4fa;">)</span>;        <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">Set GPIO Channel 1 value. </span><span style="color: #5f5f5f; font-style: italic;">*/</span>        XGpio_DiscreteWrite<span style="color: #81d4fa;">(</span>&amp;led_gpio, 1, led_value<span style="color: #81d4fa;">)</span>;        <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">sleep and change led value </span><span style="color: #5f5f5f; font-style: italic;">*/</span>        simple_delay<span style="color: #81d4fa;">(</span>10000000<span style="color: #81d4fa;">)</span>;        led_value = ~led_value;<span style="color: #aadddd;">}</span></pre></div></div></div></div><div id="outline-container-org81136b8" class="outline-2"><h2 id="org81136b8">下載到 Zybo board</h2><div class="outline-text-2" id="text-org81136b8"><p>確定此時你有將 Zybo board 接到電腦，並且你 <code>JP5</code> 設定在 <code>QSPI</code> 模式下，就像這樣</p><div class="figure"><p><img src="qspi.png"></p></div><p>選擇 <code>Xilinx Tools -&gt; Program FPGA</code> 進行 FPGA 的燒錄。</p><div class="figure"><p><img src="d1.png"></p></div><p>確認要燒錄的資料無誤後，點選 <code>Program</code> 將位元流 (bitstream) 燒錄到 FPGA 去，燒完後你會發現 LD0 ~ LD3 都是亮燈的狀態，因為我們在 Block Design 預設 AXI_GPIO 輸出為 <code>0xF</code> 。</p><div class="figure"><p><img src="d2.png"></p></div><p>選擇 <code>Run -&gt; Run Configuration</code> 進行執行前的一些設定。</p><div class="figure"><p><img src="d3.png"></p></div><p>我們在 <code>Xilinx C/C++ Application(GDB)</code> 建立一個新的設定，由於我們已經燒錄好 FPGA 因此只需要重起處理器系統 (Processing System, PS)即可。</p><p>確認你有啟用 <code>ps7_init</code> 這些設定，ps7_init 定義了一些初始化的程式，我們之所以能夠使用 <code>printf</code> 將資訊透過 UART 輸出，也是透過 ps7_init 的協助，具體請參考 <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/ug1165-zynq-embedded-design-tutorial.pdf" target="_blank" rel="external">Zynq-7000 All Programmable SoC: Embedded Design Tutorial A Hands-On Guide to Effective Embedded System Design (UG1165)</a>, p.24 頁。</p><div class="figure"><p><img src="d4.png"></p></div><p>除了這邊設定外，別忘記指定要跑的專案，Xilinx SDK 是允許同份硬體設計檔跑很多種專案的，以本文範例而言，我們要跑得專案叫做 <code>LED</code> 。</p><div class="figure"><p><img src="d5.png"></p></div><p>都設定好後，點選 <code>Run</code> 然後祈禱一切正常!!</p></div></div><div id="outline-container-org57e917f" class="outline-2"><h2 id="org57e917f">結果</h2><div class="outline-text-2" id="text-org57e917f"><p>在你執行 <i>Program device</i> 以及 <i>Run</i> 後，Xilinx SDK 會將位元流(bitstream) 下載到我們的 Zybo Board，接著重設 CPU 後執行我們下載的程式，最後完成的成果如下</p><div class="figure"><p><img src="result.gif"></p></div><p>如果你有啟用可以接收 UART 相關的程式，如 gtkterm、teraterm、screen、emacs 等的話，啟動它並開啟 <code>/dev/ttyUSB1</code> 後，設定 baudrate 為 <code>115200</code> ，就會看到我們程式透過 <code>printf</code> 輸出的訊息</p><div class="figure"><p><img src="s.png"></p></div></div></div><div id="outline-container-orgea2cab4" class="outline-2"><h2 id="orgea2cab4">取得程式碼</h2><div class="outline-text-2" id="text-orgea2cab4"><p>本文的範例已經放置於 <a href="https://github.com/coldnew/zybo-examples" target="_blank" rel="external">GitHub</a> 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 <code>README.md</code> 檔案</p><div data-theme="default" data-height="" data-width="400" data-github="coldnew/zybo-examples" class="github-card"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script></div></div><div id="outline-container-org5a3a758" class="outline-2"><h2 id="org5a3a758">延伸閱讀</h2><div class="outline-text-2" id="text-org5a3a758"><p><code>[1]</code> <a href="http://www.zynqbook.com/" target="_blank" rel="external">The Zynq Book</a></p><p><code>[2]</code> <a href="http://sunsided.github.io/zybo-tutorial/" target="_blank" rel="external">ZYBO Quick-Start Tutorial</a></p><p><code>[3]</code> <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_1/ug1043-embedded-system-tools.pdf" target="_blank" rel="external">XILINX - Embedded System Tools Reference Manual</a></p><p><code>[4]</code> <a href="http://www.xilinx.com/support/documentation/ip_documentation/axi_gpio/v2_0/pg144-axi-gpio.pdf" target="_blank" rel="external">AXI GPIO v2.0 LogiCORE IP Product Guide</a></p><p><code>[5]</code> <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_3/oslib_rm.pdf" target="_blank" rel="external">Xilinx OS and Libraries Document Collection (UG643)</a></p><p><code>[6]</code> <a href="http://www.dbrss.org/zybo/tutorial1.html" target="_blank" rel="external">ZYBO Zync-7000 Development Board Work - Getting the LEDs to flash</a></p><p><code>[7]</code> <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2015_2/ug1165-zynq-embedded-design-tutorial.pdf" target="_blank" rel="external">Zynq-7000 All Programmable SoC: Embedded Design Tutorial A Hands-On Guide to Effective Embedded System Design (UG1165)</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/dec85bd3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 透過可程式邏輯控制 LED 閃爍</title>
      <link>https://coldnew.github.io/6c5717d7/</link>
      <guid>https://coldnew.github.io/6c5717d7/</guid>
      <pubDate>Sat, 02 Jul 2016 08:40:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在進入到這種混搭 ARM/FPGA 的開發板的世界之前，很多人都是從純粹的 FPGA 開發板玩起，因此也讓我們看看如何僅透過可程式邏輯(Programmable Logic, PL) 來對 Zybo board 上面的 LED 進行閃爍控制。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在進入到這種混搭 ARM/FPGA 的開發板的世界之前，很多人都是從純粹的 FPGA 開發板玩起，因此也讓我們看看如何僅透過可程式邏輯(Programmable Logic, PL) 來對 Zybo board 上面的 LED 進行閃爍控制。</p><a id="more"></a><p>本文將採用業界比較常用的 Verilog 進行示範。</p><div id="outline-container-org0c47947" class="outline-2"><h2 id="org0c47947">開發目標</h2><div class="outline-text-2" id="text-org0c47947"><p>我們要透過純粹的可程式邏輯(Programmable Logic, PL) 去控制 LED，也就是說，我們只寫硬體描述語言 Verilog 來控制 Zybo board 上面的 LED，讓他依照我們設定的頻率進行閃爍/亮滅。</p><div class="figure"><p><img src="zybo_led.png"></p></div><p>根據 <a href="https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf" target="_blank" rel="external">ZYBO FPGA Board Reference Manual</a> 上面的資訊，我們想要控制的這四個在板子上的 LED 都是位於可程式邏輯區(Programmable Logic, PL)可以碰觸到的地方，如果你想要透過 Zynq 去對這些 LED 進行控制，你就會需要透過  AXI GPIO 的幫助，就像這樣:</p><div class="figure"><p><img src="zynq_axi_gpio_led.png"></p></div><p>關於如何在 Zynq 下面控制這幾個 LED，這部份我們將下一篇文章再來提及。</p></div></div><div id="outline-container-orgc6bafbf" class="outline-2"><h2 id="orgc6bafbf">建立我們的專案</h2><div class="outline-text-2" id="text-orgc6bafbf"><p>我們首先當然是建立我們的專案了，在進行這一步前，請先確定你有按照 <a href="https://coldnew.github.io/zybo-board/vivado_zybo_setting_file/">讓 Vivado 有 Zybo Board 的設定檔</a> 一文所說，將 Zybo board 的設計導入。</p><p>啟動了 Vivado 後，點選 <code>Create Project</code> 。</p><div class="figure"><p><img src="create_prj0.png"></p></div><p>接下來指定好你的專案名稱與路徑</p><div class="figure"><p><img src="create_prj1.png"></p></div><p>選擇 <code>RTL Project</code></p><div class="figure"><p><img src="new_prj.png"></p></div><p>在開發板選項中，選擇 <code>Zybo Board</code></p><div class="figure"><p><img src="new_prj2.png"></p></div><p>完成專案建立</p><div class="figure"><p><img src="new_prj3.png"></p></div></div></div><div id="outline-container-org57f7aa3" class="outline-2"><h2 id="org57f7aa3">撰寫程式</h2><div class="outline-text-2" id="text-org57f7aa3"><p>在專案建立完後，接下來就是添加並撰寫我們的 Verilog 程式，點選 <code>Project Manager -&gt; Add sources</code> 來增加檔案</p><div class="figure"><p><img src="create_prj2.png"></p></div><p>由於我們要增加的是可程式邏輯的設計檔，因此選擇 <code>Add or create design sources</code></p><div class="figure"><p><img src="add_sources1.png"></p></div><p>選擇 <code>Create File</code> 去建立 <code>top.v</code> 這個檔案，這也同時是我們的主程式</p><div class="figure"><p><img src="add_sources2.png"></p></div><p>建立好 top.v 後，點選它來進行編輯</p><div class="figure"><p><img src="add_sources3.png"></p></div></div><div id="outline-container-orgc6a5ac6" class="outline-3"><h3 id="orgc6a5ac6">top.v</h3><div class="outline-text-3" id="text-orgc6a5ac6"><p>在我們的主程式 top.v 中，我們定義了一組暫存器用來存放當前計數的狀態，每計數 125 百萬次後，就讓 led 暫存器的數值增加，反之則是讓計數器的內容增加。</p><p>選擇計數 125 百萬次的原因，在於我們會把 <code>clk</code> 這個輸入，連結到 <code>125M Hz</code> 的時脈輸入，這個時脈是由 50M Hz 的石英振盪器經過 Ethernet PHY 後所產生的</p><div class="figure"><p><img src="clock_source.png"></p></div><p>也就是說，由於我們的時脈輸入將會設定為 125 MHz，因此讓計數器計數 125 百萬次後調整 LED 暫存器的資訊，相當於 <code>每 1 秒</code> 修改一次 LED 暫存器的內容</p><p>我們的 top.v 程式如下</p><div class="org-src-container"><pre class="src src-verilog"><span style="color: #ff8888;">`timescale</span> 1ns / 1ps<span style="color: #aaffaa;">module</span> <span style="color: #aaccff;">top</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">output</span> <span style="color: #81d4fa;">[</span>3:0<span style="color: #81d4fa;">]</span> led,           <span style="color: #fff59d;">input</span> clk<span style="color: #aadddd;">)</span>;   <span style="color: #fff59d;">reg</span> <span style="color: #aadddd;">[</span>3:0<span style="color: #aadddd;">]</span>     led;   <span style="color: #fff59d;">reg</span> <span style="color: #aadddd;">[</span>26:0<span style="color: #aadddd;">]</span>    counter;   <span style="color: #aaffaa;">always</span> <span style="color: #fff59d;">@</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">posedge</span> clk<span style="color: #aadddd;">)</span> <span style="color: #fff59d;">begin</span>      <span style="color: #aaffaa;">if</span> <span style="color: #aadddd;">(</span>counter == 27'd1250000000<span style="color: #aadddd;">)</span> <span style="color: #fff59d;">begin</span>         led &lt;= led + 1;         counter &lt;= 0;      <span style="color: #fff59d;">end</span>      <span style="color: #aaffaa;">else</span> <span style="color: #fff59d;">begin</span>         counter &lt;= counter +1;      <span style="color: #fff59d;">end</span>   <span style="color: #fff59d;">end</span><span style="color: #aaffaa;">endmodule</span></pre></div></div></div></div><div id="outline-container-org8d3b34a" class="outline-2"><h2 id="org8d3b34a">加入 Constraints</h2><div class="outline-text-2" id="text-org8d3b34a"><p>我們撰寫好了 Verilog 模組 top.v，接下來就是要讓這模組的 I/O 和 Zybo board 的腳位對應到，我們先連結到 <a href="https://reference.digilentinc.com/zybo:zybo" target="_blank" rel="external">Zybo Resource Center</a> 去下載 <code>Master XDC</code> 檔案。</p><div class="figure"><p><img src="dl_constraints.png"></p></div><p>你也可以直接透過 wget 命令下載並解壓出 <code>ZYBO_Master.xdc</code> 這個檔案，它就是本節要加入的 Constraints 檔</p><pre class="example">coldnew@gentoo /tmp $ wget https://reference.digilentinc.com/_media/zybo/zybo_master_xdc.zipcoldnew@gentoo /tmp $ unzip zybo_master_xdc.zipArchive:  zybo_master_xdc.zip  inflating: ZYBO_Master.xdc</pre><p>接下來一樣選擇 <code>Project Manager -&gt; Add sources</code> 來增加檔案</p><div class="figure"><p><img src="create_prj2.png"></p></div><p>這次我們要增加的是 Constraints 檔，因此選擇 <code>Add or create constraints</code></p><div class="figure"><p><img src="add_constraints1.png"></p></div><p>透過 <code>Add Files</code> 添加剛剛下載的 ZYBO_Master.xdc 檔案</p><div class="figure"><p><img src="add_constraints2.png"></p></div></div><div id="outline-container-orga3b2278" class="outline-3"><h3 id="orga3b2278">ZYBO_Master.xdc</h3><div class="outline-text-3" id="text-orga3b2278"><p>在 ZYBO_Master.xdc 裡面，預設所有對應接腳都是被註解掉的，這邊我們反註解我們需要的 clk 以及 led 接腳，要注意到這邊的 I/O 名稱要對應到前面所寫的 top.v 裡面的 I/O 名稱。</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">Clock signal</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_L11P_T1_SRCC_35</span>set_property PACKAGE_PIN L16 <span style="color: #aadddd;">[</span>get_ports clk<span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports clk<span style="color: #aadddd;">]</span><span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #9ac; font-style: italic;">create_clock -add -name sys_clk_pin -period 8.00 -waveform {0 4} [get_ports clk]</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">LEDs</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_L23P_T3_35</span>set_property PACKAGE_PIN M14 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>0<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>0<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_L23N_T3_35</span>set_property PACKAGE_PIN M15 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>1<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>1<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_0_35</span>set_property PACKAGE_PIN G14 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>2<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>2<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span><span style="color: #5f5f5f; font-style: italic;">##</span><span style="color: #9ac; font-style: italic;">IO_L3N_T0_DQS_AD1N_35</span>set_property PACKAGE_PIN D18 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>3<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span>set_property IOSTANDARD LVCMOS33 <span style="color: #aadddd;">[</span>get_ports <span style="color: #81d4fa;">{</span>led<span style="color: #aaccff;">[</span>3<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span></pre></div><p>這樣我們就把 Verilog 模組和實際硬體對應的部份解決了</p></div></div></div><div id="outline-container-orgf2103a0" class="outline-2"><h2 id="orgf2103a0">產生位元流 (bitstream)</h2><div class="outline-text-2" id="text-orgf2103a0"><p>前面的處理都好了後，接下來點選 <code>Program and Debug -&gt; Generate Bitstream</code> 去讓 Vivado 將這個專案產生出位元流 (bitstream)，ZYNQ 會根據 bitstream 的資訊對 FPGA 進行設定。</p><div class="figure"><p><img src="gen_bitstream.png"></p></div><p>當 bitstream 產生完成後，會彈出一個視窗，這邊我們選擇 <code>Open Harware Manager</code> 進入到下載程序</p><div class="figure"><p><img src="hwm1.png"></p></div></div></div><div id="outline-container-org3fc7e6f" class="outline-2"><h2 id="org3fc7e6f">下載到 Zybo board</h2><div class="outline-text-2" id="text-org3fc7e6f"><p>確定此時你有將 Zybo board 接到電腦，並且你 <code>JP5</code> 設定在 <code>QSPI</code> 模式下，就像這樣</p><div class="figure"><p><img src="qspi.png"></p></div><p>點選 <code>Open target</code> 選擇我們的目標開發板</p><div class="figure"><p><img src="hwm2.png"></p></div><p>選擇 Auto Connect 讓 Vivado 自行尋找下載目標</p><div class="figure"><p><img src="hwm3.png"></p></div><p>Vivado 告訴我們找到了一台使用 <code>xc7z010</code> IC 的板子，就是我們的 Zybo board，選擇這個進行燒錄</p><div class="figure"><p><img src="hwm4.png"></p></div><p>在下載前，Vivado 會在確認一次 bitstream 的位置，確認無誤後點選 <code>Program</code> 進行燒錄</p><div class="figure"><p><img src="hwm5.png"></p></div></div></div><div id="outline-container-orgf1d81ef" class="outline-2"><h2 id="orgf1d81ef">結果</h2><div class="outline-text-2" id="text-orgf1d81ef"><p>在你執行 <i>Program device</i> 後，Vivado 會將剛剛產生的 bitstream 下載到我們的 Zybo Board 並執行它，最後完成的成果如下</p><div class="figure"><p><img src="result.gif"></p></div></div></div><div id="outline-container-org9ac3806" class="outline-2"><h2 id="org9ac3806">取得程式碼</h2><div class="outline-text-2" id="text-org9ac3806"><p>本文的範例已經放置於 <a href="https://github.com/coldnew/zybo-examples" target="_blank" rel="external">GitHub</a> 上，你可以到以下的 repo 去尋找，具體專案對應的教學名稱，則請參考 <code>README.md</code> 檔案</p><div data-theme="default" data-height="" data-width="400" data-github="coldnew/zybo-examples" class="github-card"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script></div></div><div id="outline-container-org77670e5" class="outline-2"><h2 id="org77670e5">延伸閱讀</h2><div class="outline-text-2" id="text-org77670e5"><p><code>[1]</code> <a href="http://johanngoetz.blogspot.tw/2014/04/first-steps-with-zybo-development-board.html" target="_blank" rel="external">FPGA Programming: First Steps with the ZYBO Development Board</a></p><p><code>[2]</code> <a href="http://www.borisivanov.com/fpga/verilog_zybo1.pdf" target="_blank" rel="external">Simple Verilog example useing Vivado 2015 with zybo FPGA board v0.1</a></p><p><code>[3]</code> <a href="http://ece.gmu.edu/coursewebpages/ECE/ECE699_SW_HW/S15/viewgraphs/ECE699_lecture_3.pdf" target="_blank" rel="external">ECE 699: Lecture 3 General Purpose Input Output GPIO</a></p><p><code>[4]</code> <a href="http://www.beyond-circuits.com/wordpress/tutorial/tutorial1/" target="_blank" rel="external">Tutorial 1: The Simplest FPGA in the World | Beyond Circuits</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/6c5717d7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 讓 Vivado 有 Zybo Board 的設定檔</title>
      <link>https://coldnew.github.io/cd57308/</link>
      <guid>https://coldnew.github.io/cd57308/</guid>
      <pubDate>Mon, 27 Jun 2016 09:49:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在透過 &lt;a href=&quot;http://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado&lt;/a&gt; 去建立新的專案的時候，開發板沒有 Zybo Board 的選項可以選，我們就必須自己去設定關於 Zybo Board 的資訊。幸好， &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot;&gt;Digilentinc&lt;/a&gt; 針對這個問題有提供關於 Zybo Board 的設定檔，就讓我們來搞定他吧。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在透過 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 去建立新的專案的時候，開發板沒有 Zybo Board 的選項可以選，我們就必須自己去設定關於 Zybo Board 的資訊。幸好， <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Digilentinc</a> 針對這個問題有提供關於 Zybo Board 的設定檔，就讓我們來搞定他吧。</p><a id="more"></a><p>關於 Zybo Board 的設定檔可以在 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Digilentinc</a> 的 GitHub 上找到</p><div data-theme="default" data-height="150" data-width="400" data-github="Digilent/vivado-boards" class="github-card"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script><div id="outline-container-org2e635bf" class="outline-2"><h2 id="org2e635bf">下載設定檔</h2><div class="outline-text-2" id="text-org2e635bf"><p>我們可以透過 git 或是直接下載 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Digilentinc</a> 位於 GitHub 的 <a href="https://github.com/Digilent/vivado-boards/archive/master.zip" target="_blank" rel="external">設定檔</a> ，這邊採用 wget 進行下載。</p><pre class="example">coldnew@gentoo ~ $ wget https://github.com/Digilent/vivado-boards/archive/master.zip</pre><p>下載完成後，將其解壓</p><pre class="example">coldnew@gentoo ~ $ unzip master.zip</pre><p>你會看到裡面有以下內容，實際上這份壓縮包包含了所有 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Digilentinc</a> 設計的 Xilinx 相關的開發板的設定資訊。</p><pre class="example">coldnew@gentoo ~/vivado-boards-master $ tree -L 3 .. &lt;b&gt;├── new &lt;b&gt;│   └── board_files &lt;b&gt;│       ├── arty &lt;b&gt;│       ├── arty-z20  &lt;b&gt;│       ├── basys3  &lt;b&gt;│       ├── cmod_a7-15t  &lt;b&gt;│       ├── cmod_a7-35t  &lt;b&gt;│       ├── genesys2  &lt;b&gt;│       ├── nexys4  &lt;b&gt;│       ├── nexys4_ddr  &lt;b&gt;│       ├── nexys_video  &lt;b&gt;│       └── zybo  &lt;b&gt;├── old  &lt;b&gt;│   └── board_parts  &lt;b&gt;│       ├── artix7  &lt;b&gt;│       ├── kintex7  &lt;b&gt;│       └── zynq  &lt;b&gt;└── README.md17 directories, 1 file</pre></div></div><div id="outline-container-orgb003e0b" class="outline-2"><h2 id="orgb003e0b">安裝設定檔</h2><div class="outline-text-2" id="text-orgb003e0b"><p>接下來就是進行安裝了，假設你的 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 安裝到 <code>/opt/Xilinx/Vivado/2016.1/</code> 的話，我們要把 <code>vivado-boards-master/new/board_files</code> 複製過去</p><pre class="example">coldnew@gentoo ~/vivado-boards-master $ cp -rf new/board_files /opt/Xilinx/Vivado/2016.1/data/boards/</pre><p>完成後，你在 <code>/opt/Xilinx/Vivado/2016.1/data/boards/</code> 的資料應該會像這樣</p><pre class="example">coldnew@gentoo /opt/Xilinx/Vivado/2016.1/data/boards/board_files $ tree -L 1 .. &lt;b&gt;├── ac701 &lt;b&gt;├── arty &lt;b&gt;├── basys3 &lt;b&gt;├── cmod_a7-15t &lt;b&gt;├── cmod_a7-35t &lt;b&gt;├── genesys2 &lt;b&gt;├── nexys4 &lt;b&gt;├── nexys4_ddr &lt;b&gt;├── nexys_video &lt;b&gt;├── README.md├── zc702 &lt;b&gt;├── zed &lt;b&gt;└── zybo &lt;b&gt;12 directories, 1 file</pre></div></div><div id="outline-container-orge9fb992" class="outline-2"><h2 id="orge9fb992">建立專案</h2><div class="outline-text-2" id="text-orge9fb992"><p>如果你安裝過程都沒遇到問題，重新啟動 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 建立新的專案，就可以看到 Zybo Board 的開發板設定囉~</p><div class="figure"><p><img src="zybo_create_prj.png"></p></div></div></div><div id="outline-container-org02bfdcf" class="outline-2"><h2 id="org02bfdcf">延伸閱讀</h2><div class="outline-text-2" id="text-org02bfdcf"><p><code>[1]</code> <a href="https://reference.digilentinc.com/vivado/boardfiles2015" target="_blank" rel="external">https://reference.digilentinc.com/vivado/boardfiles2015</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/cd57308/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: Xilinx SDK 在 Linux 的一些注意事項</title>
      <link>https://coldnew.github.io/8d3a2531/</link>
      <guid>https://coldnew.github.io/8d3a2531/</guid>
      <pubDate>Mon, 27 Jun 2016 07:38:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在使用 Xilinx 的開發環境 &lt;a href=&quot;http://www.xilinx.com/products/design-tools/vivado.html&quot;&gt;Vivado 2016.1&lt;/a&gt; 有遇到一些問題，特別紀錄之。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在使用 Xilinx 的開發環境 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado 2016.1</a> 有遇到一些問題，特別紀錄之。</p><a id="more"></a><p>(Xilinx 的開發環境 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 使用 Java 開發，而 Altera 的 <a href="http://dl.altera.com/?edition=lite" target="_blank" rel="external">Quartus</a> 使用 Qt 開發，以我遇到的狀況來說，後者在 Linux 上的體驗好多了。)</p><div id="outline-container-orgf96db8c" class="outline-2"><h2 id="orgf96db8c">安裝 Vivado 在其他的 Linux 平台</h2><div class="outline-text-2" id="text-orgf96db8c"><p><a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 安裝程式在非官方支援的 Linux 平台上可能會導致安裝出問題，以我的 Gentoo Linux 為例，我必須把解壓出的 <code>xsetup</code> 安裝腳本裡面的這部分修改掉，不然會在 64bit 並具有 32bit 函式庫的 Gentoo Linux 下安裝失敗。</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">ERROR out if this installation is running on 32 bit OS</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">and does not support 32 bit installation</span><span style="color: #aaffaa;">if</span> <span style="color: #aadddd;">[</span> <span style="color: #aadddd;">"$(</span><span style="color: #fa8072;">uname</span><span style="color: #aadddd;"> -i)"</span> != <span style="color: #aadddd;">"x86_64"</span> <span style="color: #aadddd;">]</span>; <span style="color: #aaffaa;">then</span>    <span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">check that the 32 bit library directory exist or not</span>    <span style="color: #aaccff;">lnx32LibDir</span>=<span style="color: #aadddd;">"${workingDir}/lib/lnx32.o"</span>    <span style="color: #aaffaa;">if</span> <span style="color: #aadddd;">[</span> <span style="color: #ff3333;">!</span> -d $<span style="color: #aaccff;">lnx32LibDir</span> <span style="color: #aadddd;">]</span>; <span style="color: #aaffaa;">then</span>        <span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">terminate with an ERROR</span>        <span style="color: #ccaaff;">echo</span> <span style="color: #aadddd;">"ERROR: This installation is not supported on 32 bit platforms."</span>        <span style="color: #aaffaa;">exit</span> 1  <span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">&lt;----- NOTE: Just remove this line if your linux is 64-bit system</span>    <span style="color: #aaffaa;">fi</span><span style="color: #aaffaa;">fi</span></pre></div></div></div><div id="outline-container-org8a12bd1" class="outline-2"><h2 id="org8a12bd1">讓 Linux 辨識 USB UART</h2><div class="outline-text-2" id="text-org8a12bd1"><p>如果你接上 USB 到 Zybo Board 的 USB UART 接腳，卻沒在你的 Linux 上面看到任何 <code>/dev/ttyUSB*</code> 被建立的話，那就是你少裝了一些 UDEV rule，這邊的說明可以在  <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_2/ug973-vivado-release-notes-install-license.pdf" target="_blank" rel="external">Vivado Design Suite User Guide</a> 找到，簡單的說&#x2026;.</p><p>假設你的 vivado 安裝在 <code>/opt/Xilinx/Vivado/2016.1</code> 的話，我們可以透過以下程式來安裝 udev 設定。</p><pre class="example">/opt/Xilinx/Vivado/2016.1/data/xicom/cable_drivers/lin64/install_script/install_drivers/install_digilent.sh</pre></div></div><div id="outline-container-org4a257d9" class="outline-2"><h2 id="org4a257d9">HiDPI 環境下的 Vivado 問題</h2><div class="outline-text-2" id="text-org4a257d9"><p>我是在 Macbook Pro 2015 上直接安裝 Gentoo Linux 來執行 Vivado, 因此會遇到顯示出來的 Vivado 程式因為 DPI 設定的問題，導致畫面太小，像這樣</p><div class="figure"><p><img src="vivado_hidpi_issue.png"></p></div><p>這問題的元兇是 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">Oracle JDK</a> 使用 <a href="https://zh.wikipedia.org/zh-tw/Swing_%28Java%29" target="_blank" rel="external">Java Swing</a> 時，在 Linux 上並未支援 HiDPI 解析度，導致出現的畫面太小，這 <a href="http://openjdk.java.net/jeps/263" target="_blank" rel="external">問題</a> 據說會修正在 JDK 9 上，目前我們只能用一些臨時解 (workround)來處理這狀況，或是將 Vivado 視窗移動到解析度沒那樣好的外接螢幕上也可以。</p><p>針對 HiDPI 下，我採用的另外一種解決方案是使用 <a href="https://github.com/feklee/vncdesk" target="_blank" rel="external">vncdesk</a> 來協助我們透過 VNC 協定對特定的程式進行視窗的縮放功能，該程式會在背景啟動一個 VNC 伺服器，然後在根據我們的設定啟動我們需要的程式，接著呼叫 VNC Client 並進行畫面縮放來達到我們的要求。</p><p>在 Gentoo Linux 上，你可以透過我寫好的 <a href="https://github.com/coldnew/coldnew-overlay/blob/master/app-misc/vncdesk/vncdesk-1.4.0.ebuild" target="_blank" rel="external">ebuild</a> 來安裝 vncdesk</p><pre class="example">coldnew@gentoo ~ $ sudo emerge app-misc/vncdesk</pre><p>另外要注意到的是，vncdesk 只支援 Python 3.x，因此你也需要將系統的 python 版本切換到 3.x 系列，這邊我將它切換到 Python 3.4 去。</p><pre class="example">coldnew@gentoo ~ $ sudo eselect python listAvailable Python interpreters, in order of preference:  [1]   python2.7  [2]   python3.4  [3]   python3.5 (fallback)coldnew@gentoo ~ $ sudo eselect python set 2</pre><p>完成後，接下來我們要建立一些設定檔案，我們首先先建立 <code>~/.vncdesk</code> 資料夾</p><pre class="example">coldnew@gentoo ~ $ mkdir -p ~/.vncdesk</pre><p>假設我們要使用 <code>DISPLAY=:21</code> 來作為 Vivado 顯示用的位置的話，我們要建立 <code>~/.vncdesk/21</code> 這樣的資料夾</p><pre class="example">coldnew@gentoo ~ $ mkdir -p ~/.vncdesk/21</pre><p>而在 <code>~/.vncdesk/21</code> 則要再建立以下兩個檔案</p><pre class="example">coldnew@gentoo ~/vncdesk/21 $ tree .. &lt;b&gt;├── settings.ini└── startup &lt;g&gt;0 directories, 2 files</pre><p>我們先來看 <code>settings.ini</code> 這個檔案，這是 vncdesk 最主要的設定，裡面包含了你要建立的視窗名稱、大小以及縮放度</p><div class="org-src-container"><pre class="src src-conf">[<span style="color: #fff59d;">desktop</span>]<span style="color: #aaccff;">width</span> = 1280<span style="color: #aaccff;">height</span> = 800[<span style="color: #fff59d;">window</span>]<span style="color: #aaccff;">title</span> = Xilinx Vivado<span style="color: #aaccff;">name</span> = vivado in vncdesk<span style="color: #aaccff;">class</span> = FigInVncdesk<span style="color: #aaccff;">scale_factor</span> = 1.8</pre></div><p>接下來則是我們執行程式用的腳本 <code>startup</code> ，記得這個檔案需要加上執行權限，在這份檔案中，我們先設定幾個環境變數，接著由於可能會有多視窗的需求，因此啟用 <code>openbox</code> 1 作為窗口管理程式，最後則是啟動 vivado 這隻程式。</p><p>注意到 <code>export SWT_GTK3=0</code> 這個設定，待會會解釋它到底會有啥影響，總之先照著設定就是了。</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #9ac; font-style: italic;">!/bin/</span><span style="color: #aaffaa;">sh</span><span style="color: #ccaaff;">export</span> <span style="color: #aaccff;">LC_ALL</span>=C<span style="color: #ccaaff;">export</span> <span style="color: #aaccff;">SWT_GTK3</span>=0   <span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Fix annoying error on Xilinx SDK</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Make java application look more nice</span><span style="color: #aaccff;">_SILENT_JAVA_OPTIONS</span>=<span style="color: #aadddd;">"-Dawt.useSystemAAFontSettings=on -Dsun.java2d.xrender=true -Dswing.aatext=true"</span><span style="color: #ccaaff;">unset</span> _JAVA_OPTIONS<span style="color: #ccaaff;">alias</span> <span style="color: #aaccff;">java</span>=<span style="color: #aadddd;">'java $_SILENT_JAVA_OPTIONS'</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">start window manager</span>openbox &amp;<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Source vivado env before launch</span><span style="color: #ccaaff;">export</span> <span style="color: #aaccff;">TARGET_DIR</span>=/opt/Xilinx/Vivado/2016.1<span style="color: #ccaaff;">source</span> $<span style="color: #aaccff;">TARGET_DIR</span>/settings64.sh<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Launch Vivado</span><span style="color: #ccaaff;">cd</span> /tmp<span style="color: #aaffaa;">exec</span> $<span style="color: #aaccff;">TARGET_DIR</span>/bin/vivado</pre></div><p>這兩個設定都建立好以後，我們就可以用以下命令去執行畫面有縮放過的 Vivado 程式</p><pre class="example">coldnew@gentoo ~ $ vncdesk 21</pre><p>顯示的畫面會變成這樣，在 HiDPI 的環境下也就清楚多了</p><div class="figure"><p><img src="vncdesk.png"></p></div></div></div><div id="outline-container-org3e6221b" class="outline-2"><h2 id="org3e6221b">一定要設定 export SWT_GTK3=0</h2><div class="outline-text-2" id="text-org3e6221b"><p>在上面我們說了要設定 <code>SWT_GTK3=0</code> ，如果不設定的話，很容易出現問題，以我遇到的狀況來講，我在 Xilinx SDK 想要建立 Zynq Boot Image，但是視窗卻不會給我彈出來</p><iframe width="420" height="315" src="https://www.youtube.com/embed/AQtjDvPhMiQ" frameborder="0" allowfullscreen></iframe><p>如果你設定了 <code>SWT_GTK3=0</code> 後在啟動 Xilinx SDK，這問題就不見囉 = =|||</p><iframe width="420" height="315" src="https://www.youtube.com/embed/dRtCMgc-bHA" frameborder="0" allowfullscreen></iframe></div></div><div id="outline-container-orge5cfc8f" class="outline-2"><h2 id="orge5cfc8f">延伸閱讀</h2><div class="outline-text-2" id="text-orge5cfc8f"><p><code>[1]</code> <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_2/ug973-vivado-release-notes-install-license.pdf" target="_blank" rel="external">Vivado Design Suite User Guide</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/8d3a2531/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 升級 Digilent 提供的設計檔</title>
      <link>https://coldnew.github.io/49454c4d/</link>
      <guid>https://coldnew.github.io/49454c4d/</guid>
      <pubDate>Sun, 26 Jun 2016 15:31:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
&lt;a href=&quot;http://store.digilentinc.com/&quot;&gt;Digilent&lt;/a&gt; 針對 &lt;a href=&quot;http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot;&gt;Zybo board&lt;/a&gt; 用於 Embedded Linux 的環境上，提供了一個預先定義好接腳的設定檔 (zybo_base_system)， &lt;a href=&quot;https://reference.digilentinc.com/_media/zybo/zybo_base_system.zip&quot;&gt;早期的版本&lt;/a&gt; 是直接將專案打包起來釋出，後期則採用 git 去進行維護，其專案位於 &lt;a href=&quot;https://github.com/Digilent/ZYBO&quot;&gt;GitHub&lt;/a&gt; 上。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://store.digilentinc.com/" target="_blank" rel="external">Digilent</a> 針對 <a href="http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo board</a> 用於 Embedded Linux 的環境上，提供了一個預先定義好接腳的設定檔 (zybo_base_system)， <a href="https://reference.digilentinc.com/_media/zybo/zybo_base_system.zip" target="_blank" rel="external">早期的版本</a> 是直接將專案打包起來釋出，後期則採用 git 去進行維護，其專案位於 <a href="https://github.com/Digilent/ZYBO" target="_blank" rel="external">GitHub</a> 上。</p><a id="more"></a><div data-theme="default" data-height="150" data-width="400" data-github="Digilent/ZYBO" class="github-card"></div><script src="//cdn.jsdelivr.net/github-cards/latest/widget.js"></script><p>由於 <a href="http://store.digilentinc.com/" target="_blank" rel="external">Digilent</a> 提供的 git 版本的 <a href="http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo board</a> <a href="https://github.com/Digilent/ZYBO/tree/master/Projects/linux_bd" target="_blank" rel="external">設定檔</a> 會因為 Xilinx 的 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 開發工具的版本升級而變成版本不匹配的狀況，本文將紀錄如何對該設定檔進行升級並產生我們的專案。</p><p>在撰寫本文時，該設定檔 commit id 為 <a href="https://github.com/Digilent/ZYBO/commit/177c2c97c5cae29a05359479565c2f5256d8d629" target="_blank" rel="external">177c2c</a> ，使用的是 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 2015.4 版本， 我們要將它升級到 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 2016.1 去。</p><div id="outline-container-org31d2144" class="outline-2"><h2 id="org31d2144">事前準備</h2><div class="outline-text-2" id="text-org31d2144"><p>在進行升級時，你需要安裝好 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 2015.4 以及 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 2016.1 才能按照本文的步驟進行。</p></div></div><div id="outline-container-org174fbd3" class="outline-2"><h2 id="org174fbd3">下載設定檔並用 Vivado 2015.4 開啟</h2><div class="outline-text-2" id="text-org174fbd3"><p>我們首先下載 <a href="http://store.digilentinc.com/" target="_blank" rel="external">Digilent</a> 提供的 <a href="https://github.com/Digilent/ZYBO/tree/master/Projects/linux_bd" target="_blank" rel="external">Zybo board 設定檔</a></p><div class="org-src-container"><pre class="src src-sh">git clone https://github.com/Digilent/ZYBO.git -b vivado-2015.4 63ca49</pre></div><p>接著進入到 <code>ZYBO/Projects/linux_bd/proj</code> 資料夾去，使用你的 vivado 2015.4 去產生新的專案</p><pre class="example">coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ /opt/Xilinx/Vivado/2015.4/bin/vivado -mode batch -source create_project.tcl</pre><p>如果不想用指令，也可以打開 Vivado 圖形界面，選擇 <code>Tools -&gt; Run Tcl Script</code> 然後再選 <code>create_project.tcl</code> 這檔案去執行</p><div class="figure"><p><img src="run_tcl_script.png"></p></div><p>完成後，你會發現當下目錄多出了一些檔案</p><pre class="example">coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ tree -L 1. &lt;b&gt;├── cleanup.cmd├── cleanup.sh├── create_project.tcl├── ip_upgrade.log &lt;g&gt;├── linux_bd.cache &lt;b&gt;├── linux_bd.hw &lt;b&gt;├── linux_bd.ip_user_files &lt;b&gt;├── linux_bd.sim &lt;b&gt;├── linux_bd.srcs &lt;b&gt;├── linux_bd.xpr├── vivado.jou└── vivado.log &lt;g&gt;5 directories, 7 files</pre><p>這些 linux_bd.* 檔案就是我們透過 Vivado 2015.4 產生的專案，接下來我們要用 <code>Vivado 2016.1</code> 打開它去做升級的動作。</p></div></div><div id="outline-container-org96bba03" class="outline-2"><h2 id="org96bba03">升級設定檔</h2><div class="outline-text-2" id="text-org96bba03"><p>接下來我們使用 <code>Vivado 2016.1</code> 打開我們剛剛用 Vivado 2015.4 所產生的 <code>linux_bd.*</code> 專案</p><div class="figure"><p><img src="prj_upgrade1.png"></p></div><p>由於原本的專案是透過 Vivado 2015.4 產生的，因此會被詢問要不要升級，這邊點選 <code>Report IP Status</code></p><div class="figure"><p><img src="prj_upgrade2.png"></p></div><p>接下來點選 <code>Upgrade Selected</code> 將這些過時的 IP core 進行升級</p><div class="figure"><p><img src="prj_upgrade3.png"></p></div><p>沒出錯的話，過一段時間 Vivado 會回報升級完成</p><div class="figure"><p><img src="prj_upgrade4.png"></p></div><p>升級完成後，我們要產生幾個符合 Vivado 2016.1 的 <code>tcl 腳本</code> ，這樣以後我們才可以用 Vivado 2016.1 產生我們的新專案</p></div></div><div id="outline-container-org5c13148" class="outline-2"><h2 id="org5c13148">產生 tcl 腳本</h2><div class="outline-text-2" id="text-org5c13148"><p>好了，現在我們把原本用於 Vivado 2015.4 的 tcl 腳本所產生的專案升級到 Vivado 2016.1 了，實際上導致我們不能夠直接使用 <a href="http://www.xilinx.com/products/design-tools/vivado.html" target="_blank" rel="external">Vivado</a> 2016.1 來產生專案的原因，在於 <code>src/bd/system.tcl</code> 這個檔案和 Vivado 的版本有依賴性，因此我們要重新產生新的 <code>system.tc</code> 去將它替換掉</p><p>透過 <code>File -&gt; Export -&gt; Export Block Design</code> 來將新的 block design 匯出</p><div class="figure"><p><img src="prj_upgrade7.png"></p></div><p>將它存放到 <code>ZYBO/Projects/linux_bd/src/bd/system.tcl</code> 就完成囉~</p></div></div><div id="outline-container-orga717c1d" class="outline-2"><h2 id="orga717c1d">將預設語言設為 Verilog</h2><div class="outline-text-2" id="text-orga717c1d"><p><a href="http://store.digilentinc.com/" target="_blank" rel="external">Digilent</a> 針對 <a href="http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo board</a> 提供產生專案用的樣板，預設是採用 VHDL 作為這個專案用的硬體描述語言，如果你希望之後這樣建立的專案都是預設使用 Verilog 的話，你可以這樣修改 <code>create_project.tcl</code></p><div class="org-src-container"><pre class="src src-diff"><span style="color: #dddddd;">diff --git a/Projects/linux_bd/proj/create_project.tcl b/Projects/linux_bd/proj/create_project.tcl</span><span style="color: #dddddd;">index 825281a..74c726e 100644</span><span style="color: #aaaaaa; background-color: #202020;">--- </span><span style="color: #aaaaaa; background-color: #202020;">a/Projects/linux_bd/proj/create_project.tcl</span><span style="color: #aaaaaa; background-color: #202020;">+++ </span><span style="color: #aaaaaa; background-color: #202020;">b/Projects/linux_bd/proj/create_project.tcl</span><span style="color: #aaaaaa; background-color: #202020;">@@ -39,7 +39,7 @@</span><span style="color: #aaaaaa; background-color: #202020;"> set_property "default_lib" "xil_defaultlib" $obj</span><span style="color: #dddddd;"> set_property "part" $part $obj</span><span style="color: #dddddd;"> set_property "board_part" $brd_part $obj</span><span style="color: #dddddd;"> set_property "simulator_language" "Mixed" $obj</span><span style="color: #ff3333; font-weight: bold;">-</span><span style="color: #ff3333; font-weight: bold;">set_property "target_language" "VHDL" $obj</span><span style="color: #aaffaa; font-weight: bold;">+</span><span style="color: #aaffaa; font-weight: bold;">set_property "target_language" "Verilog" $obj</span><span style="color: #dddddd;"> # Create 'sources_1' fileset (if not found)</span><span style="color: #dddddd;"> if {[string equal [get_filesets -quiet sources_1] ""]} {</span></pre></div><p>這樣一來，透過 <code>create_project.tcl</code> 建立的專案，不管是 HDL wrapper 或是預設 HDL 都會是 Verilog 囉~</p></div></div><div id="outline-container-org046962d" class="outline-2"><h2 id="org046962d">重建新的專案</h2><div class="outline-text-2" id="text-org046962d"><p>我們剛剛重建了 <code>src/bd/system.tcl</code> 這個檔案，將其升級到 Vivado 2016.1 版本，現在可以試試重新產生新的專案囉</p><p>不過由於我們可能有之前建立好名為 <code>linux_bd.*</code> 的檔案，因此可以透過 <code>cleanup.sh</code> 去將這些產生出來的檔案清除</p><pre class="example">coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ sh cleanup.sh</pre><p>接下來用 Vivado 2016.1 重新生出新的專案就好囉 ~</p><pre class="example">coldnew@gentoo ~/ZYBO/Projects/linux_bd/proj $ /opt/Xilinx/Vivado/2016.1/bin/vivado -mode batch -source create_project.tcl</pre></div></div><div id="outline-container-org43a459d" class="outline-2"><h2 id="org43a459d">延伸閱讀</h2><div class="outline-text-2" id="text-org43a459d"><p><code>[1]</code> <a href="https://github.com/Digilent/ZYBO/tree/master/Projects/linux_bd" target="_blank" rel="external">https://github.com/Digilent/ZYBO/tree/master/Projects/linux_bd</a></p><p><code>[2]</code> <a href="http://xillybus.com/tutorials/vivado-version-control-packaging" target="_blank" rel="external">Vivado: Packaging for version control, distribution and repeatability</a></p><p><code>[3]</code> <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2016_1/ug835-vivado-tcl-commands.pdf" target="_blank" rel="external">Vivado Design Suite Tcl Command Reference Guide</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/49454c4d/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zybo board 開發記錄: 硬體認識</title>
      <link>https://coldnew.github.io/7004ff00/</link>
      <guid>https://coldnew.github.io/7004ff00/</guid>
      <pubDate>Thu, 23 Jun 2016 16:52:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
為了學習 RISC-V 以及體驗看看 Xilinx 的開發平台，最近我入手了 &lt;a href=&quot;https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/&quot;&gt;Zybo Board&lt;/a&gt; ，這是一塊具有 FPGA 同時又包含了 ARM Cortex-A9 雙核心的開發板。
&lt;/p&gt;

&lt;p&gt;
在我們開始這一切之前，我們需要稍微了解一下這片開發板以及他的週邊等資訊。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>為了學習 RISC-V 以及體驗看看 Xilinx 的開發平台，最近我入手了 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> ，這是一塊具有 FPGA 同時又包含了 ARM Cortex-A9 雙核心的開發板。</p><p>在我們開始這一切之前，我們需要稍微了解一下這片開發板以及他的週邊等資訊。</p><a id="more"></a><p>要了解 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> 的週邊，首先要看的就是開發商 <a href="http://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">DIGILENT</a> 所提供的 <a href="https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf" target="_blank" rel="external">ZYBO FPGA Board Reference Manual</a>。讓我們來看看一些比較重要的地方吧!</p><div id="outline-container-org14ff60c" class="outline-2"><h2 id="org14ff60c">基本硬體認識</h2><div class="outline-text-2" id="text-org14ff60c"><p>拿到手的 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> 會像下面這個樣子，我們有這些基本的輸入/輸出模組，以及未標示的部份(Pmod)，可以做延伸的功能</p><div class="figure"><p><img src="zybo_a.png"></p></div><p>讓我們來看看這些週邊模組吧</p></div></div><div id="outline-container-orgd7e15da" class="outline-2"><h2 id="orgd7e15da">電源輸入(5V)</h2><div class="outline-text-2" id="text-orgd7e15da"><p><a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> 允許三種不同類型的電源輸入模式，分別是 USB、外接電源(J15)、外接電池。我們可以從 <a href="https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf" target="_blank" rel="external">Reference Manual</a> 得到電源模組的大致資訊。</p><div class="figure"><p><img src="power_cricuit_overview.png"></p></div><p>控制電源輸入的位置在 <code>JP7</code> 的排針座上，我們可以透過切換跳線(Jumper)來選擇我們需要的電源輸入，在週邊使用不多的情況下，我會直接使用 USB (5V) 來作為電流的輸入。</p><p>要注意到的是，<a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> 僅吃 <code>5V</code> 電源，因此不論你是用外接電源(J15)或是外接電池，你最好都先確認你的電壓是否為 <code>5V</code> (或是低於) ，否則你的開發板可能因此燒壞。</p><p>插上電源後，透過電源開關 (Power Switch, SW4) 的切換即可完成給電/斷電的動作。</p></div></div><div id="outline-container-org4369b97" class="outline-2"><h2 id="org4369b97">Zynq SOC</h2><div class="outline-text-2" id="text-org4369b97"><p><a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> 核心是 <a href="http://www.xilinx.com/" target="_blank" rel="external">Xilinx</a> Zynq-7000 系列的 <a href="http://www.xilinx.com/support/documentation/user_guides/ug585-Zynq-7000-TRM.pdf" target="_blank" rel="external">Z-7010</a> ARM/FPGA SoC 處理器，這是一種混和了 FPGA 以及 ARM Cortex-A9 處理器的 FPGA 核心。以往的 FPGA 開發板需要用到 CPU 的時候只能夠燒錄用 HDL 語言撰寫的軟核心到開發板上，這種混搭 FPGA/ARM 的開發板則是讓你可以針對通用需求使用 ARM CPU 進行程式的開發，特殊需求則透過 FPGA 進行處理/加速來運作，是一種蠻有趣的架構。</p><p>我們可以把 Zynq SoC 分為兩個區塊, 處理系統 (Processing System, PS) 以及 可程式邏輯區塊(Programmable Logic, PL)，像這樣</p><div class="figure"><p><img src="zynq_block.png"></p></div><p>處理系統(Processing Syste, PS) 也就是有 ARM Cortex-A9 處理器的部份，可程式邏輯區塊(Programmable Logic, PL) 則是 FPGA 所包含的部份。</p><p>在上面的區塊圖中，我們要另外注意到 <code>MIO (Multiplexed I/O)</code> 以及 <code>EMIO (Extended multiplexed I/O)</code> ，在 Zynq 7000 系列 SoC 中，我們共有 54 個 MIO 可用，而這些 MIO 所連接的位址是無法在 可程式邏輯區塊 (Programmable Logic, PL) 中看到。</p><p>在 <a href="https://store.digilentinc.com/zybo-zynq-7000-arm-fpga-soc-trainer-board/" target="_blank" rel="external">Zybo Board</a> 我們有這幾個地方是連接到 MIO (Multiplexed I/O) 上的</p><div class="figure"><p><img src="mio_pinout.png"></p></div></div><div id="outline-container-orga73f0e1" class="outline-3"><h3 id="orga73f0e1">系統啟動流程</h3><div class="outline-text-3" id="text-orga73f0e1"><p>由於 Zynq 7000 系列內建了 ARM CPU，也因此和傳統的 FPGA 開發板相比，系統啟動流程也會不同，整體開機流程可以分為三個階段:</p><ul class="org-ul"><li><p>階段 0</p><p>當 Zybo board 電源啟動後，CPU0 會執行內部已經預燒錄的程式 BootROM，這個程式會根據 <code>JP5</code> 所設定的資訊來更新狀態暫存器(mode register)，接著 BootROM 會透過狀態讚存器(mode register)的資訊從 MicroSD、NOR Flash、JTAG 等位置抓取 Zynq Boot Image，並將包在 Zynq Boot Image 裡面的 <code>第一級啟動開機程式 (First Stage Bootloader, FSBL)</code> 複製到內部 256KB 的記憶體 (On-Chip Memory, OCM) 去，最後執行 FSBL，進入下一個階段。</p><p>如果 BootROM 是因為按下了 RESET 按鈕等狀況而被執行，Zybo board 會選用之前已經存放在狀態暫存器(mode register)的開機狀態，而不是當下的 <code>JP5</code> 狀態。</p></li><li><p>階段 1</p><p>在這階段中, 第一級啟動開機程式 (First Stage Bootloader, FSBL) 初始化了 DDR 記憶體、GPIO 等週邊設定，接下來會載入存放在 Boot Image 內的位元流 (bitstream)，用他來對可程式邏輯區塊 (Programmable Logic, PL) 進行設定。</p><p>當可程式邏輯區塊(Programmable Logic, PL)設定完成後，FSBL 會去載入程式(ex: u-boot)並執行它。</p></li><li><p>階段 2</p><p>最後的接段即是執行 FSBL 所載入的程式，這些程式可以從簡單的 "Hello World"，到像 u-boot 這樣的第二階段開機程式，用來載入 Linux 或是其他的作業系統。</p></li></ul></div></div><div id="outline-container-org6384830" class="outline-3"><h3 id="org6384830">更改開機模式</h3><div class="outline-text-3" id="text-org6384830"><p>我們可以透過切換 <code>JP5</code> 的跳線(Jumper)來決定我們要透過哪種方式去載入第一級啟動開機程式 (First Stage Bootloader, FSBL)</p><div class="figure"><p><img src="zybo_config_pins.png"></p></div></div><div id="outline-container-orgab44c67" class="outline-4"><h4 id="orgab44c67">MicroSD 啟動</h4><div class="outline-text-4" id="text-orgab44c67"><p>當使用者將 MicroSD 插入到 <code>J4</code> 的 SD 卡槽，並設定好 <code>JP5</code> 的跳線的話，我們可以透過 MicroSD 來進行開機的動作。</p><p>若你希望透過 MicroSD 進行開機，你需要先設定好你的 SD 卡:</p><ol class="org-ol"><li>透過電腦格式化 MicroSD 卡成 <code>FAT32</code> 檔案格式</li><li>複製從 Xilinx SDK 製作出來的 Zynq Boot Image 到 MicroSD 卡上</li><li>將 Zynq Boot Image 命名為 <code>BOOT.bin</code></li><li>將 MicroSD 卡從電腦移除，並插入到 Zybo Board 的 J4 SD 卡槽上</li><li>接上電源，並設定好 JP7 (Power Source Select)</li><li>將 <code>JP5</code> 的跳線 (Jumper) 調整到 MicroSD 模式 (板上標示為 SD 的那個)</li><li>啟動電源。接下來 Zybo Board 就會從 MicroSD 卡啟動。</li></ol></div></div><div id="outline-container-org927cbbe" class="outline-4"><h4 id="org927cbbe">QSPI 啟動</h4><div class="outline-text-4" id="text-org927cbbe"><p>在 Zybo board 上有一顆 128-Mbit Quad-SPI (QSPI) 的 NOR Flash，我們可以透過 Xilinx ISE 和 Vivado 等工具去將 Zynq Boot Image 下載到 QSPI Flash 上。</p><p>當下載完成後，照這樣的步驟即可透過 QSPI 啟動:</p><ol class="org-ol"><li>接上電源，並設定好 JP7 (Power Source Select)</li><li>將 <code>JP5</code> 的跳線 (Jumper) 調整到 QSPI 模式 (板上標示為 QSPI 的那個)</li><li>啟動電源。接下來 Zybo Board 就會從 QSPI 卡啟動。</li></ol></div></div><div id="outline-container-org5cc1587" class="outline-4"><h4 id="org5cc1587">JTAG 啟動</h4><div class="outline-text-4" id="text-org5cc1587"><p>當你將 <code>JP5</code> 設定為 JTAG 啟動模式，Zynq 內的 Cortex-A9 處理器會等到電腦端的 Xilinx 工具載入了要執行的程式之後，再執行預執行的程式，或是啟用一步一步(step-by-step)的執行模式來方便我們除錯。</p><p>除此之外，我們也可以透過 iMPACT 或是 Vivado Hardware Server 透過 JTAG 來設定可程式邏輯區塊 (Programmable Logic, PL)。</p><p>Zybo Board 預設是開機啟動 Cascaded JTAG 模式，在這種模式下 處理器系統 (Processing System, PS) 和 可程式邏輯區塊 (Programmable Logic, PL) 可以透過同一個 JTAG 去進行控制。如果你將 <code>JP6</code> 短路，則可以讓 JTAG 僅看得到 可程式邏輯區塊 (Programmable Logic, PL)，在這種狀況下，使用者可以透過 EMIO (Extended multiplexed I/O) 將 PJTAG 拉出，讓外部的設備可以和 處理器系統 (Processing System, PS) 進行溝通。</p></div></div></div></div><div id="outline-container-org0f6fbaf" class="outline-2"><h2 id="org0f6fbaf">SPI Flash</h2><div class="outline-text-2" id="text-org0f6fbaf"><p>Zybo Board 內建了 4-bit SPI (QSPI) NOR Flash，硬件型號為 <a href="http://www.cypress.com/file/177966/download" target="_blank" rel="external">Spansion S25FL128S</a>。</p><p>假設 <code>JP5</code> 設定為 NOR Flash 開機，則我們可以透過這顆 NOR Flash 來初始化處理器系統(Processing System, PS)以及可程式邏輯區塊(Programmable Logic, PL)。除此之外，當開機完成後，我們可以使用 Spansion檔案系統(<a href="http://www.cypress.com/software-and-drivers-spansion-flash-memory" target="_blank" rel="external">Spansion Flash File System</a>, FFS) 來對檔案進行讀寫的處理。</p><div class="figure"><p><img src="spi_circuit.png"></p></div><p>從電路圖我們可以看到 SPI Flash 是直接連到 Zynq 處理器上的 Quad-I/O SPI interface。</p></div></div><div id="outline-container-orgeb33e6a" class="outline-2"><h2 id="orgeb33e6a">DDR 記憶體</h2><div class="outline-text-2" id="text-orgeb33e6a"><p>Zybo Board 使用的是 <a href="https://www.micron.com/~/media/documents/products/data-sheet/dram/ddr3/2gb_ddr3_sdram.pdf" target="_blank" rel="external">Micron MT41J128M16JT-125</a> 或是 <a href="https://www.micron.com/~/media/documents/products/data-sheet/dram/ddr3/2gb_1_35v_ddr3l.pdf" target="_blank" rel="external">MT41K128M16JT-125</a> 這兩種 DDR3 記憶體元件，在 Zybo Board 上我們共有 512MB 的記憶體空間可以使用。</p><p>根據 <a href="http://www.xilinx.com/support/documentation/user_guides/ug585-Zynq-7000-TRM.pdf" target="_blank" rel="external">Zynq-7000 All Programmable SoC Technical Reference Manual</a>，DDR3 記憶體是直接連接到處理器系統 (Processing System, PS)。</p></div></div><div id="outline-container-orgd4304d5" class="outline-2"><h2 id="orgd4304d5">USB UART 接口</h2><div class="outline-text-2" id="text-orgd4304d5"><p>Zybo Board 並未將 UART 序列埠拉出，取而代之的它採用了 <a href="http://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT2232H.pdf" target="_blank" rel="external">FTDI FT2232HQ</a> 這款 USB 轉 UART 的 IC 讓你的電腦可以和 Zybo Board 進行溝通。</p><div class="figure"><p><img src="usb-uart-bridge.png"></p></div><p>如果你是 Linux 使用者，在安裝完 Vivado 後，你會需要手動安裝 udev 設定好讓 Linux 可以偵測到這個 USB 轉 UART 設備(共兩組，/dev/ttyUSB0, /dev/ttyUSB1)，假設你的 vivado 安裝在 <code>/opt/Xilinx/Vivado/2016.1</code> 的話，我們可以透過以下程式來安裝 udev 設定。</p><pre class="example">/opt/Xilinx/Vivado/2016.1/data/xicom/cable_drivers/lin64/install_script/install_drivers/install_digilent.sh</pre></div></div><div id="outline-container-orgbffe6e6" class="outline-2"><h2 id="orgbffe6e6">MicroSD 插槽</h2><div class="outline-text-2" id="text-orgbffe6e6"><p>在 Zybo Board 的背面，我們可以看到 Micro SD 插槽(J4)，根據 <a href="http://www.xilinx.com/support/documentation/user_guides/ug585-Zynq-7000-TRM.pdf" target="_blank" rel="external">Zynq-7000 All Programmable SoC Technical Reference Manual</a> ，Zynq 的 SDIO 控制器僅支援 1-bit 或是 4-bit 傳輸模式 (Host Modes)，不支援 SPI 模式。</p><div class="figure"><p><img src="microsd_circuit.png"></p></div><p>而 Micro SD 使用到的 MIO (Multiplexed I/O) 資訊如下:</p><div class="figure"><p><img src="microsd_pinout.png"></p></div></div></div><div id="outline-container-org687dade" class="outline-2"><h2 id="org687dade">USB OTG</h2><div class="outline-text-2" id="text-org687dade"><p>Zybo Board 提供了一組 <a href="https://zh.wikipedia.org/wiki/USB_On-The-Go" target="_blank" rel="external">USB OTG</a> 支援，在這個界面中使用了 Microchip 的 <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/00001792E.pdf" target="_blank" rel="external">USB3320</a> 這顆 IC 來作為端口物理層 (Port Physical Layer, PHY)，要注意到的是，你不可以 <code>同時</code> 將 USB 主機 (HOST) 以及 USB 設備 (Device) 接到 USB OTG 端口上。</p><p>(也就是不要同時接上設備到 <code>J9</code> 以及 <code>J10</code>)</p><div class="figure"><p><img src="usb_otg_circuit.png"></p></div><p>而在 USB OTG 的功能上，我們則是用掉了 <code>MIO 28 ~ 39</code> 的位置。</p><p>另外，由於 USB 2.0 的規格是 USB 主機最多可以提供 500mA 的電流，當你設定為 USB 主機的模式時，在 <code>J11</code> 的電源端 <code>必須</code> 改用外接電源或是電池輸入，避免電流不夠的情況發生。</p></div></div><div id="outline-container-orgc4e4cd8" class="outline-2"><h2 id="orgc4e4cd8">Ethernet PHY</h2><div class="outline-text-2" id="text-orgc4e4cd8"><p>Zybo Board 使用 <a href="http://download3.dvd-driver.cz/realtek/datasheets/pdf/rtl8211e%28g%29-vb%28vl%29-cg_datasheet_1.6.pdf" target="_blank" rel="external">Realtek RTL8211E-VL</a> PHY 來實現 10/100/1000 網路傳輸的功能。具體使用到的 MIO 以及 EMIO 接腳資訊如下:</p><div class="figure"><p><img src="ethernet_phy_overview.png"></p></div><p>我們可以透過在 RJ45 附近的 LED 來觀察流量 (LD7) 以及連線狀態 (LD6) 的資訊</p><div class="figure"><p><img src="ethernet_phy_status.png"></p></div><p>網卡的 MAC 位址則是存放在 Micrichip <a href="http://ww1.microchip.com/downloads/en/DeviceDoc/22124B.pdf" target="_blank" rel="external">24AA02E48</a> 這顆 EEPROM 上面，Zynq 處理器透過 EMIO 上的 I²C 接口來和 EEPROM 進行溝通。</p><div class="figure"><p><img src="ethernet_macaddr.png"></p></div></div></div><div id="outline-container-org8c95d4e" class="outline-2"><h2 id="org8c95d4e">HDMI Source/Sink</h2><div class="outline-text-2" id="text-org8c95d4e"><p>Zybo Board 的 HDMI 接口並未透過外部 IC 去驅動，因此我們必須透過可程式邏輯(Programmable Logic, PL) 去實現影片編碼 (Encoding)與解碼(Decoding)的功能。</p><div class="figure"><p><img src="hdmi_circuit.png"></p></div><p>由於 Zybo Board 的 HDMI 接口支援 HDMI 來源裝置(HDMI Source) 以及 HDMI 目標裝置 (HDMI Sink) 的功能，我們也須注意訊號的方向變化。</p><div class="figure"><p><img src="hdmi_roles.png"></p></div><p>根據 <a href="https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf" target="_blank" rel="external">ZYBO FPGA Board Reference Manual</a> 可知 Zyboard Board 的 HDMI 至少支援到 720p (1280x720) 的解析度。</p></div></div><div id="outline-container-orgf512d29" class="outline-2"><h2 id="orgf512d29">VGA</h2><div class="outline-text-2" id="text-orgf512d29"><p>Zybo Board 的 VGA 輸出也是沒有透過外部 IC 將數位訊號轉換為類比訊號，取而代之的，它採用了 <a href="https://en.wikipedia.org/wiki/Resistor_ladder#R.E2.80.932R_resistor_ladder_network_.28digital_to_analog_conversion.2C_or_DAC.29" target="_blank" rel="external">R–2R resistor ladder</a> 這種分壓的方式將數位訊號變成了 VGA 用的類比訊號。</p><div class="figure"><p><img src="vga_circuit.png"></p></div></div></div><div id="outline-container-org8d8f9bf" class="outline-2"><h2 id="org8d8f9bf">時脈源 (Clock Sources)</h2><div class="outline-text-2" id="text-org8d8f9bf"><p>ZYBO board 提供了 50MHZ 的時脈到 Zynq 處理器的 <code>PS_CLK</code> 接腳，基本連接資訊如下:</p><div class="figure"><p><img src="clock_source.png"></p></div><p>要注意到的一點是，由於 Ethernet PHY 會接收 50HMZ 時脈輸入，並輸出 125HMZ 到 Zynq 處理器上，當 Ethernet PHY 重置(reset)的時候，CLK125 的輸出會被取消。</p></div></div><div id="outline-container-orga36c1d9" class="outline-2"><h2 id="orga36c1d9">基本輸入/輸出 (I/O)</h2><div class="outline-text-2" id="text-orga36c1d9"><p>Zybo board 板上有一些預先定義好的 IO, 比如指撥開關 (Switch)、LED 燈、無段按鈕等。</p><div class="figure"><p><img src="basic_io.png"></p></div></div></div><div id="outline-container-orgd824ebc" class="outline-2"><h2 id="orgd824ebc">聲音 (Audio)</h2><div class="outline-text-2" id="text-orgd824ebc"><p>Zybo Board 上有三組聲音相關的 IO，分別是耳機孔輸出(Headphone Out)、麥克風輸入(Microphone In)、音源轉錄功能(Line In)，這些 IO 會連接到 Ananlog Device 的 <a href="http://www.analog.com/media/en/technical-documentation/data-sheets/SSM2603.pdf" target="_blank" rel="external">SSM2603</a> 音頻解碼器上。</p><div class="figure"><p><img src="audio_an.png"></p></div><p><a href="http://www.analog.com/media/en/technical-documentation/data-sheets/SSM2603.pdf" target="_blank" rel="external">SSM2603</a> 則是透過 I²C 接口來將資料傳送給 Zynq 處理器去。</p><div class="figure"><p><img src="audio_di.png"></p></div></div></div><div id="outline-container-org532f48e" class="outline-2"><h2 id="org532f48e">Pmod 接腳</h2><div class="outline-text-2" id="text-org532f48e"><p>在 Zybo Board 的周遭，共有 6 個 2x6 母排座，用來將多餘的 GPIO 拉出。每個 Pmod 提供了兩個 3.3 VCC 電源、兩個 GND 訊號以及 8 個 IO 可以用。在 Pmod 上的 VCC 以及 GND 最多可以提供到 1A 的電流(但要記得外接電源)。</p><div class="figure"><p><img src="pmod_dia.png"></p></div><p>不同的 Pmod 用途則可能不同，詳情請參見下表:</p><div class="figure"><p><img src="pmod_pin.png"></p></div></div></div><div id="outline-container-org9b8fcf6" class="outline-2"><h2 id="org9b8fcf6">延伸閱讀</h2><div class="outline-text-2" id="text-org9b8fcf6"><p><code>[1]</code> <a href="https://reference.digilentinc.com/_media/zybo/zybo_rm.pdf" target="_blank" rel="external">ZYBO FPGA Board Reference Manual</a></p><p><code>[2]</code> <a href="http://electronicdesign.com/fpgas/principles-fpgas" target="_blank" rel="external">The Principles of FPGAs | FPGAs content from Electronic Design</a></p><p><code>[3]</code> <a href="http://www.xilinx.com/support/documentation/user_guides/ug585-Zynq-7000-TRM.pdf" target="_blank" rel="external">Zynq-7000 All Programmable SoC Technical Reference Manual</a></p><p><code>[4]</code> <a href="http://www.ioe.nchu.edu.tw/Pic/CourseItem/4468_20_Zynq_Architecture.pdf" target="_blank" rel="external">Xilinx - Zynq Architecture</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/7004ff00/#disqus_thread</comments>
    </item>
    
    <item>
      <title>clojure/clojurescript 與 left-pad</title>
      <link>https://coldnew.github.io/7c811780/</link>
      <guid>https://coldnew.github.io/7c811780/</guid>
      <pubDate>Sat, 26 Mar 2016 16:07:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
最近鬧得沸沸揚揚的事情，大概就是 &lt;a href=&quot;https://github.com/azer&quot;&gt;Azer Koçulu&lt;/a&gt; 在 npm 上&lt;a href=&quot;https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.eww19oprb&quot;&gt;下架 left-pad&lt;/a&gt;這件事，導致許許多多依賴他的 Node.js 專案 &lt;a href=&quot;https://github.com/azer/left-pad/issues/4&quot;&gt;不能使用&lt;/a&gt;。
&lt;/p&gt;

&lt;p&gt;
就讓我們趁這個機會，看一下我們在 clojure/clojurescript 下到底有沒有需要這個函式庫，或是是否已經有內建可替代的函式可以處理這個功能。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近鬧得沸沸揚揚的事情，大概就是 <a href="https://github.com/azer" target="_blank" rel="external">Azer Koçulu</a> 在 npm 上<a href="https://medium.com/@azerbike/i-ve-just-liberated-my-modules-9045c06be67c#.eww19oprb" target="_blank" rel="external">下架 left-pad</a>這件事，導致許許多多依賴他的 Node.js 專案 <a href="https://github.com/azer/left-pad/issues/4" target="_blank" rel="external">不能使用</a>。</p><p>就讓我們趁這個機會，看一下我們在 clojure/clojurescript 下到底有沒有需要這個函式庫，或是是否已經有內建可替代的函式可以處理這個功能。</p><a id="more"></a><div id="outline-container-org74a3101" class="outline-2"><h2 id="org74a3101">leftpad 做了哪些事?</h2><div class="outline-text-2" id="text-org74a3101"><p>在我們開始前，讓我們來看看 <a href="https://github.com/azer/left-pad" target="_blank" rel="external">left-pad</a> 這個函式庫到底多好用，為什麼一堆套件都依賴他。實際上 <a href="https://github.com/azer/left-pad" target="_blank" rel="external">left-pad</a> 只有短短的幾行，內容如下:</p><div class="org-src-container"><pre class="src src-javascript"><span style="color: #aaffaa;">function</span> <span style="color: #aaccff;">leftpad</span> <span style="color: #aadddd;">(</span><span style="color: #aaccff;">str</span>, <span style="color: #aaccff;">len</span>, <span style="color: #aaccff;">ch</span><span style="color: #aadddd;">)</span> <span style="color: #aadddd;">{</span>    str = String<span style="color: #81d4fa;">(</span>str<span style="color: #81d4fa;">)</span>;    <span style="color: #aaffaa;">var</span> <span style="color: #aaccff;">i</span> = -1;    <span style="color: #aaffaa;">if</span> <span style="color: #81d4fa;">(</span>!ch &amp;&amp; ch !== 0<span style="color: #81d4fa;">)</span> ch = <span style="color: #aadddd;">' '</span>;    len = len - str.length;    <span style="color: #aaffaa;">while</span> <span style="color: #81d4fa;">(</span>++i &lt; len<span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">{</span>        str = ch + str;    <span style="color: #81d4fa;">}</span>    <span style="color: #aaffaa;">return</span> str;<span style="color: #aadddd;">}</span></pre></div><p>而他的功能也很單純，就是將輸入的東西依據設定，進行 padding 的動作</p><div class="org-src-container"><pre class="src src-javascript"><span style="color: #aaffaa;">var</span> <span style="color: #aaccff;">leftpad</span> = require<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'left-pad'</span><span style="color: #aadddd;">)</span>leftpad<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'foo'</span>, 5<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">=&gt; "  foo"</span>leftpad<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'foobar'</span>, 6<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">=&gt; "foobar"</span>leftpad<span style="color: #aadddd;">(</span>1, 2, 0<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">=&gt; "01"</span></pre></div></div></div><div id="outline-container-org7229028" class="outline-2"><h2 id="org7229028">如何在 clojure 上實作</h2><div class="outline-text-2" id="text-org7229028"><p>那我們在 clojure 下要怎樣實作 leftpad 這函式的功能呢？實際上我們使用 <a href="https://clojuredocs.org/clojure.core/format" target="_blank" rel="external">clojure.core/format</a> 搭配一些字串的替代就可以辦到 (註: 參考自 <a href="http://beginnersbook.com/2014/07/java-left-padding-a-string-with-spaces-and-zeros/" target="_blank" rel="external">java – Left padding a String with Spaces and Zeros</a> 一文)</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">leftpad</span>  <span style="color: #97abc6; font-style: italic;">"If S is shorter than LEN, pad it with CH on the left."</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[</span>s len<span style="color: #aaccff;">]</span> <span style="color: #aaccff;">(</span>leftpad s len <span style="color: #aadddd;">" "</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[</span>s len ch<span style="color: #aaccff;">]</span>   <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaeecc;">(</span>format <span style="color: #ccaaff;">(</span>str <span style="color: #aadddd;">"%"</span> len <span style="color: #aadddd;">"s"</span><span style="color: #ccaaff;">)</span> <span style="color: #ccaaff;">(</span>str s<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>       <span style="color: #aaeecc;">(</span><span style="color: #fff59d;">clojure.string</span><span style="color: #c6cccc; background-color: #202020;">/</span>replace #<span style="color: #aadddd;">"</span><span style="color: #aadddd; font-weight: bold;">\s</span><span style="color: #aadddd;">"</span> <span style="color: #ccaaff;">(</span>str ch<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>leftpad 1 2 0<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; "01"</span></pre></div><p>當然像這樣用字串查找替代的方式很容易打死自己，此外，<a href="https://clojuredocs.org/clojure.core/format" target="_blank" rel="external">clojure.core/format</a> 因為 <a href="http://dev.clojure.org/jira/browse/CLJS-324" target="_blank" rel="external">CLJS-324 ISSUE</a> 的關係，目前是無法在 clojurescript 上使用的，因此我們應該考慮看看 clojure/clojurescript 都可以共用的 <a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">cl-format</a> 。</p></div></div><div id="outline-container-org0dad3ca" class="outline-2"><h2 id="org0dad3ca">如何在 clojurescript 上實作</h2><div class="outline-text-2" id="text-org0dad3ca"><p><a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">cl-format</a> 是移植自 common lisp 的 <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000%29" target="_blank" rel="external">format</a> 函式，是一種非常強大的字串格式化方式。具體範例在 <a href="http://www.gigamonkeys.com/book/a-few-format-recipes.html" target="_blank" rel="external">Praticle Common Lisp</a> 一書內文有提到，我們在這邊只注重如何透過 <a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">cl-format</a> 進行 padding:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>cl-format <span style="color: #ccaaff;">nil</span> <span style="color: #aadddd;">"~5,'qd"</span> <span style="color: #aadddd;">"hi"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; "qqqhi"</span><span style="color: #aadddd;">(</span>cl-format <span style="color: #ccaaff;">nil</span> <span style="color: #aadddd;">"~6,'0d"</span> 1<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; "000001"</span><span style="color: #aadddd;">(</span>cl-format <span style="color: #ccaaff;">nil</span> <span style="color: #aadddd;">"~7d"</span> 1<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt; "      1"</span></pre></div><p>了解了 <a href="https://clojuredocs.org/clojure.pprint/cl-format" target="_blank" rel="external">cl-format</a> 在 padding 功能上的使用，我們就可以透過它來製作 clojure/clojurescript 皆能使用的 <code>leftpad</code> 函式:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">coldnew.left-pad</span>  <span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:require</span> #?<span style="color: #aaccff;">(</span><span style="color: #ccaaff;">:clj</span>  <span style="color: #aaeecc;">[</span><span style="color: #fff59d;">clojure.pprint</span> <span style="color: #ccaaff;">:refer</span> <span style="color: #ccaaff;">[</span>cl-format<span style="color: #ccaaff;">]</span><span style="color: #aaeecc;">]</span>               <span style="color: #ccaaff;">:cljs</span> <span style="color: #aaeecc;">[</span><span style="color: #fff59d;">cljs.pprint</span>    <span style="color: #ccaaff;">:refer</span> <span style="color: #ccaaff;">[</span>cl-format<span style="color: #ccaaff;">]</span><span style="color: #aaeecc;">]</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">leftpad</span>  <span style="color: #97abc6; font-style: italic;">"If S is shorter than LEN, pad it with CH on the left."</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[</span>s len<span style="color: #aaccff;">]</span> <span style="color: #aaccff;">(</span>leftpad s len <span style="color: #aadddd;">" "</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaccff;">[</span>s len ch<span style="color: #aaccff;">]</span>   <span style="color: #aaccff;">(</span>cl-format <span style="color: #ccaaff;">nil</span> <span style="color: #aaeecc;">(</span>str <span style="color: #aadddd;">"~"</span> len <span style="color: #aadddd;">",'"</span> ch <span style="color: #aadddd;">"d"</span><span style="color: #aaeecc;">)</span> <span style="color: #aaeecc;">(</span>str s<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-org6b4e039" class="outline-2"><h2 id="org6b4e039">後記</h2><div class="outline-text-2" id="text-org6b4e039"><p>本文只是我看到了 <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/" target="_blank" rel="external">NPM &amp; left-pad: Have We Forgotten How To Program?</a> 這篇文章後，來確認一下我到底會不會寫程式之用，文內實作的 clojure/clojurescript 版本你可以在 <a href="https://github.com/coldnew/left-pad.clj" target="_blank" rel="external">coldnew/left-pad.clj</a> 這個專案看到。</p><p>如果你想看看 emacs-lisp 下要怎樣實作 leftpad 函式，則可以在 <a href="https://github.com/coldnew/left-pad.el" target="_blank" rel="external">coldnew/left-pad.el</a> 看到我實作的範例。</p><p>實際上 leftpad 的事件還衍生了另外一個問題: <code>套件是否可以這麼容易被下架?</code></p><p>在 Clojure 的世界中，我們會把我們的專案放置到 <a href="http://clojars.org/" target="_blank" rel="external">Clojars</a> 去，而在 <a href="http://clojars.org/" target="_blank" rel="external">Clojars</a> 則是這樣規定 <a href="https://github.com/clojars/clojars-web/wiki/About#how-do-i-delete-a-jar" target="_blank" rel="external">How do I delete a jar?</a></p><blockquote><p>Deletion of entire projects or particular versions is discouraged as you will break anyone's build that depends on the project or version. There is also a cost associated with deletion, as it requires an admin's time. If you're sure nobody is using your jar or absolutely must remove it open an issue against the Clojars GitHub project. If you need it done privately contact the server caretakers. Before doing so, push a new revision with "Delete me" in the description in order to prove you're the owner of the project.</p></blockquote><br><p><a href="http://clojars.org/" target="_blank" rel="external">Clojars</a> 的維護者是不太贊同開發者移除自己的套件的，我曾經要求 clojar 幫我移除一個以前誤上傳的套件 (請見 <a href="https://github.com/clojars/clojars-web/issues/391" target="_blank" rel="external">issue/391</a>)，也是花了好一段時間這個套件才真的被刪除，因此在 Clojure 世界中我們應該不太需要擔心有使用者下架套件這件事 :S。</p></div></div><div id="outline-container-org749f7b3" class="outline-2"><h2 id="org749f7b3">延伸閱讀</h2><div class="outline-text-2" id="text-org749f7b3"><p><code>[1]</code> <a href="http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/" target="_blank" rel="external">NPM &amp; left-pad: Have We Forgotten How To Program?</a></p><p><code>[2]</code> <a href="http://www.gigamonkeys.com/book/a-few-format-recipes.html" target="_blank" rel="external">Praticle Common Lisp - A Few FORMAT Recipes</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/7c811780/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Zephyr RTOS 開發記錄: Mac OSX 下 SDK 編譯</title>
      <link>https://coldnew.github.io/70ccebe8/</link>
      <guid>https://coldnew.github.io/70ccebe8/</guid>
      <pubDate>Mon, 29 Feb 2016 03:14:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在 &lt;a href=&quot;http://coldnew.github.io/blog/2016/02/21_zephyr/&quot;&gt;Zephyr RTOS 開發記錄: 基本環境建立&lt;/a&gt; 一文中提到了我們如何安裝 &lt;a href=&quot;https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/&quot;&gt;Zephyr SDK&lt;/a&gt; 到 Linux 系統來進行開發，那如果我想要在 Mac OSX 上面開發要怎麼辦呢？
&lt;/p&gt;

&lt;p&gt;
由於 &lt;a href=&quot;https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/&quot;&gt;Zephyr SDK&lt;/a&gt; 目前僅提供 Linux 的版本，因此在 Mac OSX 中我們必須自己透過 &lt;a href=&quot;http://crosstool-ng.org/&quot;&gt;crosstool-ng&lt;/a&gt; 去編譯我們自己的 SDK。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在 <a href="http://coldnew.github.io/blog/2016/02/21_zephyr/">Zephyr RTOS 開發記錄: 基本環境建立</a> 一文中提到了我們如何安裝 <a href="https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/" target="_blank" rel="external">Zephyr SDK</a> 到 Linux 系統來進行開發，那如果我想要在 Mac OSX 上面開發要怎麼辦呢？</p><p>由於 <a href="https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/" target="_blank" rel="external">Zephyr SDK</a> 目前僅提供 Linux 的版本，因此在 Mac OSX 中我們必須自己透過 <a href="http://crosstool-ng.org/" target="_blank" rel="external">crosstool-ng</a> 去編譯我們自己的 SDK。</p><a id="more"></a><div id="outline-container-orgd2bde7b" class="outline-2"><h2 id="orgd2bde7b">安裝依賴的相關套件</h2><div class="outline-text-2" id="text-orgd2bde7b"><p>第一步要做的，當然就是安裝相關套件啦，這點我們直接透過 <a href="http://brew.sh/" target="_blank" rel="external">homebrew</a> 來安裝</p><pre class="example">coldnew@MacOSX ~ $ brew install gettext qemu help2man mpfr gmp coreutils wget</pre><p>接下來我們要安裝 GNU 的 grep 命令來替代系統內建的 grep 命令</p><pre class="example">coldnew@MacOSX ~ $ brew tap homebrew/dupescoldnew@MacOSX ~ $ brew install grep --default-names</pre><p>接著，安裝我們需要用的程式: <a href="http://crosstool-ng.org/" target="_blank" rel="external">crosstool-ng</a></p><pre class="example">coldnew@MacOSX ~ $ brew install crosstool-ng</pre></div></div><div id="outline-container-org1418752" class="outline-2"><h2 id="org1418752">建立編譯環境</h2><div class="outline-text-2" id="text-org1418752"><p>安裝好 <a href="http://crosstool-ng.org/" target="_blank" rel="external">crosstool-ng</a> 後，我們需要建立一個 <code>Case Sensitive</code> 的 HFS+ 硬碟來讓 MacOSX 可以順利編譯，以下為我建立這顆硬碟所用的命令 (佔 10G 的硬碟空間)</p><div class="org-src-container"><pre class="src src-sh">hdiutil create -volname CrossToolNG -type SPARSE <span style="color: #aadddd;">\</span>        -fs <span style="color: #aadddd;">'Case-sensitive Journaled HFS+'</span> <span style="color: #aadddd;">\</span>        -size 10g CrossToolNG.sparseimage</pre></div><p>完成後，打開 <code>CrossToolNG.sparseimage</code> 這個映像檔，他會被掛載到 <code>/Volumes/CrossToolNG</code> 去</p><pre class="example">coldnew@MacOSX ~ $ open CrossToolNG.sparseimage</pre><p>接著我們就切換到 <code>/Volumes/CrossToolNG</code> 來準備進行我們的編譯，順便建立一個 <code>src</code> 資料夾讓 <a href="http://crosstool-ng.org/" target="_blank" rel="external">crosstool-ng</a> 存放他下載的原始碼</p><pre class="example">coldnew@MacOSX ~ $ cd /Volumes/CrossToolNG &amp;&amp; mkdir src</pre><p>我們先複製 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 裡面提供的設定檔到當前目錄</p><pre class="example">coldnew@MacOSX /Volumes/CrossToolNG $ cp ${ZEPHYR_BASE}/scripts/cross_compiler/x86.config .config</pre><p>如果你有什麼設定要修正的話，可以使用 <code>ct-ng menuconfig</code> 來進行修改</p><pre class="example">coldnew@MacOSX /Volumes/CrossToolNG $ ct-ng menuconfig</pre><div class="figure"><p><img src="menuconfig-osx.png"></p></div><p>另外，在進行編譯前要確認以下幾個設定是否和你編譯目錄 (/Volumes/CrossToolNG) 一致</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #aaccff;">CT_LOCAL_TARBALLS_DIR</span>=<span style="color: #aadddd;">"/Volumes/CrossToolNG/src"</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">CT_SAVE_TARBALLS is not set</span><span style="color: #aaccff;">CT_WORK_DIR</span>=<span style="color: #aadddd;">"${CT_TOP_DIR}/.build"</span><span style="color: #aaccff;">CT_PREFIX_DIR</span>=<span style="color: #aadddd;">"/Volumes/CrossToolNG/x-tools/${CT_TARGET}"</span><span style="color: #aaccff;">CT_INSTALL_DIR</span>=<span style="color: #aadddd;">"${CT_PREFIX_DIR}"</span></pre></div><p>都確認沒問題後，就開始我們的編譯吧 gogogo ~</p><pre class="example">coldnew@MacOSX /Volumes/CrossToolNG $ ct-ng build</pre><p>接著你可以去泡杯咖啡或出去走走，編譯工具鍊 (toolchain) 很花時間的</p></div></div><div id="outline-container-orga26ce4f" class="outline-2"><h2 id="orga26ce4f">設定編譯環境</h2><div class="outline-text-2" id="text-orga26ce4f"><p>完成編譯我們要的工具鍊 (toolchain) 後，我們可以在 <code>/Volumes/CrossToolNG</code> 看到以下的資料夾，其中 <code>x-tools</code> 就是我們編譯出來的結果</p><pre class="example">coldnew@MacOSX /Volumes/CrossToolNG $ tree -L 1.. &lt;b&gt;├── build.log &lt;g&gt;├── config -&gt; /usr/local/Cellar/crosstool-ng/1.22.0/lib/crosstool-ng-1.22.0/config &lt;lb&gt;├── config.gen &lt;b&gt;├── src &lt;b&gt;└── x-tools &lt;b&gt;4 directories, 1 file</pre><p>最後，在你的 <code>~/.zephyrrc</code> 設定這些環境變數就可以去嘗試編譯你的 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr kernel</a> 看看囉 ~</p><div class="org-src-container"><pre class="src src-sh">coldnew@MacOSX ~ $ vim ~/.zephyrrc<span style="color: #ccaaff;">export</span> <span style="color: #aaccff;">XTOOLS_TOOLCHAIN_PATH</span>=/Volumes/CrossToolNG/x-tools<span style="color: #ccaaff;">export</span> <span style="color: #aaccff;">ZEPHYR_SDK_INSTALL_DIR</span>=$<span style="color: #aadddd;">{</span><span style="color: #aaccff;">XTOOLS_TOOLCHAIN_PATH</span><span style="color: #aadddd;">}</span><span style="color: #ccaaff;">export</span> <span style="color: #aaccff;">ZEPHYR_GCC_VARIANT</span>=xtools</pre></div></div></div><div id="outline-container-org3781a6c" class="outline-2"><h2 id="org3781a6c">可能會遇到的錯誤</h2><div class="outline-text-2" id="text-org3781a6c"><p>在 Mac OSX 下編譯非 Apple 官方的東西常常會出現一堆奇怪的錯誤，有時是因為 XCode 的改動，有時是因為你透過 <a href="http://brew.sh/" target="_blank" rel="external">homebrew</a> 安裝了其他命令和 Mac OSX 內建的有衝突。</p><p>下面紀錄我在這次編譯遇到的錯誤:</p></div><div id="outline-container-orgabed34b" class="outline-3"><h3 id="orgabed34b">stat: cannot read file system information for '%Lp'</h3><div class="outline-text-3" id="text-orgabed34b"><p>如果你遇到了這個問題，哪很有可能是因為你的系統同時也裝了 <a href="http://www.gnu.org/software/coreutils/coreutils.html" target="_blank" rel="external">GNU coreutils</a> 導致 <a href="http://crosstool-ng.org/" target="_blank" rel="external">crosstool-ng</a> 調用的命令是 GNU 的 <code>stat</code> 命令，而不是系統內建的 stat 命令。</p><pre class="example">[INFO ]  Performing some trivial sanity checks[INFO ]  Build started 20160229.010627[INFO ]  Building environment variables[EXTRA]  Preparing working directories[00:01] / stat: cannot read file system information for '%Lp': No such file or directory[ERROR][ERROR]  &gt;&gt;[ERROR]  &gt;&gt;  Build failed in step '(top-level)'[ERROR]  &gt;&gt;[ERROR]  &gt;&gt;  Error happened in: CT_DoForceRmdir[scripts/functions@460][ERROR]  &gt;&gt;        called from: main[scripts/crosstool-NG.sh@238][ERROR]  &gt;&gt;[ERROR]  &gt;&gt;  For more info on this error, look at the file: 'build.log'[ERROR]  &gt;&gt;  There is a list of known issues, some with workarounds, in:[ERROR]  &gt;&gt;      '/usr/local/Cellar/crosstool-ng/1.22.0/share/doc/crosstool-ng/crosstool-ng-1.22.0/B - Known issues.txt'[ERROR][ERROR]  (elapsed: 0:00.70)[00:01] / make: *** [build] Error 1</pre><p>我們可以透過 <code>which</code> 命令去檢查是否真的用到  <a href="http://www.gnu.org/software/coreutils/coreutils.html" target="_blank" rel="external">GNU coreutils</a> 的 <code>stat</code> 命令</p><pre class="example">coldnew@MacOSX ~ $ which stat/usr/local/opt/coreutils/libexec/gnubin/stat</pre><p>我自己由於不常用 <i>stat</i> 命令，所以選擇移除已經編譯好的 stat 連結，改用系統內建的 <i>stat</i></p><pre class="example">coldnew@MacOSX ~ $ rm /usr/local/opt/coreutils/libexec/gnubin/stat</pre><p><a href="http://crosstool-ng.org/" target="_blank" rel="external">crosstool-ng</a> 要找的 <i>stat</i> 則是在 <code>/usr/bin</code> 下</p><pre class="example">coldnew@MacOSX ~ $ which stat/usr/bin/stat</pre></div></div><div id="outline-container-org4b44215" class="outline-3"><h3 id="org4b44215">ld: library not found for -lcrt0.o</h3><div class="outline-text-3" id="text-org4b44215"><p><a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 提供的 <code>.config</code> 有打開靜態連結 (static link) 相關的設定，於是你會遇到這樣的狀況，解法參考 <a href="https://github.com/crosstool-ng/crosstool-ng/issues/31" target="_blank" rel="external">issue #31</a> 移除 static link 相關設定。</p><pre class="example">[INFO ]  Performing some trivial sanity checks[INFO ]  Build started 20160229.011000[INFO ]  Building environment variables[EXTRA]  Preparing working directories[ERROR]    clang: error: linker command failed with exit code 1 (use -v to see invocation)[ERROR][ERROR]  &gt;&gt;[ERROR]  &gt;&gt;  Build failed in step 'Checking that gcc can compile a trivial statically linked program (CT_WANTS_STATIC_LINK)'[ERROR]  &gt;&gt;        called in step '(top-level)'[ERROR]  &gt;&gt;[ERROR]  &gt;&gt;  Error happened in: CT_DoExecLog[scripts/functions@216][ERROR]  &gt;&gt;        called from: main[scripts/crosstool-NG.sh@554][ERROR]  &gt;&gt;[ERROR]  &gt;&gt;  For more info on this error, look at the file: 'build.log'[ERROR]  &gt;&gt;  There is a list of known issues, some with workarounds, in:[ERROR]  &gt;&gt;      '/usr/local/Cellar/crosstool-ng/1.22.0/share/doc/crosstool-ng/crosstool-ng-1.22.0/B - Known issues.txt'[ERROR][ERROR]  (elapsed: 0:03.48)[00:05] / make: *** [build] Error 1</pre><p>我自己是將 <code>.config</code> 裡面這兩個靜態連結 (static link) 相關的函式庫設定為取消後就可以正常編譯囉~</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #aaccff;">CT_WANTS_STATIC_LINK</span>=n<span style="color: #aaccff;">CT_CC_GCC_STATIC_LIBSTDCXX</span>=n</pre></div></div></div></div><div id="outline-container-org202cc4d" class="outline-2"><h2 id="org202cc4d">延伸閱讀</h2><div class="outline-text-2" id="text-org202cc4d"><p><code>[1]</code> <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr Project Website</a></p><p><code>[2]</code> <a href="http://linuxgizmos.com/zephyr-a-tiny-open-source-iot-rtos/" target="_blank" rel="external">Meet Linux's little brother: Zephyr, a tiny open-source IoT RTOS</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/70ccebe8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Zephyr RTOS 開發記錄: 基本環境建立</title>
      <link>https://coldnew.github.io/7f7c0c84/</link>
      <guid>https://coldnew.github.io/7f7c0c84/</guid>
      <pubDate>Sun, 28 Feb 2016 11:21:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
&lt;a href=&quot;https://www.zephyrproject.org/&quot;&gt;Zephyr&lt;/a&gt; 是 Linux 基金會最近發佈的即時作業系統 (RTOS) 項目，主要用於物聯網以及 IOT 設備，其前身為 &lt;a href=&quot;http://www.windriver.com/&quot;&gt;Wind River&lt;/a&gt; 的 &lt;a href=&quot;http://www.windriver.com/products/operating-systems/rocket/&quot;&gt;Rocket RTOS&lt;/a&gt;。和 Linux Kernel 不同的是，&lt;a href=&quot;https://www.zephyrproject.org/&quot;&gt;Zephyr&lt;/a&gt; 原始碼採用的是 &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache-2.0&lt;/a&gt; 授權。
&lt;/p&gt;

&lt;p&gt;
關於更多 &lt;a href=&quot;https://www.zephyrproject.org/&quot;&gt;Zephyr&lt;/a&gt; 相關資訊，請參考 Linux 基金會的 &lt;a href=&quot;https://www.zephyrproject.org/&quot;&gt;專案網站&lt;/a&gt; 或是 &lt;a href=&quot;http://linuxgizmos.com/zephyr-a-tiny-open-source-iot-rtos/&quot;&gt;LinuxGizmos.com 的報導&lt;/a&gt; 。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 是 Linux 基金會最近發佈的即時作業系統 (RTOS) 項目，主要用於物聯網以及 IOT 設備，其前身為 <a href="http://www.windriver.com/" target="_blank" rel="external">Wind River</a> 的 <a href="http://www.windriver.com/products/operating-systems/rocket/" target="_blank" rel="external">Rocket RTOS</a>。和 Linux Kernel 不同的是，<a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 原始碼採用的是 <a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache-2.0</a> 授權。</p><p>關於更多 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 相關資訊，請參考 Linux 基金會的 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">專案網站</a> 或是 <a href="http://linuxgizmos.com/zephyr-a-tiny-open-source-iot-rtos/" target="_blank" rel="external">LinuxGizmos.com 的報導</a> 。</p><a id="more"></a><p>本文只是記錄我試玩 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 的一些資訊。</p><div id="outline-container-org9dc259a" class="outline-2"><h2 id="org9dc259a">支援的開發版與平台</h2><div class="outline-text-2" id="text-org9dc259a"><p>在撰寫這篇文章時，<a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 共支援以下目標與平台: (很可惜這邊列的板子我半片都沒有 Orz&#x2026;)</p><ul class="org-ul"><li>x86 指令集<ul class="org-ul"><li><a href="https://www.zephyrproject.org/doc/board/arduino_101.html" target="_blank" rel="external">Arduino 101</a></li><li><a href="https://www.zephyrproject.org/doc/board/quark_d2000_crb.html" target="_blank" rel="external">Quark D2000 CRB</a></li><li><a href="https://www.zephyrproject.org/doc/board/galileo.html" target="_blank" rel="external">Galileo Gen1/Gen2</a></li><li><a href="https://www.zephyrproject.org/doc/board/minnowboard.html" target="_blank" rel="external">Minnowboard Max</a></li><li><a href="https://www.zephyrproject.org/doc/board/qemu_x86.html" target="_blank" rel="external">x86 Emulation (QEMU)</a></li></ul></li><li>ARM (v7-M 以及 v7E-M) 指令集<ul class="org-ul"><li><a href="https://www.zephyrproject.org/doc/board/qemu_cortex_m3.html" target="_blank" rel="external">ARM Cortex-M3 Emulation (QEMU)</a></li><li><a href="https://www.zephyrproject.org/doc/board/arduino_due.html" target="_blank" rel="external">Arduino Due</a></li><li><a href="https://www.zephyrproject.org/doc/board/frdm_k64f.html" target="_blank" rel="external">Freescale FRDM-K64F</a></li></ul></li><li>ARC EM4 指令集<ul class="org-ul"><li><a href="https://www.zephyrproject.org/doc/board/arduino_101.html" target="_blank" rel="external">Arduino 101</a></li></ul></li></ul></div></div><div id="outline-container-org7290eb4" class="outline-2"><h2 id="org7290eb4">取得 Zephyr kernel 原始碼與 SDK</h2><div class="outline-text-2" id="text-org7290eb4"><p><a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 原始碼採用 <i>git</i> 託管在 <a href="https://gerrit.zephyrproject.org/r/zephyr" target="_blank" rel="external">https://gerrit.zephyrproject.org/r/zephyr</a> 這網站，我們可以用以下方式取得 <i>v1.0.0</i> 原始碼。</p><pre class="example">coldnew@Gentoo ~ $ git clone https://gerrit.zephyrproject.org/r/zephyr --branch v1.0.0</pre><p>除了原始碼以外，我們還需要下載 <a href="https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/" target="_blank" rel="external">Zephyr SDK</a> ，裡面包含了不同平台編譯用的工具包 (toolchain)</p><pre class="example">coldnew@Gentoo ~ $ wget https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/0.7.2-i686/zephyr-sdk-0.7.2-i686-setup.run</pre></div><div id="outline-container-orgc43159f" class="outline-3"><h3 id="orgc43159f">安裝 SDK 前置作業</h3><div class="outline-text-3" id="text-orgc43159f"><p>除了下載 SDK 外，不同發行版的 Linux 還需要安裝一些 x86 函式庫來使用這份 SDK，具體請參照 <a href="https://www.zephyrproject.org/doc/getting_started/installation_linux.html" target="_blank" rel="external">Development Environment Setup on Linux</a> 一文，由於本人的 <i>Gentoo Linux</i> 運作良好，這邊就不贅述。</p></div></div><div id="outline-container-orge7fb046" class="outline-3"><h3 id="orge7fb046">安裝 SDK</h3><div class="outline-text-3" id="text-orge7fb046"><p>取得 SDK 後，先將它加上可執行權限</p><pre class="example">coldnew@Gentoo ~ $ chmod +x zephyr-sdk-0.7.2-i686-setup.run</pre><p>接下來將它裝到 <code>/opt/zephyr</code> 去 (註：在我的系統中，我的帳戶具有 <code>/opt</code> 資料夾的讀寫權限，一般情況下安裝到 <code>/opt</code> 需要使用 <code>sudo</code> 來安裝)</p><pre class="example">coldnew@Gentoo ~ $ ./zephyr-sdk-0.7.2-i686-setup.runVerifying archive integrity... All good.Uncompressing SDK for Zephyr  100%Enter target directory for SDK (default: /opt/zephyr-sdk/):Installing SDK to /opt/zephyr-sdkThe existing directory /opt/zephyr-sdk will be removed!Do you want to continue (y/n)? [*] Installing x86 tools... [*] Installing arm tools... [*] Installing arc tools... [*] Installing iamcu tools... [*] Installing mips tools... [*] Installing additional host tools...Success installing SDK. SDK is ready to be used.</pre><p>安裝完成後，我們可以到 <code>/opt/zephyr</code> 看這份 SDK 包含了哪些東西</p><pre class="example">coldnew@Gentoo /opt/zephyr-sdk $ tree -L 2 .. &lt;b&gt;├── sysroots &lt;b&gt;│   ├── arc-poky-elf &lt;b&gt;│   ├── armv5-poky-eabi &lt;b&gt;│   ├── i586-poky-elf &lt;b&gt;│   ├── i686-pokysdk-linux &lt;b&gt;│   ├── iamcu-poky-elfiamcu &lt;b&gt;│   └── mips32r2-poky-elf &lt;b&gt;├── version-arc-poky-elf├── version-armv5-poky-eabi├── version-i586-poky-elf├── version-i686-pokysdk-linux├── version-iamcu-poky-elfiamcu└── version-mips32r2-poky-elf7 directories, 6 files</pre></div></div><div id="outline-container-orgd52dfb4" class="outline-3"><h3 id="orgd52dfb4">設定 SDK</h3><div class="outline-text-3" id="text-orgd52dfb4"><p>安裝完 <a href="https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/" target="_blank" rel="external">Zephyr SDK</a> 後，我們可以設定以下環境變數來讓我們當前的 shell 可以使用這份 SDK</p><div class="org-src-container"><pre class="src src-sh">coldnew@Gentoo ~ $ export <span style="color: #aaccff;">ZEPHYR_GCC_VARIANT</span>=zephyrcoldnew@Gentoo ~ $ export <span style="color: #aaccff;">ZEPHYR_SDK_INSTALL_DIR</span>=/opt/zephyr-sdk</pre></div><p>當然每次要編譯 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 時都要重新設定環境變數很麻煩，因此我們可以將他寫到 <code>~/.zephyrrc</code> 去</p><pre class="example">coldnew@Gentoo ~ $ cat &lt;&lt;EOF &gt; ~/.zephyrrcexport ZEPHYR_GCC_VARIANT=zephyrexport ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdkEOF</pre></div></div></div><div id="outline-container-org118ded5" class="outline-2"><h2 id="org118ded5">Hello World (x86 QEMU)</h2><div class="outline-text-2" id="text-org118ded5"><p>完成 <a href="https://nexus.zephyrproject.org/content/repositories/releases/org/zephyrproject/zephyr-sdk/" target="_blank" rel="external">Zephyr SDK</a> 的設定與安裝後，讓我們測試第一個範例程式 <i>Hello World</i> ，顧名思義就是會在虛擬機中顯示 <i>Hello World</i> 出來。</p><p>不過我們要先讓當前 shell 取得合適的開發環境變數，先來 <code>source zephyr-env.sh</code> 一下:</p><pre class="example">coldnew@Gentoo ~/zephyr $ source zephyr-env.sh</pre><p>接著切換到 <code>samples/hello_world/microkernel</code> 去</p><pre class="example">coldnew@Gentoo ~/zephyr $ cd samples/hello_world/microkernelcoldnew@Gentoo ~/zephyr/samples/hello_world/microkernel $ tree -L 2 .. &lt;b&gt;├── Makefile├── prj.conf├── prj.mdef├── README.txt &lt;g&gt;└── src &lt;b&gt;    ├── main.c    └── Makefile1 directory, 6 files</pre><p>我們測試的目標是 <code>QEMU</code> ，因此直接 <code>make qemu</code> 即可看到 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 編譯到 x86 環境下並運行的狀況</p><div class="org-src-container"><pre class="src src-sh">coldnew@Gentoo ~/zephyr/samples/hello_world/microkernel $ make qemumake<span style="color: #aadddd;">[</span>1<span style="color: #aadddd;">]</span>: Entering directory <span style="color: #aadddd;">'/home/coldnew/zephyr'</span>make<span style="color: #aadddd;">[</span>2<span style="color: #aadddd;">]</span>: Entering directory <span style="color: #aadddd;">'/home/coldnew/zephyr/samples/hello_world/microkernel/outdir'</span>  Using /home/coldnew/zephyr as source for kernel  GEN     ./Makefile  CHK     include/generated/version.h  CHK     misc/generated/configs.c  CHK     include/generated/offsets.h  CHK     misc/generated/sysgen/prj.mdefTo exit from QEMU enter: <span style="color: #aadddd;">'CTRL+a, x'</span><span style="color: #aadddd;">[</span>QEMU<span style="color: #aadddd;">]</span> CPU: qemu32qemu-system-i386: pci_add_option_rom: failed to find romfile <span style="color: #aadddd;">"vgabios-cirrus.bin"</span>Hello World!</pre></div><p>如果你看膩了這個結果，可以使用 <code>C-a x</code> 離開 <i>QEMU</i> 模擬。</p><p>一旦經過了編譯，你可以看到會多出一個 <code>outdir</code> 用來存放著編譯後的物件檔。</p><pre class="example">coldnew@Gentoo ~/zephyr/samples/hello_world/microkernel $ lsMakefile  outdir&lt;b&gt;  prj.conf  prj.mdef  README.txt&lt;g&gt;  src</pre><p>這個 <code>outdir</code> 是可以透過 <code>make</code> 系列命令清除乾淨的，我們也可以在 <code>make help</code> 看到如何清除專案的物件檔。</p><pre class="example">coldnew@Gentoo ~/zephyr/samples/hello_world/microkernel $ make helpCleaning targets:  clean           - Remove most generated files but keep configuration and backup files  mrproper        - Remove all generated files + config + various backup files  distclean       - mrproper + remove editor backup and patch files  pristine        - Remove the output directory with all generated filesskip...</pre><p>此外， <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 也支援 <code>make menuconfig</code> ，我們可以在選單直接選取我們的目標。</p><pre class="example">coldnew@Gentoo ~/zephyr/samples/hello_world/microkernel $ make menuconfig</pre><div class="figure"><p><img src="menuconfig.png"></p></div></div></div><div id="outline-container-org0a77c40" class="outline-2"><h2 id="org0a77c40">Hello World (arm QEMU)</h2><div class="outline-text-2" id="text-org0a77c40"><p>我們接下來試試 <i>Hello World</i> 運作在 ARM Cortex-M3 的 QEMU 的情況，了解更多後說不定我們就可以自己將 <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr</a> 移植到 STM32 平台，或是其他手中有的開發版環境去。</p><p>一樣切換到 <code>samples/hello_world/microkernel</code> 去，如果剛剛已經編譯過 x86 版本的話，要記得將 <code>outdir</code> 清乾淨</p><pre class="example">coldnew@Gentoo ~/zephyr/samples/hello_world/microkernel $ make distclean</pre><p>接下來編譯的時候指定目標端為 <code>qemu_cortex_m3</code> 並且 <code>ARCH=arm</code></p><div class="org-src-container"><pre class="src src-sh">coldnew@Gentoo ~/zephyr/samples/hello_world/microkernel $ make <span style="color: #aaccff;">BOARD</span>=qemu_cortex_m3 <span style="color: #aaccff;">ARCH</span>=arm qemumake<span style="color: #aadddd;">[</span>1<span style="color: #aadddd;">]</span>: Entering directory <span style="color: #aadddd;">'/home/coldnew/zephyr'</span>make<span style="color: #aadddd;">[</span>2<span style="color: #aadddd;">]</span>: Entering directory <span style="color: #aadddd;">'/home/coldnew/zephyr/samples/hello_world/microkernel/outdir'</span>  Using /tmp/zephyr-project-fork as source for kernel  GEN     ./Makefile  CHK     include/generated/version.h  CHK     misc/generated/configs.c  CHK     include/generated/offsets.h  CHK     misc/generated/sysgen/prj.mdefTo exit from QEMU enter: <span style="color: #aadddd;">'CTRL+a, x'</span><span style="color: #aadddd;">[</span>QEMU<span style="color: #aadddd;">]</span> CPU: cortex-m3Hello World!</pre></div><p>要離開的話，一樣是使用 <code>C-a x</code> 來離開 <i>QEMU</i></p><p>由於編譯出來的執行檔會出現在 <code>outdir</code> ，因此我們可以在 <code>outdir</code> 裡面找到編譯出來的 ELF 檔以及二進制文件，預設這些東西皆是以 <code>zephyr.*</code> 來命名。</p><pre class="example">coldnew@Gentoo ~/zephyr/samples/hello_world/microkernel/outdir $ ls zephyr.*zephyr.bin&lt;g&gt;  zephyr.elf&lt;g&gt;  zephyr.lnk  zephyr.lst  zephyr.map  zephyr.strip&lt;g&gt;</pre></div></div><div id="outline-container-org51579a3" class="outline-2"><h2 id="org51579a3">延伸閱讀</h2><div class="outline-text-2" id="text-org51579a3"><p><code>[1]</code> <a href="https://www.zephyrproject.org/" target="_blank" rel="external">Zephyr Project Website</a></p><p><code>[2]</code> <a href="http://linuxgizmos.com/zephyr-a-tiny-open-source-iot-rtos/" target="_blank" rel="external">Meet Linux's little brother: Zephyr, a tiny open-source IoT RTOS</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/7f7c0c84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 Clojure 擷取台灣銀行牌告匯率</title>
      <link>https://coldnew.github.io/c8ce3cdb/</link>
      <guid>https://coldnew.github.io/c8ce3cdb/</guid>
      <pubDate>Fri, 26 Feb 2016 05:49:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
最近開始在看理財相關的資訊，畢竟錢一直存著也只是存著，剛好看到了 &lt;a href=&quot;http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm&quot;&gt;台灣銀行牌告匯率&lt;/a&gt; 的訊息，就讓我們用 Clojure 來寫一個 parser 將這個 HTML 網頁轉換成 Clojure 常用的 &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;edn&lt;/a&gt; 格式吧。
&lt;/p&gt;

&lt;p&gt;
本文將簡述如何透過 &lt;a href=&quot;https://github.com/dakrone/clj-http&quot;&gt;clj-http&lt;/a&gt; 取得 &lt;a href=&quot;http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm&quot;&gt;台灣銀行牌告匯率&lt;/a&gt; 資訊後，再使用 &lt;a href=&quot;https://github.com/davidsantiago/hickory&quot;&gt;hickory&lt;/a&gt; 對取得網頁的資料進行處理，最後回傳 &lt;a href=&quot;https://github.com/edn-format/edn&quot;&gt;edn&lt;/a&gt; 格式好方便我們未來的 Clojure 程式可以對這些訊息進行處理。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近開始在看理財相關的資訊，畢竟錢一直存著也只是存著，剛好看到了 <a href="http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm" target="_blank" rel="external">台灣銀行牌告匯率</a> 的訊息，就讓我們用 Clojure 來寫一個 parser 將這個 HTML 網頁轉換成 Clojure 常用的 <a href="https://github.com/edn-format/edn" target="_blank" rel="external">edn</a> 格式吧。</p><p>本文將簡述如何透過 <a href="https://github.com/dakrone/clj-http" target="_blank" rel="external">clj-http</a> 取得 <a href="http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm" target="_blank" rel="external">台灣銀行牌告匯率</a> 資訊後，再使用 <a href="https://github.com/davidsantiago/hickory" target="_blank" rel="external">hickory</a> 對取得網頁的資料進行處理，最後回傳 <a href="https://github.com/edn-format/edn" target="_blank" rel="external">edn</a> 格式好方便我們未來的 Clojure 程式可以對這些訊息進行處理。</p><a id="more"></a><div id="outline-container-org94edfe8" class="outline-2"><h2 id="org94edfe8">設定我們的目標</h2><div class="outline-text-2" id="text-org94edfe8"><p>在開始寫程式前，先來確立我們的目標。我們希望取得 <a href="http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm" target="_blank" rel="external">台灣銀行牌告匯率</a> 的資訊，並將下圖裡面的資料轉換成 Clojure 的 <a href="https://github.com/edn-format/edn" target="_blank" rel="external">edn</a> 格式。</p><div class="figure"><p><img src="twbank.png"></p></div><p>因此最後我們希望可以得到這樣的結果:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:url</span> <span style="color: #aadddd;">"http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm"</span>, <span style="color: #ccaaff;">:date</span> <span style="color: #aadddd;">"2016/02/25 16:00"</span>, <span style="color: #ccaaff;">:count</span> 19, <span style="color: #ccaaff;">:results</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:USD</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#32654;&#37329; (USD)"</span>,                 <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"32.92500"</span>,                 <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"33.46700"</span>,                 <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"33.22500"</span>,                 <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"33.32500"</span><span style="color: #aaccff;">}</span>,           <span style="color: #ccaaff;">:EUR</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#27472;&#20803; (EUR)"</span>,                 <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"35.99000"</span>,                 <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"37.13000"</span>,                 <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"36.47000"</span>,                 <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"36.87000"</span><span style="color: #aaccff;">}</span>,           <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span>           <span style="color: #ccaaff;">:PHP</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#33778;&#22283;&#27604;&#32034; (PHP)"</span>,                 <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"0.64980"</span>,                 <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"0.78250"</span>,                 <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"-"</span>,                 <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"-"</span><span style="color: #aaccff;">}</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">}</span></pre></div></div></div><div id="outline-container-orgdc9b542" class="outline-2"><h2 id="orgdc9b542">建立我們的專案</h2><div class="outline-text-2" id="text-orgdc9b542"><p>首先我們先透過 <a href="http://leiningen.org/" target="_blank" rel="external">leinigen</a> 產生我們 Clojure 專案的基本樣板，這邊命名該專案為 <code>twbank-forex</code></p><pre class="example">coldnew@Rosia ~ $ lein new twbank-forex</pre><p>專案建立完成後，我們要稍微修改一下 <i>project.clj</i> 添加 <a href="https://github.com/davidsantiago/hickory" target="_blank" rel="external">hickory</a> 以及 <a href="https://github.com/dakrone/clj-http" target="_blank" rel="external">clj-http</a> 這兩個函式庫。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defproject</span> <span style="color: #aaccff;">twbank-forex</span> <span style="color: #aadddd;">"0.1.0-SNAPSHOT"</span>  <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span>  <span style="color: #ccaaff;">:dependencies</span> <span style="color: #81d4fa;">[</span><span style="color: #aaccff;">[</span><span style="color: #fff59d;">org.clojure</span><span style="color: #c6cccc; background-color: #202020;">/</span>clojure <span style="color: #aadddd;">"1.8.0"</span><span style="color: #aaccff;">]</span>                 <span style="color: #aaccff;">[</span>hickory <span style="color: #aadddd;">"0.6.0"</span><span style="color: #aaccff;">]</span>                 <span style="color: #aaccff;">[</span>clj-http <span style="color: #aadddd;">"2.1.0"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span>  <span style="color: #ccaaff;">:main</span> <span style="color: #fff59d;">twbank-forex.core</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-orge5078e3" class="outline-2"><h2 id="orge5078e3">開始我們的程式</h2><div class="outline-text-2" id="text-orge5078e3"><p>就讓我們來開始我們的專案吧，首先編輯 <code>src/twbank_forex/core.clj</code> 這個檔案，並添加一些我們需要的函式庫資訊:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">twbank-forex.core</span>  <span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:require</span> <span style="color: #aaccff;">[</span><span style="color: #fff59d;">clj-http.client</span> <span style="color: #ccaaff;">:as</span> http<span style="color: #aaccff;">]</span>            <span style="color: #aaccff;">[</span><span style="color: #fff59d;">hickory.core</span>    <span style="color: #ccaaff;">:as</span> hickory<span style="color: #aaccff;">]</span>            <span style="color: #aaccff;">[</span><span style="color: #fff59d;">hickory.select</span>  <span style="color: #ccaaff;">:as</span> s<span style="color: #aaccff;">]</span>            <span style="color: #aaccff;">[</span><span style="color: #fff59d;">clojure.string</span>  <span style="color: #ccaaff;">:as</span> str<span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>由於我們要分析的目標是 <a href="http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm" target="_blank" rel="external">台灣銀行牌告匯率</a> 這個網頁，因此先設立一個全域變數，其內容存放我們想要分析的網址</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">The webpage we want to parse</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">def</span> ^<span style="color: #ccaaff;">:private</span>  <span style="color: #aaccff;">twbank-url</span> <span style="color: #97abc6; font-style: italic;">"http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm"</span><span style="color: #aadddd;">)</span></pre></div><p>接著，讓我們一步一步來實作</p></div><div id="outline-container-org9e695ef" class="outline-3"><h3 id="org9e695ef">取得網頁內容</h3><div class="outline-text-3" id="text-org9e695ef"><p>我們的目的是下載 <a href="http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm" target="_blank" rel="external">台灣銀行牌告匯率</a> 網頁內容並進行解析，因此我們可以透過 <a href="https://github.com/dakrone/clj-http" target="_blank" rel="external">clj-http</a> 來處理這件事</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">http</span><span style="color: #c6cccc; background-color: #202020;">/</span>get twbank-url<span style="color: #aadddd;">)</span></pre></div><p>如果你的網路連得上我們的目標網址的話，你會得到如下的回應</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:status</span> 200, <span style="color: #ccaaff;">:headers</span> <span style="color: #81d4fa;">{</span><span style="color: #aadddd;">"Server"</span> <span style="color: #aadddd;">"Microsoft-IIS/8.5"</span>,           <span style="color: #aadddd;">"Content-Type"</span> <span style="color: #aadddd;">"text/html"</span>,           <span style="color: #aadddd;">"Content-Length"</span> <span style="color: #aadddd;">"3664"</span>,           <span style="color: #aadddd;">"Connection"</span> <span style="color: #aadddd;">"close"</span>,           <span style="color: #aadddd;">"Accept-Ranges"</span> <span style="color: #aadddd;">"bytes"</span>,           <span style="color: #aadddd;">"ETag"</span> <span style="color: #aadddd;">"W/</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">809337e3b70d11:0</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">"</span>,           <span style="color: #aadddd;">"Date"</span> <span style="color: #aadddd;">"Fri, 26 Feb 2016 02:23:39 GMT"</span>,           <span style="color: #aadddd;">"Vary"</span> <span style="color: #aadddd;">"Accept-Encoding"</span>,           <span style="color: #aadddd;">"Last-Modified"</span> <span style="color: #aadddd;">"Fri, 26 Feb 2016 02:14:59 GMT"</span>,           <span style="color: #aadddd;">"X-Powered-By"</span> <span style="color: #aadddd;">"ASP.NET"</span><span style="color: #81d4fa;">}</span>, <span style="color: #ccaaff;">:body</span> <span style="color: #aadddd;">"&#65279;</span><span style="color: #aadddd; font-weight: bold;">\r\n\r\n</span><span style="color: #aadddd;">&lt;!DOCTYPE html PUBLIC </span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">-//W3C//DTD XHTML 1.0 Transitional//EN</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> </span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">&gt;</span><span style="color: #aadddd; font-weight: bold;">\r\n\r\n</span><span style="color: #aadddd;">&lt;html xmlns=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">http://www.w3.org/1999/xhtml</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">&gt;</span><span style="color: #aadddd; font-weight: bold;">\r\n</span><span style="color: #aadddd;">&lt;head&gt;&lt;link href=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">../../App_Themes/Builtin/Default.css</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> type=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">text/css</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> rel=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">stylesheet</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> /&gt;&lt;meta http-equiv=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">Content-Type</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> content=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">text/html;charset=utf-8</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> /&gt;&lt;title&gt;</span><span style="color: #aadddd; font-weight: bold;">\r\n\t</span><span style="color: #aadddd;"> &#33274;&#28771;&#37504;&#34892;&#29260;&#21578;&#21295;&#29575;</span><span style="color: #aadddd; font-weight: bold;">\r\n</span><span style="color: #aadddd;">&lt;/title&gt;</span><span style="color: #aadddd; font-weight: bold;">\r\n</span><span style="color: #aadddd;"> "</span>, <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ....</span> <span style="color: #ccaaff;">:request-time</span> 227, <span style="color: #ccaaff;">:trace-redirects</span> <span style="color: #81d4fa;">[</span><span style="color: #aadddd;">"http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm"</span><span style="color: #81d4fa;">]</span>, <span style="color: #ccaaff;">:orig-content-encoding</span> <span style="color: #aadddd;">"gzip"</span>, <span style="color: #ccaaff;">:cookies</span> <span style="color: #81d4fa;">{</span><span style="color: #aadddd;">"BankOfTaiwanCookie"</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:discard</span> <span style="color: #ccaaff;">false</span>,                                 <span style="color: #ccaaff;">:expires</span> #inst <span style="color: #aadddd;">"2016-02-26T05:23:42.000-00:00"</span>,                                 <span style="color: #ccaaff;">:path</span> <span style="color: #aadddd;">"/"</span>,                                 <span style="color: #ccaaff;">:secure</span> <span style="color: #ccaaff;">false</span>,                                 <span style="color: #ccaaff;">:value</span> <span style="color: #aadddd;">"352626880.20480.0000"</span>,                                 <span style="color: #ccaaff;">:version</span> 0<span style="color: #aaccff;">}</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">}</span></pre></div><p>由上面的回應來看，我們可以發現網頁的 <i>內容</i> 是存放在 <code>:body</code> 裡面，而在本例中我們只需要取得網頁內容即可，因此可以這樣建立取得網頁內容的函式</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">fetch-html</span> <span style="color: #81d4fa;">[]</span>  <span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:body</span> <span style="color: #aaccff;">(</span><span style="color: #fff59d;">http</span><span style="color: #c6cccc; background-color: #202020;">/</span>get twbank-url<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-orgbefa3f8" class="outline-3"><h3 id="orgbefa3f8">取得最新掛牌時間</h3><div class="outline-text-3" id="text-orgbefa3f8"><p>取得網頁內容後，我們可以來查找這個網頁的掛牌時間，從網頁上來看就是這個</p><div class="figure"><p><img src="twbank-date.png"></p></div><p>因此使用瀏覽器查看原始碼時，你可以找到這樣的訊息</p><div class="figure"><p><img src="twbank-date1.png"></p></div><p>也就是說，我們只要針對關鍵字 <code>牌價最新掛牌時間</code> 使用正規表達式來進行處理，就可以取得掛牌時間的資訊，針對此問題，我們可以透過 Clojure 的 <a href="https://clojuredocs.org/clojure.core/re-find" target="_blank" rel="external">re-find</a> 來對目標進行切割</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>re-find #<span style="color: #aadddd;">"</span><span style="color: #ff8888;">(</span><span style="color: #aadddd;">.*&#29260;&#20729;&#26368;&#26032;&#25499;&#29260;&#26178;&#38291;&#65306;&amp;nbsp;</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd;">[</span><span style="color: #aadddd; font-weight: bold;">\d\/</span><span style="color: #aadddd;">]+</span><span style="color: #aadddd; font-weight: bold;">\s</span><span style="color: #aadddd;">[</span><span style="color: #aadddd; font-weight: bold;">\d</span><span style="color: #aadddd;">:]+</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd;">.*</span><span style="color: #ff8888;">)</span><span style="color: #aadddd;">"</span>         <span style="color: #aadddd;">"&lt;td style=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">width:326px;text-align:left;vertical-align:top;color:#0000FF;font-size:11pt;font-weight:bold;</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">&gt;</span><span style="color: #aadddd;">      &lt;img style=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">vertical-align:middle;width:20px;</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> src=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;">../../Images/Monitor.gif</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> alt=</span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> </span><span style="color: #aadddd; font-weight: bold;">\"</span><span style="color: #aadddd;"> /&gt;&amp;nbsp;</span><span style="color: #aadddd;">      &#29260;&#20729;&#26368;&#26032;&#25499;&#29260;&#26178;&#38291;&#65306;&amp;nbsp;2016/02/26 10:28</span><span style="color: #aadddd;">    &lt;/td&gt;"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">["      &#29260;&#20729;&#26368;&#26032;&#25499;&#29260;&#26178;&#38291;&#65306;&amp;nbsp;2016/02/26 10:28"</span><span style="color: #5f5f5f; font-style: italic;">;;  </span><span style="color: #9ac; font-style: italic;">"      &#29260;&#20729;&#26368;&#26032;&#25499;&#29260;&#26178;&#38291;&#65306;&amp;nbsp;"</span><span style="color: #5f5f5f; font-style: italic;">;;  </span><span style="color: #9ac; font-style: italic;">"2016/02/26 10:28"</span><span style="color: #5f5f5f; font-style: italic;">;;  </span><span style="color: #9ac; font-style: italic;">""]</span></pre></div><p><a href="https://clojuredocs.org/clojure.core/re-find" target="_blank" rel="external">re-find</a> 會依照你設定的正規表達式，將目標分成不同群組，得到的結果如上。也因此我們可以知道我們的目標會出現在結果的 <code>index 2</code> (Clojure 陣列是從 0 開始計算)</p><p>最後，將這函式整理一下即可獲得</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">parse-date</span> <span style="color: #81d4fa;">[</span>html<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span>nth <span style="color: #aaccff;">(</span>re-find #<span style="color: #aadddd;">"</span><span style="color: #ff8888;">(</span><span style="color: #aadddd;">.*&#29260;&#20729;&#26368;&#26032;&#25499;&#29260;&#26178;&#38291;&#65306;&amp;nbsp;</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd;">[</span><span style="color: #aadddd; font-weight: bold;">\d\/</span><span style="color: #aadddd;">]+</span><span style="color: #aadddd; font-weight: bold;">\s</span><span style="color: #aadddd;">[</span><span style="color: #aadddd; font-weight: bold;">\d</span><span style="color: #aadddd;">:]+</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd;">.*</span><span style="color: #ff8888;">)</span><span style="color: #aadddd;">"</span> html<span style="color: #aaccff;">)</span> 2<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-org988d94b" class="outline-3"><h3 id="org988d94b">將網頁轉換成 hickory 格式</h3><div class="outline-text-3" id="text-org988d94b"><p>在本程式中我們將透過 <a href="https://github.com/davidsantiago/hickory" target="_blank" rel="external">hickory</a> 來讓我們解析 HTML 更為簡單，<a href="https://github.com/davidsantiago/hickory" target="_blank" rel="external">hickory</a> 是一個可用於 Clojure/ClojureScript 的函式庫，可以簡化我們解析 HTML 文件的麻煩，唯一的缺點是，由於目前 <a href="https://nodejs.org/" target="_blank" rel="external">node.js</a> 缺少了 <i>DOM</i> 元件，因此使用 <a href="https://github.com/davidsantiago/hickory" target="_blank" rel="external">hickory</a> 寫出的 ClojureScript 是無法在 <a href="https://nodejs.org" target="_blank" rel="external">node.js</a> 上執行的。</p><p>我們首先使用 <a href="http://davidsantiago.github.io/hickory/hickory.core.html#var-parse" target="_blank" rel="external">hickory/parse</a> 將 HTML 轉換成 DOM 結構</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">hickory</span><span style="color: #c6cccc; background-color: #202020;">/</span>parse <span style="color: #aadddd;">"&lt;b&gt;TEST&lt;/b&gt;"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">#object[org.jsoup.nodes.Document</span><span style="color: #5f5f5f; font-style: italic;">;;         </span><span style="color: #9ac; font-style: italic;">"0x13e4a71e"</span><span style="color: #5f5f5f; font-style: italic;">;;         </span><span style="color: #9ac; font-style: italic;">"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n  &lt;b&gt;TEST&lt;/b&gt;\n &lt;/body&gt;\n&lt;/html&gt;"]</span></pre></div><p>接著再使用 <a href="http://davidsantiago.github.io/hickory/hickory.core.html#var-as-hickory" target="_blank" rel="external">hickory/as-hickory</a> 將剛剛獲得的 DOM 結構轉換成 <i>hickory</i> 的資料格式，其形式如下</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #fff59d;">hickory</span><span style="color: #c6cccc; background-color: #202020;">/</span>as-hickory <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">hickory</span><span style="color: #c6cccc; background-color: #202020;">/</span>parse <span style="color: #aadddd;">"&lt;b&gt;TEST&lt;/b&gt;"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">=&gt;</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">{</span><span style="color: #9ac; font-style: italic;">:type</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:document</span><span style="color: #9ac; font-style: italic;">,</span><span style="color: #5f5f5f; font-style: italic;">;;  </span><span style="color: #9ac; font-style: italic;">:content</span><span style="color: #9ac; font-style: italic;"> [{</span><span style="color: #9ac; font-style: italic;">:type</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:element</span><span style="color: #9ac; font-style: italic;">,</span><span style="color: #5f5f5f; font-style: italic;">;;             </span><span style="color: #9ac; font-style: italic;">:attrs</span><span style="color: #9ac; font-style: italic;"> nil,</span><span style="color: #5f5f5f; font-style: italic;">;;             </span><span style="color: #9ac; font-style: italic;">:tag</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:html</span><span style="color: #9ac; font-style: italic;">,</span><span style="color: #5f5f5f; font-style: italic;">;;             </span><span style="color: #9ac; font-style: italic;">:content</span><span style="color: #9ac; font-style: italic;"> [{</span><span style="color: #9ac; font-style: italic;">:type</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:element</span><span style="color: #9ac; font-style: italic;">, </span><span style="color: #9ac; font-style: italic;">:attrs</span><span style="color: #9ac; font-style: italic;"> nil, </span><span style="color: #9ac; font-style: italic;">:tag</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:head</span><span style="color: #9ac; font-style: italic;">, </span><span style="color: #9ac; font-style: italic;">:content</span><span style="color: #9ac; font-style: italic;"> nil}</span><span style="color: #5f5f5f; font-style: italic;">;;                       </span><span style="color: #9ac; font-style: italic;">{</span><span style="color: #9ac; font-style: italic;">:type</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:element</span><span style="color: #9ac; font-style: italic;">,</span><span style="color: #5f5f5f; font-style: italic;">;;                        </span><span style="color: #9ac; font-style: italic;">:attrs</span><span style="color: #9ac; font-style: italic;"> nil,</span><span style="color: #5f5f5f; font-style: italic;">;;                        </span><span style="color: #9ac; font-style: italic;">:tag</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:body</span><span style="color: #9ac; font-style: italic;">,</span><span style="color: #5f5f5f; font-style: italic;">;;                        </span><span style="color: #9ac; font-style: italic;">:content</span><span style="color: #9ac; font-style: italic;"> [{</span><span style="color: #9ac; font-style: italic;">:type</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:element</span><span style="color: #9ac; font-style: italic;">,</span><span style="color: #5f5f5f; font-style: italic;">;;                                   </span><span style="color: #9ac; font-style: italic;">:attrs</span><span style="color: #9ac; font-style: italic;"> nil,</span><span style="color: #5f5f5f; font-style: italic;">;;                                   </span><span style="color: #9ac; font-style: italic;">:tag</span><span style="color: #9ac; font-style: italic;"> </span><span style="color: #9ac; font-style: italic;">:b</span><span style="color: #9ac; font-style: italic;">,</span><span style="color: #5f5f5f; font-style: italic;">;;                                   </span><span style="color: #9ac; font-style: italic;">:content</span><span style="color: #9ac; font-style: italic;"> ["TEST"]}]}]}]}</span></pre></div><p>將上面資訊整理一下，最後我們的函式即為</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">html-&gt;hickory</span> <span style="color: #81d4fa;">[</span>html<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span> html       <span style="color: #fff59d;">hickory</span><span style="color: #c6cccc; background-color: #202020;">/</span>parse       <span style="color: #fff59d;">hickory</span><span style="color: #c6cccc; background-color: #202020;">/</span>as-hickory<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>如果將這函式作用於前面所獲得的 HTML 內容，可以看到我們取得了以下的資訊</p><div class="figure"><p><img src="hickory.png"></p></div></div></div><div id="outline-container-orga304134" class="outline-3"><h3 id="orga304134">取得匯率轉換的資訊</h3><div class="outline-text-3" id="text-orga304134"><p>接下來就是這個程式的重頭戲了，以網頁來看，我們的目標就是這些匯率資訊</p><div class="figure"><p><img src="twbank-data.png"></p></div><p>為了方便尋找，我們先針對 <code>美金 (USD)</code> 的部分查找我們透過前面函式將 HTML 轉換成 Hickory 格式後的結果</p><div class="figure"><p><img src="twbank-data1.png"></p></div><p>由於我們的目標是 <code>titleLeft</code> 以及 <code>decimal</code> 這兩種 class, 因此就直接使用 <a href="http://davidsantiago.github.io/hickory/hickory.select.html#var-select" target="_blank" rel="external">hickory.select/select</a> 來幫我們將目標資訊切割出來</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span>data <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaeecc;">(</span>fetch-html<span style="color: #aaeecc;">)</span> html-&gt;hickory<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>select <span style="color: #aaccff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>child             <span style="color: #aaeecc;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>or <span style="color: #ccaaff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"titleLeft"</span><span style="color: #ccaaff;">)</span>                   <span style="color: #ccaaff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"decimal"</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>            data<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>透過這種方式，我們得到以下的陣列資訊</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">[</span><span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>,  <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"titleLeft"</span><span style="color: #aaccff;">}</span>,  <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>,  <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>,             <span style="color: #ccaaff;">:attrs</span> <span style="color: #ccaaff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"paddingLeft16"</span>,                     <span style="color: #ccaaff;">:src</span> <span style="color: #aadddd;">"/Images/Flags/America.gif"</span>,                     <span style="color: #ccaaff;">:title</span> <span style="color: #aadddd;">""</span>,                     <span style="color: #ccaaff;">:alt</span> <span style="color: #aadddd;">""</span><span style="color: #ccaaff;">}</span>,             <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:img</span>,             <span style="color: #ccaaff;">:content</span> <span style="color: #ccaaff;">nil</span><span style="color: #aaeecc;">}</span>            <span style="color: #aadddd;">"&#160;&#32654;&#37329; (USD)"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"32.89000"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"33.43200"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"33.19000"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"33.29000"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>,  <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"titleLeft"</span><span style="color: #aaccff;">}</span>,  <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>,  <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aaeecc;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>,             <span style="color: #ccaaff;">:attrs</span> <span style="color: #ccaaff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"paddingLeft16"</span>,                     <span style="color: #ccaaff;">:src</span> <span style="color: #aadddd;">"/Images/Flags/HongKong.gif"</span>,                     <span style="color: #ccaaff;">:title</span> <span style="color: #aadddd;">""</span>,                     <span style="color: #ccaaff;">:alt</span> <span style="color: #aadddd;">""</span><span style="color: #ccaaff;">}</span>,             <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:img</span>,             <span style="color: #ccaaff;">:content</span> <span style="color: #ccaaff;">nil</span><span style="color: #aaeecc;">}</span>            <span style="color: #aadddd;">"&#160;&#28207;&#24163; (HKD)"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"4.12500"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"4.32400"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"4.24900"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:type</span> <span style="color: #ccaaff;">:element</span>, <span style="color: #ccaaff;">:attrs</span> <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:class</span> <span style="color: #aadddd;">"decimal"</span><span style="color: #aaccff;">}</span>, <span style="color: #ccaaff;">:tag</span> <span style="color: #ccaaff;">:td</span>, <span style="color: #ccaaff;">:content</span> <span style="color: #aaccff;">[</span><span style="color: #aadddd;">"4.30900"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">]</span></pre></div><p>實際上我們只對這份資料中的 <code>:content</code> 欄位有興趣，因此透過 <a href="https://clojuredocs.org/clojure.core/map" target="_blank" rel="external">map</a> 將我們要的東西切割出來</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span>data <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaeecc;">(</span>fetch-html<span style="color: #aaeecc;">)</span> html-&gt;hickory<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span> <span style="color: #aaccff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>select <span style="color: #aaeecc;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>child                  <span style="color: #ccaaff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>or <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"titleLeft"</span><span style="color: #fff59d;">)</span>                        <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"decimal"</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>                 data<span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaccff;">%</span> <span style="color: #ccaaff;">:content</span> last<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span>   <span style="color: #9ac; font-style: italic;">; &lt;= add this</span></pre></div><p>這樣的話我們就會得到以下的陣列，裡面的東西都是我們要的資訊</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aadddd;">"&#160;&#32654;&#37329; (USD)"</span> <span style="color: #aadddd;">"32.89000"</span> <span style="color: #aadddd;">"33.43200"</span> <span style="color: #aadddd;">"33.19000"</span> <span style="color: #aadddd;">"33.29000"</span> <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span> <span style="color: #aadddd;">"&#160;&#20154;&#27665;&#24163; (CNY)"</span> <span style="color: #aadddd;">"4.98500"</span> <span style="color: #aadddd;">"5.14900"</span> <span style="color: #aadddd;">"5.05900"</span> <span style="color: #aadddd;">"5.10900"</span><span style="color: #aadddd;">)</span></pre></div><p>我們發現到得到的標題，比如 <code> 美金 (USD)</code> 前面都多了一個像是空格的東西無法顯示，那要怎樣濾掉呢? 實際上這個東西在 HTML 中是 <code>&amp;nbsp;</code> 這種特殊符號， <i>hickory</i> 則是將它轉成一個特殊字元，在這邊我使用 <a href="https://clojuredocs.org/clojure.core/replace" target="_blank" rel="external">replace</a> 直接將這個字元替代掉 <i>(註: 該字元網頁上看不到悠~)</i></p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span>data <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaeecc;">(</span>fetch-html<span style="color: #aaeecc;">)</span> html-&gt;hickory<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span>  <span style="color: #aaccff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>select <span style="color: #aaeecc;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>child                   <span style="color: #ccaaff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>or <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"titleLeft"</span><span style="color: #fff59d;">)</span>                         <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"decimal"</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>                  data<span style="color: #aaccff;">)</span>        <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaccff;">%</span> <span style="color: #ccaaff;">:content</span> last<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>        <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span><span style="color: #fff59d;">str</span><span style="color: #c6cccc; background-color: #202020;">/</span>replace <span style="color: #aaccff;">%</span> #<span style="color: #aadddd;">"&#160;"</span> <span style="color: #aadddd;">""</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span> <span style="color: #9ac; font-style: italic;">; &lt;= add this</span></pre></div><p>因此我們可以獲得</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aadddd;">"&#32654;&#37329; (USD)"</span> <span style="color: #aadddd;">"32.89000"</span> <span style="color: #aadddd;">"33.43200"</span> <span style="color: #aadddd;">"33.19000"</span> <span style="color: #aadddd;">"33.29000"</span> <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip</span> <span style="color: #aadddd;">"&#20154;&#27665;&#24163; (CNY)"</span> <span style="color: #aadddd;">"4.98500"</span> <span style="color: #aadddd;">"5.14900"</span> <span style="color: #aadddd;">"5.05900"</span> <span style="color: #aadddd;">"5.10900"</span><span style="color: #aadddd;">)</span></pre></div><p>仔細看這份資料，我們可以發現資料其實應該是 <code>5 個一組</code> ，因此我們可以再使用 <a href="https://clojuredocs.org/clojure.core/partition" target="_blank" rel="external">partition</a> 將這份資料弄成每五個一組</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #81d4fa;">[</span>data <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaeecc;">(</span>fetch-html<span style="color: #aaeecc;">)</span> html-&gt;hickory<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span>  <span style="color: #aaccff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>select <span style="color: #aaeecc;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>child                   <span style="color: #ccaaff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>or <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"titleLeft"</span><span style="color: #fff59d;">)</span>                         <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"decimal"</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>                  data<span style="color: #aaccff;">)</span>        <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaccff;">%</span> <span style="color: #ccaaff;">:content</span> last<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>        <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span><span style="color: #fff59d;">str</span><span style="color: #c6cccc; background-color: #202020;">/</span>replace <span style="color: #aaccff;">%</span> #<span style="color: #aadddd;">"&#160;"</span> <span style="color: #aadddd;">""</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>        <span style="color: #aaccff;">(</span>partition 5<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span>                 <span style="color: #9ac; font-style: italic;">; &lt;= add this</span></pre></div><p>這樣子得到的資訊如下</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"&#32654;&#37329; (USD)"</span> <span style="color: #aadddd;">"32.89000"</span> <span style="color: #aadddd;">"33.43200"</span> <span style="color: #aadddd;">"33.19000"</span> <span style="color: #aadddd;">"33.29000"</span><span style="color: #81d4fa;">)</span> <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span> <span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"&#36234;&#21335;&#30462; (VND)"</span> <span style="color: #aadddd;">"0.00128"</span> <span style="color: #aadddd;">"0.00160"</span> <span style="color: #aadddd;">"-"</span> <span style="color: #aadddd;">"-"</span><span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"&#39340;&#20358;&#24163; (MYR)"</span> <span style="color: #aadddd;">"6.70500"</span> <span style="color: #aadddd;">"8.43100"</span> <span style="color: #aadddd;">"-"</span> <span style="color: #aadddd;">"-"</span><span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"&#20154;&#27665;&#24163; (CNY)"</span> <span style="color: #aadddd;">"4.98500"</span> <span style="color: #aadddd;">"5.14900"</span> <span style="color: #aadddd;">"5.05900"</span> <span style="color: #aadddd;">"5.10900"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>將這邊的函式整理一下，得到以下的函式</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">parse-data</span> <span style="color: #81d4fa;">[</span>data<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span> <span style="color: #aaccff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>select <span style="color: #aaeecc;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>child                  <span style="color: #ccaaff;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>or <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"titleLeft"</span><span style="color: #fff59d;">)</span>                        <span style="color: #fff59d;">(</span><span style="color: #fff59d;">s</span><span style="color: #c6cccc; background-color: #202020;">/</span>class <span style="color: #aadddd;">"decimal"</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>                 data<span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #aaccff;">%</span> <span style="color: #ccaaff;">:content</span> last<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span><span style="color: #fff59d;">str</span><span style="color: #c6cccc; background-color: #202020;">/</span>replace <span style="color: #aaccff;">%</span> #<span style="color: #aadddd;">"&#160;"</span> <span style="color: #aadddd;">""</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>partition 5<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-orgab2be65" class="outline-3"><h3 id="orgab2be65">根據匯率轉換的資訊製作資料</h3><div class="outline-text-3" id="text-orgab2be65"><p>在前面我們取得了匯率轉換的資訊，但是我們要怎樣把這些資訊做成以下的形式呢?</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:USD</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#32654;&#37329; (USD)"</span>,       <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"32.92500"</span>,       <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"33.46700"</span>,       <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"33.22500"</span>,       <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"33.32500"</span><span style="color: #81d4fa;">}</span>, <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span> <span style="color: #ccaaff;">:PHP</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#33778;&#22283;&#27604;&#32034; (PHP)"</span>,       <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"0.64980"</span>,       <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"0.78250"</span>,       <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"-"</span>,       <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"-"</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">}</span></pre></div><p>就讓我們一步一步來吧，首先先透過 <a href="https://clojuredocs.org/clojure.core/zipmap" target="_blank" rel="external">zipmap</a> 替陣列裡面的每一元素加上 <i>keyword</i></p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span>map #<span style="color: #81d4fa;">(</span>zipmap <span style="color: #aaccff;">[</span><span style="color: #ccaaff;">:name</span> <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #ccaaff;">:spot-buying</span><span style="color: #aaccff;">]</span> <span style="color: #aaccff;">%</span><span style="color: #81d4fa;">)</span>     '<span style="color: #81d4fa;">(</span><span style="color: #aaccff;">(</span><span style="color: #aadddd;">"&#32654;&#37329; (USD)"</span> <span style="color: #aadddd;">"32.89000"</span> <span style="color: #aadddd;">"33.43200"</span> <span style="color: #aadddd;">"33.19000"</span> <span style="color: #aadddd;">"33.29000"</span><span style="color: #aaccff;">)</span>       <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span>       <span style="color: #aaccff;">(</span><span style="color: #aadddd;">"&#20154;&#27665;&#24163; (CNY)"</span> <span style="color: #aadddd;">"4.98500"</span> <span style="color: #aadddd;">"5.14900"</span> <span style="color: #aadddd;">"5.05900"</span> <span style="color: #aadddd;">"5.10900"</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>這樣子我們的資料就弄出一部份囉 ~</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#32654;&#37329; (USD)"</span>,  <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"32.89000"</span>,  <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"33.43200"</span>,  <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"33.19000"</span>,  <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"33.29000"</span><span style="color: #81d4fa;">}</span> <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#20154;&#27665;&#24163; (CNY)"</span>,  <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"4.98500"</span>,  <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"5.14900"</span>,  <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"5.05900"</span>,  <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"5.10900"</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span></pre></div><p>接下來，我們要想把法把 <code>美金 (USD)</code> 變成 <code>:USD</code> ，這個一樣可以透過 <a href="https://clojuredocs.org/clojure.core/re-find" target="_blank" rel="external">re-find</a> 來解決</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">-&gt;</span> <span style="color: #81d4fa;">(</span>re-find #<span style="color: #aadddd;">"</span><span style="color: #ff8888;">(</span><span style="color: #aadddd;">.*</span><span style="color: #aadddd; font-weight: bold;">\</span><span style="color: #ff8888; font-weight: bold;">(</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd;">.*</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd; font-weight: bold;">\</span><span style="color: #ff8888; font-weight: bold;">)</span><span style="color: #ff8888;">)</span><span style="color: #aadddd;">"</span> <span style="color: #aadddd;">"&#32654;&#37329; (USD)"</span><span style="color: #81d4fa;">)</span>    <span style="color: #81d4fa;">(</span>nth 2<span style="color: #81d4fa;">)</span>    keyword<span style="color: #aadddd;">)</span> <span style="color: #9ac; font-style: italic;">; =&gt; </span><span style="color: #9ac; font-style: italic;">:USD</span></pre></div><p>因此我們將前面寫的東西合併起來，將最後產生的資訊整合到 <a href="https://clojuredocs.org/clojure.core/hash-map" target="_blank" rel="external">hash-map</a> 中，就完成了</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">build-data</span> <span style="color: #81d4fa;">[</span>data<span style="color: #81d4fa;">]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">-&gt;&gt;</span> data       <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span>zipmap <span style="color: #ccaaff;">[</span><span style="color: #ccaaff;">:name</span> <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #ccaaff;">:spot-buying</span><span style="color: #ccaaff;">]</span> <span style="color: #aaccff;">%</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>map #<span style="color: #aaeecc;">(</span>hash-map <span style="color: #ccaaff;">(</span>keyword                        <span style="color: #fff59d;">(</span>nth <span style="color: #ff8888;">(</span>re-find #<span style="color: #aadddd;">"</span><span style="color: #ff8888;">(</span><span style="color: #aadddd;">.*</span><span style="color: #aadddd; font-weight: bold;">\</span><span style="color: #ff8888; font-weight: bold;">(</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd;">.*</span><span style="color: #ff8888;">)(</span><span style="color: #aadddd; font-weight: bold;">\</span><span style="color: #ff8888; font-weight: bold;">)</span><span style="color: #ff8888;">)</span><span style="color: #aadddd;">"</span> <span style="color: #795548;">(</span><span style="color: #ccaaff;">:name</span> <span style="color: #aaccff;">%</span><span style="color: #795548;">)</span><span style="color: #ff8888;">)</span> 2<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span> <span style="color: #aaccff;">%</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>       <span style="color: #aaccff;">(</span>into <span style="color: #aaeecc;">{}</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-org9db8f36" class="outline-3"><h3 id="org9db8f36">合併所有結果</h3><div class="outline-text-3" id="text-org9db8f36"><p>在上一步驟中，我們已經幾乎完成我們的程式，是時候將他進行整合成我們期望的結果</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">fetch</span> <span style="color: #81d4fa;">[]</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #aaccff;">[</span>html <span style="color: #aaeecc;">(</span>fetch-html<span style="color: #aaeecc;">)</span>        ctx  <span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">-&gt;</span> html html-&gt;hickory<span style="color: #aaeecc;">)</span>        data <span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">-&gt;</span> ctx parse-data build-data<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">]</span>    <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:url</span> twbank-url     <span style="color: #ccaaff;">:date</span> <span style="color: #aaeecc;">(</span>parse-date html<span style="color: #aaeecc;">)</span>     <span style="color: #ccaaff;">:count</span> <span style="color: #aaeecc;">(</span>count data<span style="color: #aaeecc;">)</span>     <span style="color: #ccaaff;">:results</span> data<span style="color: #aaccff;">}</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>當你執行 <code>fetch</code> 這函式時，就會將 <a href="http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm" target="_blank" rel="external">台灣銀行牌告匯率</a> 轉變成這樣的資訊:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">{</span><span style="color: #ccaaff;">:url</span> <span style="color: #aadddd;">"http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm"</span>, <span style="color: #ccaaff;">:date</span> <span style="color: #aadddd;">"2016/02/26 13:25"</span>, <span style="color: #ccaaff;">:count</span> 19, <span style="color: #ccaaff;">:results</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:CHF</span>           <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#29790;&#22763;&#27861;&#37070; (CHF)"</span>,            <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"32.91000"</span>,            <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"34.02000"</span>,            <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"33.51000"</span>,            <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"33.80000"</span><span style="color: #aaccff;">}</span>,           <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip..</span>           <span style="color: #ccaaff;">:ZAR</span>           <span style="color: #aaccff;">{</span><span style="color: #ccaaff;">:name</span> <span style="color: #aadddd;">"&#21335;&#38750;&#24163; (ZAR)"</span>,            <span style="color: #ccaaff;">:cash-selling</span> <span style="color: #aadddd;">"-"</span>,            <span style="color: #ccaaff;">:cash-buying</span> <span style="color: #aadddd;">"-"</span>,            <span style="color: #ccaaff;">:spot-selling</span> <span style="color: #aadddd;">"2.09000"</span>,            <span style="color: #ccaaff;">:spot-buying</span> <span style="color: #aadddd;">"2.19000"</span><span style="color: #aaccff;">}</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">}</span></pre></div></div></div></div><div id="outline-container-org48be390" class="outline-2"><h2 id="org48be390">取得範例程式碼</h2><div class="outline-text-2" id="text-org48be390"><p>本篇文章的範例程式碼已經上傳到 <a href="https://github.com/coldnew/blog-tutorial-examples/tree/master/2016/twbank-forex" target="_blank" rel="external">GitHub</a> 上，你可以使用以下方式取得程式碼</p><pre class="example">git clone https://github.com/coldnew/blog-tutorial-examples.git</pre><p>並切換到 <code>2016/twbank-forex</code> 資料夾去</p><div class="org-src-container"><pre class="src src-sh">coldnew@Rosia ~ $ cd blog-tutorial-examples/2016/twbank-forex</pre></div><p>你可以透過 <code>lein run</code> 來測試本文取得的資訊  ~ Have Fun~~</p><pre class="example">coldnew@Rosia ~/twbank-forex $ lein run{:url "http://rate.bot.com.tw/Pages/Static/UIP003.zh-TW.htm", :date "2016/02/26 13:25", :count 19, :results {:CHF  {:name "瑞士法郎 (CHF)",   :cash-selling "32.91000",   :cash-buying "34.02000",   :spot-selling "33.51000",   :spot-buying "33.80000"},skip .....</pre></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/c8ce3cdb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用 codox 與 CircleCI 建立 Clojure 專案的文檔</title>
      <link>https://coldnew.github.io/2c9c3b0f/</link>
      <guid>https://coldnew.github.io/2c9c3b0f/</guid>
      <pubDate>Sat, 20 Feb 2016 13:50:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在 Clojure 世界中，常用的產生文檔工具有 &lt;a href=&quot;https://github.com/MichaelBlume/marginalia&quot;&gt;Marginalia&lt;/a&gt; 以及 &lt;a href=&quot;https://github.com/weavejester/codox&quot;&gt;Codox&lt;/a&gt;。
本文將講述如何透過 &lt;a href=&quot;https://github.com/weavejester/codox&quot;&gt;Codox&lt;/a&gt; 以及 &lt;a href=&quot;https://circleci.com&quot;&gt;Circle CI&lt;/a&gt; 來對你的函式庫進行測試以及產生文檔並發佈到 GitHub pages 去。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在 Clojure 世界中，常用的產生文檔工具有 <a href="https://github.com/MichaelBlume/marginalia" target="_blank" rel="external">Marginalia</a> 以及 <a href="https://github.com/weavejester/codox" target="_blank" rel="external">Codox</a>。本文將講述如何透過 <a href="https://github.com/weavejester/codox" target="_blank" rel="external">Codox</a> 以及 <a href="https://circleci.com" target="_blank" rel="external">Circle CI</a> 來對你的函式庫進行測試以及產生文檔並發佈到 GitHub pages 去。</p><a id="more"></a><p>當然，為了便於描述，我們一樣從專案的建立開始來講 codox 的使用。</p><div id="outline-container-org4235e81" class="outline-2"><h2 id="org4235e81">建立我們的專案</h2><div class="outline-text-2" id="text-org4235e81"><p>首先我們先透過 <a href="http://leiningen.org/" target="_blank" rel="external">leinigen</a> 產生我們 Clojure 專案的基本樣板，這邊命名該專案為 <code>example-lib</code></p><pre class="example">coldnew@Rosia ~ $ lein new example-lib</pre><p>專案建立完成後，我們要稍微修改一下 <i>project.clj</i> ，在 <code>:plugin</code> 欄位加上 lein-codox, 這會讓我們多一個 <code>lein codox</code> 命令可以用來產生文檔。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defproject</span> <span style="color: #aaccff;">example-lib</span> <span style="color: #aadddd;">"0.1.0-SNAPSHOT"</span>  <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span>  <span style="color: #ccaaff;">:plugins</span> <span style="color: #81d4fa;">[</span><span style="color: #aaccff;">[</span>lein-codox <span style="color: #aadddd;">"0.9.4"</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">]</span><span style="color: #aadddd;">)</span></pre></div><p>如果你希望你產生的文檔，可以連接到 Github 上的程式碼，則可以多加上這樣一行</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defproject</span> <span style="color: #aaccff;">example-lib</span> <span style="color: #aadddd;">"0.1.0-SNAPSHOT"</span>  <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">skip ...</span>  <span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Add here to make codox can link function to github url</span>  <span style="color: #ccaaff;">:codox</span> <span style="color: #81d4fa;">{</span><span style="color: #ccaaff;">:source-uri</span> <span style="color: #aadddd;">"https://github.com/clojure-tw/example-codox-circleci/blob/master/{filepath}#L{line}"</span><span style="color: #81d4fa;">}</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-orgf7714d3" class="outline-2"><h2 id="orgf7714d3">加上基本的函式與測試</h2><div class="outline-text-2" id="text-orgf7714d3"><p>完成 <i>project.clj</i> 修改後，讓我們到 <code>src/example_lib/core.clj</code> 去加入我們的基本函式，這邊建立一個名為 <code>hello</code> 的函式，功能就是回傳 <code>Hello, World!</code> 這個字串回來。</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">example-lib.core</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defn</span> <span style="color: #aaccff;">hello</span>  <span style="color: #97abc6; font-style: italic;">"Say `Hello World!'."</span>  <span style="color: #81d4fa;">[]</span>  <span style="color: #aadddd;">"Hello, World!"</span><span style="color: #aadddd;">)</span></pre></div><p>接下來修改 <code>test/example_lib/core_test.clj</code> , 並加入我們的測試，以此例而言，我們需要確認 <code>(hello)</code> 回傳的會是 <code>Hello, World!</code> 這個字串:</p><div class="org-src-container"><pre class="src src-clojure"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ns</span> <span style="color: #fff59d;">example-lib.core-test</span>  <span style="color: #81d4fa;">(</span><span style="color: #ccaaff;">:require</span> <span style="color: #aaccff;">[</span><span style="color: #fff59d;">clojure.test</span> <span style="color: #ccaaff;">:refer</span> <span style="color: #ccaaff;">:all</span><span style="color: #aaccff;">]</span>            <span style="color: #aaccff;">[</span><span style="color: #fff59d;">example-lib.core</span> <span style="color: #ccaaff;">:refer</span> <span style="color: #ccaaff;">:all</span><span style="color: #aaccff;">]</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">deftest</span> <span style="color: #aaccff;">a-test</span>  <span style="color: #81d4fa;">(</span>testing <span style="color: #aadddd;">"Hello, World!"</span>    <span style="color: #aaccff;">(</span>is <span style="color: #aaeecc;">(</span>= <span style="color: #ccaaff;">(</span>hello<span style="color: #ccaaff;">)</span> <span style="color: #aadddd;">"Hello, World!"</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>完成後，你可以使用 <code>lein test</code> 確認你的測試是成功的</p><pre class="example">coldnew@Rosia ~/example-lib $ lein testlein test example-lib.core-testRan 1 tests containing 1 assertions.0 failures, 0 errors.</pre></div></div><div id="outline-container-orgf37172e" class="outline-2"><h2 id="orgf37172e">使用 codox 產生文檔</h2><div class="outline-text-2" id="text-orgf37172e"><p>當我們的函式庫完成後，就可以使用 <code>lein codox</code> 產生我們的文檔</p><pre class="example">coldnew@Rosia ~/example-lib $ lein codoxGenerated HTML docs in /home/coldnew/example-lib/target/doc</pre><p>你會在 <code>target/doc</code> 發現你產生的文檔</p><pre class="example">coldnew@Rosia ~/example-lib/target/doc $ tree -L 1 .. &lt;b&gt;├── css &lt;b&gt;├── example-lib.core.html├── index.html├── intro.html└── js &lt;b&gt;2 directories, 3 files</pre><p>其中的 <code>intro.html</code> 是產生自 <code>doc/intro.md</code> 這個檔案，也就是說，你可以透過 codox 產生你的函式文檔外，讓他也幫你產生 <code>doc/</code> 資料夾下的那些 <code>markdown</code> 語法的文件。</p><pre class="example">coldnew@Rosia ~/example-lib/doc $ tree -L 1 .. &lt;b&gt;└── intro.md0 directories, 1 file</pre><p>打開 <code>index.html</code> 會看到這樣的結果</p><div class="figure"><p><img src="index.png"></p></div></div></div><div id="outline-container-orge018362" class="outline-2"><h2 id="orge018362">讓 Circle CI 發佈你的文檔到 gh-pages</h2><div class="outline-text-2" id="text-orge018362"><p>自從 GitHub 加入了顯示 <a href="https://pages.github.com/" target="_blank" rel="external">gh-pages</a> 的 html 檔案功能後，我們就可以存放我們的 HTML 文檔到 gh-pages 分支去，不過先讓我們加入  <a href="https://circleci.com" target="_blank" rel="external">Circle CI</a> 的支援。</p></div><div id="outline-container-orgd80ae54" class="outline-3"><h3 id="orgd80ae54">circle.yml</h3><div class="outline-text-3" id="text-orgd80ae54"><p>我們切回專案目錄，並建立 <code>circle.yml</code> 這個檔案</p><pre class="example">coldnew@Rosia ~/example-lib $ touch circle.yml</pre><p>接下來編輯 <code>circle.yml</code> 加入我們的設定</p><div class="org-src-container"><pre class="src src-yaml"><span style="color: #aaccff;">general</span>:  <span style="color: #aaccff;">branches</span>:    <span style="color: #aaccff;">ignore</span>:      - gh-pages<span style="color: #aaccff;">machine</span>:  <span style="color: #aaccff;">timezone</span>: Asia/Taipei  <span style="color: #aaccff;">java</span>:    <span style="color: #aaccff;">version</span>: oraclejdk8<span style="color: #aaccff;">dependencies</span>:  <span style="color: #aaccff;">pre</span>:    - wget -O lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein    - chmod 755 lein    - ./lein -v    - ./lein deps  <span style="color: #aaccff;">cache_directories</span>:    - ~/.m2    - ~/.lein<span style="color: #aaccff;">test</span>:  <span style="color: #aaccff;">override</span>:    - ./lein test</pre></div><p>在 <i>circle.yml</i> 中，我們告訴了 Circle CI 要忽略掉 <i>gh-pages</i> 這個分支，並且使用 <code>lein test</code> 確保我們的函式不會在未來因為修改而違反我們在測試程式中寫的規範。</p><p>接下來，我們在 <i>circle.yml</i> 加上發佈的方法，我們使用 <code>lein codox</code> 產生我們的文檔後，透過 <code>deploy.sh</code> 去進行發佈到 gh-pages。</p><div class="org-src-container"><pre class="src src-yaml"><span style="color: #aaccff;">deployment</span>:  <span style="color: #aaccff;">publish</span>:    <span style="color: #aaccff;">branch</span>: master    <span style="color: #aaccff;">commands</span>:      - ./lein codox      - sed -i <span style="color: #aadddd;">'s%https://${GH_TOKEN}@${GH_REF}%git@github.com:clojure-tw/example-codox-circleci.git%g'</span> deploy.sh      - ./deploy.sh</pre></div></div></div><div id="outline-container-orgb018e1d" class="outline-3"><h3 id="orgb018e1d">deploy.sh</h3><div class="outline-text-3" id="text-orgb018e1d"><p>接下來編輯 <i>deploy.sh</i> 這個腳本，主要的任務如下:</p><ol class="org-ol"><li>建立一個 repo 資料夾</li><li>將該複製的文檔複製過去</li><li>設定好 git 相關資訊</li><li>上傳到 gh-pages</li></ol><p>因此我們就可以根據 <i>codox</i> 會產生文檔到 <code>target/doc</code> 這個規則來寫我們的 <i>deploy.sh</i> 腳本。</p><div class="org-src-container"><pre class="src src-sh"><span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #9ac; font-style: italic;">!/usr/bin/</span><span style="color: #aaffaa;">env</span><span style="color: #9ac; font-style: italic;"> bash</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">exit with nonzero exit code if anything fails</span><span style="color: #ccaaff;">set</span> -e<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Local variables</span><span style="color: #aaccff;">OUT</span>=<span style="color: #aadddd;">".gh-pages"</span><span style="color: #aaccff;">ID</span>=$<span style="color: #aadddd;">(</span><span style="color: #fa8072;">git</span> rev-parse --short HEAD<span style="color: #aadddd;">)</span><span style="color: #aaccff;">DATE</span>=$<span style="color: #aadddd;">(</span><span style="color: #fa8072;">date</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">clear and re-create the out directory</span>rm -rf $<span style="color: #aaccff;">OUT</span> || <span style="color: #aaffaa;">exit</span> 0;<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">create repo directory</span>mkdir $<span style="color: #aaccff;">OUT</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Copy all prebuild files</span>cp README.* $<span style="color: #aaccff;">OUT</span>cp -R target/doc/* $<span style="color: #aaccff;">OUT</span>cp -f circle.yml $<span style="color: #aaccff;">OUT</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">go to the out directory and create a *new* Git repo</span><span style="color: #ccaaff;">cd</span> $<span style="color: #aaccff;">OUT</span>git init<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">inside this git repo we'll pretend to be a new user</span>git config user.name <span style="color: #aadddd;">"Circle CI"</span>git config user.email <span style="color: #aadddd;">"clojure.tw@gmail.com"</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">The first and only commit to this new Git repo contains all the</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">files present with the commit message "Deploy to GitHub Pages".</span>git add .git commit -m <span style="color: #aadddd;">"Deploy commit $ID to GitHub Pages: $DATE"</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">Force push from the current repo's master branch to the remote</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">repo's gh-pages branch. (All previous history on the gh-pages branch</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">will be lost, since we are overwriting it.) We redirect any output to</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">/dev/null to hide any sensitive credential data that might otherwise be exposed.</span>git push --force --quiet <span style="color: #aadddd;">"https://${GH_TOKEN}@${GH_REF}"</span> master:gh-pages &gt; /dev/null 2&gt;&amp;1</pre></div></div></div><div id="outline-container-org903714e" class="outline-3"><h3 id="org903714e">將你的專案加入到 CircleCI</h3><div class="outline-text-3" id="text-org903714e"><p>該設定的東西設定好了以後，我們將程式碼上傳到 GitHub 就可以將專案加入到 CircleCI 去</p><div class="figure"><p><img src="circleci1.png"></p></div><p>第一次編譯的時候你會發現失敗在 <i>deploy.sh</i> 這裡，這是因為 CircleCI 沒有權限可以將你產生的文檔上傳到 GitHub 去</p><div class="figure"><p><img src="circleci2.png"></p></div><p>為了解決這個問題，我們需要產生一對 <i>SSH key</i> 來讓 CircleCI 可以上傳到 GitHub, 首先進入你在 CircleCI 上的 <code>Project Settings</code> 頁面，接著我們透過 <i>ssh-keygen</i> 這命令去產生我們的鑰匙對，並設定為免密碼。</p><pre class="example">coldnew@Rosia ~/example-lib $ ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/Users/coldnew/.ssh/id_rsa): id_rsaEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in id_rsa.Your public key has been saved in id_rsa.pub.The key fingerprint is:SHA256:CbSAl++hyYfrbK4/CdbCLZDzFj33Kl750F+jaT1SV8k coldnew@RosiaThe key's randomart image is:+---[RSA 2048]----+|   ....          ||  . oo .         || . o .o       . .||+ . o +. .     E.|| = = B oS      . ||  O B oo.   . .  || o + ++..  oo.   ||   .*..o .o+o.   ||  .B*o  ..+. .   |+----[SHA256]-----+</pre><p>於是在當前目錄你就有 <code>id_rsa</code> 以及 <code>id_rsa.pub</code> 兩個檔案，將 <code>id_rsa</code> 裡面的內容貼到 <i>CircleCI</i> 去, 並指派 <i>Hostname</i> 為 <code>github.com</code> 。</p><div class="figure"><p><img src="circleci3.png"></p></div><p>接下來到你該專案的 GitHub 頁面去，我們進入到這個專案的 <i>Deploy keys</i> 頁面，將 <code>id_rsa.pub</code> 貼上。</p><div class="figure"><p><img src="circleci4.png"></p></div><p>都完成後，讓 <i>CircleCI</i> 對你專案進行 <code>Rebuild</code> 的動作，你就會看到你的 <i>gh-pages</i> 多出了新建立的文檔囉。</p></div></div></div><div id="outline-container-org0726cb4" class="outline-2"><h2 id="org0726cb4">取得本文的範例</h2><div class="outline-text-2" id="text-org0726cb4"><p>本文的範例已經上傳到 <a href="https://github.com/clojure-tw/example-codox-circleci" target="_blank" rel="external">GitHub</a>, 你可以透過以下命令下載到本地來查看</p><pre class="example">coldnew@Rosia ~ $ git clone https://github.com/clojure-tw/example-codox-circleci.git</pre><p>產生出來的線上文件則可以到 <a href="http://clojure-tw.github.io/example-codox-circleci/" target="_blank" rel="external">http://clojure-tw.github.io/example-codox-circleci/</a> 去看。</p><p>Happy Coding :)</p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/2c9c3b0f/#disqus_thread</comments>
    </item>
    
    <item>
      <title>淺談 emacs25 的 dynamic modules 功能</title>
      <link>https://coldnew.github.io/2d16cc25/</link>
      <guid>https://coldnew.github.io/2d16cc25/</guid>
      <pubDate>Sun, 03 Jan 2016 02:42:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
emacs 預計在 emacs 25 加入 &lt;code&gt;dynamic modules&lt;/code&gt; 的功能，透過這個功能我們可以使用
C/C++ 等語言將你的 emacs-lisp 函式變成改寫成如同 builtin 的模組，來提升
emacs-lisp 執行速度或是讓 emacs-lisp 可以與外部函式庫互動。
&lt;/p&gt;

&lt;p&gt;
在本篇文章中，我將稍微講解自己測試 dynamic modules 的心得。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>emacs 預計在 emacs 25 加入 <code>dynamic modules</code> 的功能，透過這個功能我們可以使用C/C++ 等語言將你的 emacs-lisp 函式變成改寫成如同 builtin 的模組，來提升emacs-lisp 執行速度或是讓 emacs-lisp 可以與外部函式庫互動。</p><p>在本篇文章中，我將稍微講解自己測試 dynamic modules 的心得。</p><a id="more"></a><div class="alert"><p>dynamic modules 功能處於測試階段，由於此功能可能在未來有進行不同的更動，因此預設編譯時這選項 (<code>--with-modules</code>) 是關閉的。</p></div><div id="outline-container-orgd2d2c85" class="outline-2"><h2 id="orgd2d2c85">編譯 emacs</h2><div class="outline-text-2" id="text-orgd2d2c85"><p>目前 <code>dynamic modules</code> 功能已經併入到 master branch, 因此只要下載 master branch 即可測試。</p><p>當然，你的系統必須滿足編譯 emacs 的條件，具體需要安裝的函式庫就不在本文贅述。</p><p>我們首先透過 git 去下載目前最新的版本的 emacs 原始碼並進行編譯，編譯 emacs 時記得打開 <code>--with-modules</code> 這個選項，這樣才能使用 dynamic modules 功能。</p><div class="org-src-container"><pre class="src src-sh">git clone http://git.sv.gnu.org/r/emacs.git<span style="color: #ccaaff;">cd</span> emacs./autogen.sh./configure --with-modules --prefix=$<span style="color: #aadddd;">{</span><span style="color: #aaccff;">INSTALL_PATH</span><span style="color: #aadddd;">}</span> <span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">ex: --prefix=/usr</span>make &amp;&amp; make install</pre></div><p>編譯好支援 dynamic modules 功能的 emacs 後，讓我們來撰寫第一個最簡單的模組吧，不過為了方便學習，先從 emacs-lisp 版本來寫起。</p></div></div><div id="outline-container-orgc810900" class="outline-2"><h2 id="orgc810900">Hello World (elisp 版本)</h2><div class="outline-text-2" id="text-orgc810900"><p>在 emacs-lisp 中，除了使用 <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Functions.html" target="_blank" rel="external">defun</a> 以外，我們也可以使用 <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Functions.html" target="_blank" rel="external">fset</a> 搭配匿名函式來完成我們要使用的 function。</p><p>我們建立一個名為 <code>hello-elisp.el</code> 的模組，這個模組中我們宣告一個名為 <code>hello</code> 的函式，當執行他的時候就回傳 <code>Hello Emacs</code> 這個字串。</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">A simple function define with `</span><span style="color: #ccaaff; font-style: italic;">fset</span><span style="color: #9ac; font-style: italic;">' following code work the same as</span><span style="color: #5f5f5f; font-style: italic;">;;</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">(defun hello () "Hello Emacs")</span><span style="color: #5f5f5f; font-style: italic;">;;</span><span style="color: #aadddd;">(</span>fset 'hello '<span style="color: #81d4fa;">(</span>lambda <span style="color: #aaccff;">()</span> <span style="color: #97abc6; font-style: italic;">"Hello Emacs"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">we need to provide this feature to make emacs can use following method to</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">load it</span><span style="color: #5f5f5f; font-style: italic;">;;  </span><span style="color: #9ac; font-style: italic;">(require 'hello-elisp)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">provide</span> '<span style="color: #ccaaff;">hello-elisp</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">hello-elisp.el ends here</span></pre></div><p>在這個檔案的最後加上 <code>provide</code> 可以讓 emacs 透過 <code>require</code> 的功能來找到他，假設你這份 <code>hello-elisp.el</code> 存放在 <code>~/test</code> 資料夾下，則我們可以在 emacs 中這樣讀取他</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Add ~/test to load-path let emacs can find it</span><span style="color: #aadddd;">(</span>add-to-list 'load-path <span style="color: #aadddd;">"~/test"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">load the hello-elisp module</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">you can also use (load "~/test/hello-elisp.el") but not recommand</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">require</span> '<span style="color: #ccaaff;">hello-elisp</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">call our hello function and a string should return</span><span style="color: #aadddd;">(</span>hello<span style="color: #aadddd;">)</span>   <span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">=&gt; Hello Emacs</span></pre></div><p>當我們執行到 <code>(hello)</code> 時，就會看到這個函式回傳 <code>Hello Emacs</code> 字串出來，於是 emacs-lisp 版本的 hello 函式就完成了 !</p><p>現在讓我們將他變成 C 語言版本的模組。</p></div></div><div id="outline-container-org69e8646" class="outline-2"><h2 id="org69e8646">Hello World (c 版本)</h2><div class="outline-text-2" id="text-org69e8646"><p>我們要怎樣建立我們的 C 語言版本的模組呢? 其實在你的 emacs 原始碼 <code>modules</code> 資料夾下有 <code>modhelp.py</code> 這個檔案，他會幫忙產生出可以使用的模組樣板，不過本文為了講解方便就直接用手刻吧 ~</p></div><div id="outline-container-org03c67db" class="outline-3"><h3 id="org03c67db">Makefile</h3><div class="outline-text-3" id="text-org03c67db"><p>我們首先先弄 <code>Makefile</code> 來紀錄編譯這個模組的方法，在這邊 <code>EMACS_ROOT</code> 指的是 emacs 原始碼的資料夾， <code>EMACS</code> 則是有打開 <code>--with-modules</code> 選項後編譯出來的 emacs 執行檔。</p><div class="org-src-container"><pre class="src src-makefile"><span style="color: #aaccff;">EMACS_ROOT</span> ?=  ../..<span style="color: #aaccff;">EMACS</span> ?= emacs<span style="color: #aaccff;">CC</span>      = gcc<span style="color: #aaccff;">LD</span>      = gcc<span style="color: #aaccff;">CPPFLAGS</span> = -I$<span style="color: #aadddd;">(</span><span style="color: #aaccff;">EMACS_ROOT</span><span style="color: #aadddd;">)</span>/src<span style="color: #aaccff;">CFLAGS</span> = -std=gnu99 -ggdb3 -O2 -Wall -fPIC $<span style="color: #aadddd;">(</span><span style="color: #aaccff;">CPPFLAGS</span><span style="color: #aadddd;">)</span><span style="color: #aaccff;">.PHONY</span> : clean test<span style="color: #aaccff;">all</span>: test<span style="color: #aaccff;">hello-core.so</span>: hello-core.o  $<span style="color: #aadddd;">(</span><span style="color: #aaccff;">LD</span><span style="color: #aadddd;">)</span> -L . -shared $<span style="color: #aadddd;">(</span><span style="color: #aaccff;">LDFLAGS</span><span style="color: #aadddd;">)</span> -o <span style="color: #aaccff;">$</span><span style="color: #ccaaff;">@</span> $<span style="color: #ccaaff;">^</span><span style="color: #aaccff;">hello-core.o</span>: hello-core.c  $<span style="color: #aadddd;">(</span><span style="color: #aaccff;">CC</span><span style="color: #aadddd;">)</span> $<span style="color: #aadddd;">(</span><span style="color: #aaccff;">CFLAGS</span><span style="color: #aadddd;">)</span> -c -o <span style="color: #aaccff;">$</span><span style="color: #ccaaff;">@</span> $<span style="color: #ccaaff;">^</span><span style="color: #aaccff;">clean</span>:  -rm -f hello-core.o hello-core.so<span style="color: #aaccff;">test</span>: hello-core.so  $<span style="color: #aadddd;">(</span><span style="color: #aaccff;">EMACS</span><span style="color: #aadddd;">)</span> -Q -batch -L . -l test/test.el -f ert-run-tests-batch-and-exit</pre></div><p>為了確認我們編譯出來的 .so 模組是否有正確執行，我們另外弄一個 <code>test.el</code> 來執行 <a href="https://www.gnu.org/software/emacs/manual/html_mono/ert.html" target="_blank" rel="external">ert</a> 測試，因此先來完成這個測試程式。</p></div></div><div id="outline-container-orge87bbbe" class="outline-3"><h3 id="orge87bbbe">test.el</h3><div class="outline-text-3" id="text-orge87bbbe"><p>在 test.el 中我們載入了 <a href="https://www.gnu.org/software/emacs/manual/html_mono/ert.html" target="_blank" rel="external">ert</a> 模組以及我們即將要編譯出來的 <code>hello-core.so</code> 模組，注意到載入 dynamic module 模組的方式和載入一般 .el 的函式庫是一樣的。</p><p>於是我們就可以寫個簡單的測試來確認等等要寫的 C 語言版本的 <code>hello-c</code> 函式是否會真的回傳 "Hello Emacs" 字串回來。</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #5f5f5f; font-style: italic;">;;; </span><span style="color: #9ac; font-style: italic;">test.el --- hello test</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">require</span> '<span style="color: #ccaaff;">ert</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">require</span> '<span style="color: #ccaaff;">hello-core</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">ert-deftest</span> <span style="color: #aaccff;">test-hello</span> <span style="color: #81d4fa;">()</span>  <span style="color: #97abc6; font-style: italic;">"hello-c should return \"Hello Emacs\" string."</span>  <span style="color: #81d4fa;">(</span>should <span style="color: #aaccff;">(</span>string= <span style="color: #aadddd;">"Hello Emacs"</span> <span style="color: #aaeecc;">(</span>hello-c<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;;; </span><span style="color: #9ac; font-style: italic;">test.el ends here</span></pre></div></div></div><div id="outline-container-org20516ca" class="outline-3"><h3 id="org20516ca">hello-core.c</h3><div class="outline-text-3" id="text-org20516ca"><p>接下來就到了我們的重頭戲， <code>hello-core.c</code> 這個模組上，我們首先添加可能會需要的標頭檔</p><div class="org-src-container"><pre class="src src-c"><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">stdio.h</span><span style="color: #aadddd;">&gt;</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">stdlib.h</span><span style="color: #aadddd;">&gt;</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">string.h</span><span style="color: #aadddd;">&gt;</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">assert.h</span><span style="color: #aadddd;">&gt;</span><span style="color: #ff8888;">#include</span> <span style="color: #aadddd;">&lt;</span><span style="color: #aadddd;">emacs-module.h</span><span style="color: #aadddd;">&gt;</span>       <span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">in emacs source code </span><span style="color: #5f5f5f; font-style: italic;">*/</span></pre></div><p>接下來我們要定義一個特別的變數，這和寫 gcc plugin 是一樣的，就是要告訴 emacs 說這個 .so 檔是 <code>GPL 相容</code> 的，如果你不添加這個符號進去，那你的 emacs 就不會載入你寫的這個模組。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">`plugin_is_GPL_compatible' indicates that its code is released under the GPL</span><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">or compatible license; Emacs will refuse to load modules that don't export</span><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">such a symbol.</span><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">plugin_is_GPL_compatible</span>;</pre></div><p>為了可以載入模組，我們需要一個進入點來讓 emacs 知道這個模組的相關資訊，並透過 <code>fset</code> 宣告了名為 <code>hello-c</code> 的函式，其原型會透過後面定義的 <code>Fcall_hello</code> 函式來實現，而在這個進入點中我們也提供了這個模組的名稱，這樣我們就可以在 emacs-lisp 中透過 <code>require</code> 來組入這個模組。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #5f5f5f; font-style: italic;">/* </span><span style="color: #9ac; font-style: italic;">Module init function.  </span><span style="color: #5f5f5f; font-style: italic;">*/</span><span style="color: #fff59d;">int</span><span style="color: #aaccff;">emacs_module_init</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">struct</span> <span style="color: #fff59d;">emacs_runtime</span> *<span style="color: #aaccff;">ert</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>        <span style="color: #fff59d;">emacs_env</span> *<span style="color: #aaccff;">env</span> = ert-&gt;get_environment<span style="color: #81d4fa;">(</span>ert<span style="color: #81d4fa;">)</span>;        <span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">Bind NAME to FUN.</span>        <span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">(fset 'hello-c '(lambda () "Hello Emacs"))</span>        <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qfset</span> = env-&gt;intern<span style="color: #81d4fa;">(</span>env, <span style="color: #aadddd;">"fset"</span><span style="color: #81d4fa;">)</span>;        <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qsym</span> = env-&gt;intern<span style="color: #81d4fa;">(</span>env, <span style="color: #aadddd;">"hello-c"</span><span style="color: #81d4fa;">)</span>;        <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qfn</span> = env-&gt;make_function<span style="color: #81d4fa;">(</span>env, 0, 0, Fcall_hello, <span style="color: #aadddd;">"return hello string"</span>, <span style="color: #ccaaff;">NULL</span><span style="color: #81d4fa;">)</span>;        <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">fset_args</span><span style="color: #81d4fa;">[]</span> = <span style="color: #81d4fa;">{</span> Qsym, Qfn <span style="color: #81d4fa;">}</span>;        env-&gt;funcall<span style="color: #81d4fa;">(</span>env, Qfset, 2, fset_args<span style="color: #81d4fa;">)</span>;        <span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">Provide FEATURE to Emacs.</span>        <span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">(provide 'hello-core)</span>        <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qfeat</span> = env-&gt;intern<span style="color: #81d4fa;">(</span>env, <span style="color: #aadddd;">"hello-core"</span><span style="color: #81d4fa;">)</span>;        <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qprovide</span> = env-&gt;intern<span style="color: #81d4fa;">(</span>env, <span style="color: #aadddd;">"provide"</span><span style="color: #81d4fa;">)</span>;        <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">provide_args</span><span style="color: #81d4fa;">[]</span> = <span style="color: #81d4fa;">{</span> Qfeat <span style="color: #81d4fa;">}</span>;        env-&gt;funcall<span style="color: #81d4fa;">(</span>env, Qprovide, 1, provide_args<span style="color: #81d4fa;">)</span>;        <span style="color: #aaffaa;">return</span> 0;<span style="color: #aadddd;">}</span></pre></div><p>最後就是實現我們的 <code>hello</code> 函式的方法，我們透過 <code>Fcall_hello</code> 作為中間層來和 <code>hello</code> 函式溝通，並回傳 emacs-lisp 的字串類型回去給 emacs-vm。</p><div class="org-src-container"><pre class="src src-c"><span style="color: #aaffaa;">const</span> <span style="color: #fff59d;">char</span> *<span style="color: #aaccff;">hello</span><span style="color: #aadddd;">()</span><span style="color: #aadddd;">{</span>        <span style="color: #aaffaa;">return</span> <span style="color: #aadddd;">"Hello Emacs"</span>;<span style="color: #aadddd;">}</span><span style="color: #aaffaa;">static</span> <span style="color: #fff59d;">emacs_value</span><span style="color: #aaccff;">Fcall_hello</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">emacs_env</span> *<span style="color: #aaccff;">env</span>, <span style="color: #fff59d;">ptrdiff_t</span> <span style="color: #aaccff;">nargs</span>, <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">args</span><span style="color: #81d4fa;">[]</span>, <span style="color: #fff59d;">void</span> *<span style="color: #aaccff;">data</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>        <span style="color: #aaffaa;">const</span> <span style="color: #fff59d;">char</span> *<span style="color: #aaccff;">str</span> = hello<span style="color: #81d4fa;">()</span>;        <span style="color: #aaffaa;">return</span> env-&gt;make_string<span style="color: #81d4fa;">(</span>env, str, strlen<span style="color: #aaccff;">(</span>str<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span>;<span style="color: #aadddd;">}</span></pre></div></div></div><div id="outline-container-org41149e4" class="outline-3"><h3 id="org41149e4">驗證你寫的模組</h3><div class="outline-text-3" id="text-org41149e4"><p>都完成後，你就可以使用 <code>make test</code> 去執行測試，一切正常的話就會像這個樣子。</p><div class="org-src-container"><pre class="src src-emacs-lisp">Running 1 tests <span style="color: #aadddd;">(</span>2016-01-03 13:10:24+0800<span style="color: #aadddd;">)</span>   passed  1/1  test-hello</pre></div><p>當然，你也可以啟動你的 emacs 並且將這個 .so 加入到你的 <code>load-path</code> 中，並執行他</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span>add-to-list 'load-path <span style="color: #aadddd;">"~/emacs-hello"</span><span style="color: #aadddd;">)</span> <span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">path contains hello-core.so</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">you can use (load "~/emacs-hello/hello-core.so") directly, but we use</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">require here.</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">require</span> '<span style="color: #ccaaff;">hello-core</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span>hello-c<span style="color: #aadddd;">)</span>               <span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">=&gt; "Hello Emacs"</span></pre></div></div></div></div><div id="outline-container-orgf7f3358" class="outline-2"><h2 id="orgf7f3358">參考 mod-test.c 進行更多的簡化</h2><div class="outline-text-2" id="text-orgf7f3358"><p>在上面的 C 語言版本中，我們每次定義一個函式都要這樣一大串其實還蠻累人的</p><div class="org-src-container"><pre class="src src-c"><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">Bind NAME to FUN.</span><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">(fset 'hello-c '(lambda () "Hello Emacs"))</span><span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qfset</span> = env-&gt;intern<span style="color: #aadddd;">(</span>env, <span style="color: #aadddd;">"fset"</span><span style="color: #aadddd;">)</span>;<span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qsym</span> = env-&gt;intern<span style="color: #aadddd;">(</span>env, <span style="color: #aadddd;">"hello-c"</span><span style="color: #aadddd;">)</span>;<span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qfn</span> = env-&gt;make_function<span style="color: #aadddd;">(</span>env, 0, 0, Fcall_hello, <span style="color: #aadddd;">"return hello string"</span>, <span style="color: #ccaaff;">NULL</span><span style="color: #aadddd;">)</span>;<span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">fset_args</span><span style="color: #aadddd;">[]</span> = <span style="color: #aadddd;">{</span> Qsym, Qfn <span style="color: #aadddd;">}</span>;</pre></div><p>這邊可以參考 emacs 程式碼中的 <a href="https://github.com/jwiegley/emacs/blob/54617ada51e49af04f0c3f609e724aafcaf0df16/modules/mod-test/mod-test.c" target="_blank" rel="external">src/modules/mod-test/mod-test.c</a> ，先加入這樣的實現</p><div class="org-src-container"><pre class="src src-c"><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">Provide FEATURE to Emacs.</span><span style="color: #aaffaa;">static</span> <span style="color: #fff59d;">void</span><span style="color: #aaccff;">provide</span> <span style="color: #aadddd;">(</span><span style="color: #fff59d;">emacs_env</span> *<span style="color: #aaccff;">env</span>, <span style="color: #aaffaa;">const</span> <span style="color: #fff59d;">char</span> *<span style="color: #aaccff;">feature</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>    <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qfeat</span> = env-&gt;intern <span style="color: #81d4fa;">(</span>env, feature<span style="color: #81d4fa;">)</span>;    <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qprovide</span> = env-&gt;intern <span style="color: #81d4fa;">(</span>env, <span style="color: #aadddd;">"provide"</span><span style="color: #81d4fa;">)</span>;    <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">args</span><span style="color: #81d4fa;">[]</span> = <span style="color: #81d4fa;">{</span> Qfeat <span style="color: #81d4fa;">}</span>;    env-&gt;funcall <span style="color: #81d4fa;">(</span>env, Qprovide, 1, args<span style="color: #81d4fa;">)</span>;<span style="color: #aadddd;">}</span><span style="color: #5f5f5f; font-style: italic;">// </span><span style="color: #9ac; font-style: italic;">Bind NAME to FUN.</span><span style="color: #aaffaa;">static</span> <span style="color: #fff59d;">void</span><span style="color: #aaccff;">bind_function</span> <span style="color: #aadddd;">(</span><span style="color: #fff59d;">emacs_env</span> *<span style="color: #aaccff;">env</span>, <span style="color: #aaffaa;">const</span> <span style="color: #fff59d;">char</span> *<span style="color: #aaccff;">name</span>, <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Sfun</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>    <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qfset</span> = env-&gt;intern <span style="color: #81d4fa;">(</span>env, <span style="color: #aadddd;">"fset"</span><span style="color: #81d4fa;">)</span>;    <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">Qsym</span> = env-&gt;intern <span style="color: #81d4fa;">(</span>env, name<span style="color: #81d4fa;">)</span>;    <span style="color: #fff59d;">emacs_value</span> <span style="color: #aaccff;">args</span><span style="color: #81d4fa;">[]</span> = <span style="color: #81d4fa;">{</span> Qsym, Sfun <span style="color: #81d4fa;">}</span>;    env-&gt;funcall <span style="color: #81d4fa;">(</span>env, Qfset, 2, args<span style="color: #81d4fa;">)</span>;<span style="color: #aadddd;">}</span></pre></div><p>這樣在我們實作 <code>emacs_module_int</code> 的時候，就可以透過 C 語言的巨集簡化函式的宣告</p><div class="org-src-container"><pre class="src src-c"><span style="color: #fff59d;">int</span><span style="color: #aaccff;">emacs_module_init</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">struct</span> <span style="color: #fff59d;">emacs_runtime</span> *<span style="color: #aaccff;">ert</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">{</span>    <span style="color: #fff59d;">emacs_env</span> *<span style="color: #aaccff;">env</span> = ert-&gt;get_environment<span style="color: #81d4fa;">(</span>ert<span style="color: #81d4fa;">)</span>;<span style="color: #ff8888;">#define</span> <span style="color: #aaccff;">DEFUN</span><span style="color: #81d4fa;">(</span><span style="color: #aaccff;">lsym</span>, <span style="color: #aaccff;">csym</span>, <span style="color: #aaccff;">amin</span>, <span style="color: #aaccff;">amax</span>, <span style="color: #aaccff;">doc</span>, <span style="color: #aaccff;">data</span><span style="color: #81d4fa;">)</span>                        \    bind_function <span style="color: #81d4fa;">(</span>env, lsym,                                           \                   env-&gt;make_function <span style="color: #aaccff;">(</span>env, amin, amax, csym, doc, data<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span>    DEFUN <span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"fib-c"</span>, Fcall_fib_c, 1, 1, <span style="color: #aadddd;">"Calculate Fibonacci number with recursive function call."</span>, <span style="color: #ccaaff;">NULL</span><span style="color: #81d4fa;">)</span>;    DEFUN <span style="color: #81d4fa;">(</span><span style="color: #aadddd;">"fib-loop-c"</span>, Fcall_fib_loop_c, 1, 1, <span style="color: #aadddd;">"Calculate Fibonacci number with loop."</span>, <span style="color: #ccaaff;">NULL</span><span style="color: #81d4fa;">)</span>;<span style="color: #ff8888;">#undef</span> DEFUN    provide<span style="color: #81d4fa;">(</span>env, <span style="color: #aadddd;">"fib-core"</span><span style="color: #81d4fa;">)</span>;    <span style="color: #aaffaa;">return</span> 0;<span style="color: #aadddd;">}</span></pre></div></div></div><div id="outline-container-orgc80b3a3" class="outline-2"><h2 id="orgc80b3a3">使用 C/C++ 寫模組一定比較快?</h2><div class="outline-text-2" id="text-orgc80b3a3"><p>既然 emacs 終於增加了 dynamic modules 功能，那是不是把大多數的 emacs-lisp 改寫成 c/c++ 模組會比較好？實際上是不一定，我們先看看我用 C 寫的 fibonacci 效能和 emacs-lisp 的比較狀況</p><div class="row show-grid"><div class="col-md-6"><p><b>emacs-lisp</b></p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defun</span> <span style="color: #aaccff;">fib-elisp</span> <span style="color: #81d4fa;">(</span>n<span style="color: #81d4fa;">)</span>  <span style="color: #97abc6; font-style: italic;">"Fibonacci in recursive function call."</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">if</span> <span style="color: #aaccff;">(</span>= 0 n<span style="color: #aaccff;">)</span> 0    <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">if</span> <span style="color: #aaeecc;">(</span>= 1 n<span style="color: #aaeecc;">)</span> 1      <span style="color: #aaeecc;">(</span>+ <span style="color: #ccaaff;">(</span>fib-elisp <span style="color: #fff59d;">(</span>- n 1<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span>         <span style="color: #ccaaff;">(</span>fib-elisp <span style="color: #fff59d;">(</span>- n 2<span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>Elapsed time: <code>211.466410s</code></p></div><div class="col-md-6 "><p><b>c</b></p><div class="org-src-container"><pre class="src src-c"><span style="color: #aaffaa;">static</span> <span style="color: #fff59d;">intmax_t</span> <span style="color: #aaccff;">fib</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">intmax_t</span> <span style="color: #aaccff;">n</span><span style="color: #aadddd;">)</span> <span style="color: #aadddd;">{</span>        <span style="color: #aaffaa;">if</span> <span style="color: #81d4fa;">(</span>0 == n<span style="color: #81d4fa;">)</span> <span style="color: #aaffaa;">return</span> 0;        <span style="color: #aaffaa;">if</span> <span style="color: #81d4fa;">(</span>1 == n<span style="color: #81d4fa;">)</span> <span style="color: #aaffaa;">return</span> 1;        <span style="color: #aaffaa;">return</span> fib<span style="color: #81d4fa;">(</span>n - 1<span style="color: #81d4fa;">)</span> + fib <span style="color: #81d4fa;">(</span>n - 2<span style="color: #81d4fa;">)</span>;<span style="color: #aadddd;">}</span></pre></div><p>Elapsed time: <code>1.389031s</code></p></div> </div><p>以遞迴的版本來看，用 C 語言寫的 Fibonacci 數列運算數度是大幅勝過 emacs-lisp，那如果是使用迴圈的版本呢？我們再來比較一次看看</p><div class="row show-grid"><div class="col-md-6"><p><b>emacs-lisp</b></p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defun</span> <span style="color: #aaccff;">fib-loop-elisp</span> <span style="color: #81d4fa;">(</span>n<span style="color: #81d4fa;">)</span>  <span style="color: #97abc6; font-style: italic;">"Calculate Fibonacci number with loop."</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">let</span> <span style="color: #aaccff;">(</span><span style="color: #aaeecc;">(</span>a 0<span style="color: #aaeecc;">)</span>        <span style="color: #aaeecc;">(</span>b 1<span style="color: #aaeecc;">)</span>        <span style="color: #aaeecc;">(</span>tmp 0<span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>    <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">dotimes</span> <span style="color: #aaeecc;">(</span>i n 0<span style="color: #aaeecc;">)</span>      <span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">setq</span> tmp a<span style="color: #aaeecc;">)</span>      <span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">setq</span> a b<span style="color: #aaeecc;">)</span>      <span style="color: #aaeecc;">(</span><span style="color: #aaffaa;">setq</span> b <span style="color: #ccaaff;">(</span>+ tmp b<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>    a<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>Elapsed time: <code>0.002195s</code></p></div><div class="col-md-6 "><p><b>c</b></p><div class="org-src-container"><pre class="src src-c"><span style="color: #aaffaa;">static</span> <span style="color: #fff59d;">intmax_t</span> <span style="color: #aaccff;">fib_loop</span><span style="color: #aadddd;">(</span><span style="color: #fff59d;">intmax_t</span> <span style="color: #aaccff;">n</span><span style="color: #aadddd;">)</span> <span style="color: #aadddd;">{</span>        <span style="color: #fff59d;">int</span> <span style="color: #aaccff;">a</span> = 0, <span style="color: #aaccff;">b</span> = 1;        <span style="color: #aaffaa;">for</span> <span style="color: #81d4fa;">(</span><span style="color: #fff59d;">int</span> <span style="color: #aaccff;">i</span> = 0; i &lt; n; i++<span style="color: #81d4fa;">)</span> <span style="color: #81d4fa;">{</span>                <span style="color: #fff59d;">int</span> <span style="color: #aaccff;">tmp</span> = a;                a = b;                b = tmp + b;        <span style="color: #81d4fa;">}</span>        <span style="color: #aaffaa;">return</span> a;<span style="color: #aadddd;">}</span></pre></div><p>Elapsed time: <code>0.000072s</code></p></div> </div><p>好像還是用 C 寫的效能比較好？我們來看看一個反例，用 C++ 寫的模仿 <a href="https://github.com/magnars/s.el" target="_blank" rel="external">s.el</a> 的功能</p><div class="row show-grid"><div class="col-md-6"><p><b>emacs-lisp</b></p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defun</span> <span style="color: #aaccff;">s-trim-left</span> <span style="color: #81d4fa;">(</span>s<span style="color: #81d4fa;">)</span>  <span style="color: #97abc6; font-style: italic;">"Remove whitespace at the beginning of S."</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">if</span> <span style="color: #aaccff;">(</span>string-match <span style="color: #aadddd;">"\\`[ \t\n\r]+"</span> s<span style="color: #aaccff;">)</span>      <span style="color: #aaccff;">(</span>replace-match <span style="color: #aadddd;">""</span> t t s<span style="color: #aaccff;">)</span>    s<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>Elapsed time: <code>0.000780s</code></p></div><div class="col-md-6 "><p><b>c++</b></p><div class="org-src-container"><pre class="src src-c++"><span style="color: #ccaaff;">std</span>::<span style="color: #fff59d;">string</span> <span style="color: #aaccff;">ltrim</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">const</span> <span style="color: #ccaaff;">std</span>::<span style="color: #fff59d;">string</span> &amp;<span style="color: #aaccff;">s</span><span style="color: #aadddd;">)</span> <span style="color: #aadddd;">{</span>    <span style="color: #aaffaa;">static</span> <span style="color: #aaffaa;">const</span> <span style="color: #ccaaff;">std</span>::<span style="color: #fff59d;">regex</span> <span style="color: #aaccff;">lws</span><span style="color: #81d4fa;">{</span><span style="color: #aadddd;">"^[ \t\n\r]+"</span>,        <span style="color: #ccaaff;">std</span>::<span style="color: #ccaaff;">regex_constants</span>::extended<span style="color: #81d4fa;">}</span>;    <span style="color: #aaffaa;">return</span> <span style="color: #ccaaff;">std</span>::regex_replace<span style="color: #81d4fa;">(</span>s, lws, <span style="color: #aadddd;">""</span><span style="color: #81d4fa;">)</span>;<span style="color: #aadddd;">}</span></pre></div><p>Elapsed time: <code>0.044819s</code></p></div> </div><p>在這個版本中，為了方便對照因此都是使用 <code>regex</code> 來處理字串，但是 C++ 的版本結果就比 emacs-lisp 慢了許多。雖然我們可以知道效能瓶頸應該是出在 <code>std::regex</code> 身上，但這也同時說明了不是什麼東西都用 C/C++ 重寫一定可以獲得最佳效能。</p></div></div><div id="outline-container-orgb94eafc" class="outline-2"><h2 id="orgb94eafc">總結</h2><div class="outline-text-2" id="text-orgb94eafc"><p><code>dynamic module</code> 終於可以在 emacs 中使用，這個消息對我而言其實是蠻開心的，畢竟這代表了我可以透過自己寫的模組去實現更多的用途，而不一定要強制修改 emacs 核心程式碼。</p><p>目前我測試用的程式碼已經放到 <a href="https://github.com/coldnew/emacs-module-test" target="_blank" rel="external">GitHub</a> 上，有興趣也歡迎來玩玩看，看能不能替 emacs 增加更多有趣的功能。</p></div></div><div id="outline-container-org535fcbc" class="outline-2"><h2 id="org535fcbc">延伸閱讀</h2><div class="outline-text-2" id="text-org535fcbc"><p><code>[1]</code> <a href="http://syohex.hatenablog.com/entry/2015/12/16/185458" target="_blank" rel="external">ejectで學ぶ Dynamic module 機能</a></p><p><code>[2]</code> <a href="http://qiita.com/syohex/items/5e06a34f1426fd2f28d8#_reference-c55c6773db283acc422d" target="_blank" rel="external">Emacsから Cの関數をつかう -&gt; はやい</a></p><p><code>[3]</code> <a href="http://qiita.com/syohex/items/fa71f1c61107b5e30c43" target="_blank" rel="external">Emacsに mrubyを組み込んでみた</a></p><p><code>[4]</code> <a href="https://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00960.html" target="_blank" rel="external">https://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00960.html</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/2d16cc25/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 emacs 下使用 mu4e 收發郵件</title>
      <link>https://coldnew.github.io/6a7aa5c1/</link>
      <guid>https://coldnew.github.io/6a7aa5c1/</guid>
      <pubDate>Sat, 02 Jan 2016 16:22:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
最近又重新改寫了我的 emacs 設定，捨棄掉了 &lt;a href=&quot;https://github.com/syl20bnr/spacemacs&quot;&gt;spacemacs&lt;/a&gt; 並重新使用 &lt;a href=&quot;http://orgmode.org/&quot;&gt;org-mode&lt;/a&gt; 撰寫，你可以在 &lt;a href=&quot;http://coldnew.github.io/coldnew-emacs&quot;&gt;這裡&lt;/a&gt; 看到我目前的設定。
&lt;/p&gt;

&lt;p&gt;
既然剛好重寫，就順便紀錄一下如何在 emacs 下進行郵件的收發，在 emacs 下我們有很多種收發電子郵件的選擇，比如 &lt;a href=&quot;http://www.emacswiki.org/emacs/GnusGmail&quot;&gt;gnus&lt;/a&gt; 、&lt;a href=&quot;http://www.emacswiki.org/emacs/WanderLust&quot;&gt;wanderlust&lt;/a&gt; ，本文要說的是另外一個很多人在用並且比較好設定的 &lt;a href=&quot;http://www.djcbsoftware.nl/code/mu/mu4e.html&quot;&gt;mu4e&lt;/a&gt;。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近又重新改寫了我的 emacs 設定，捨棄掉了 <a href="https://github.com/syl20bnr/spacemacs" target="_blank" rel="external">spacemacs</a> 並重新使用 <a href="http://orgmode.org/" target="_blank" rel="external">org-mode</a> 撰寫，你可以在 <a href="http://coldnew.github.io/coldnew-emacs">這裡</a> 看到我目前的設定。</p><p>既然剛好重寫，就順便紀錄一下如何在 emacs 下進行郵件的收發，在 emacs 下我們有很多種收發電子郵件的選擇，比如 <a href="http://www.emacswiki.org/emacs/GnusGmail" target="_blank" rel="external">gnus</a> 、<a href="http://www.emacswiki.org/emacs/WanderLust" target="_blank" rel="external">wanderlust</a> ，本文要說的是另外一個很多人在用並且比較好設定的 <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html" target="_blank" rel="external">mu4e</a>。</p><a id="more"></a><div id="outline-container-orga779810" class="outline-2"><h2 id="orga779810">安裝 mu4e</h2><div class="outline-text-2" id="text-orga779810"><p><a href="http://www.djcbsoftware.nl/code/mu/mu4e.html" target="_blank" rel="external">mu4e</a> 實際上是 <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html" target="_blank" rel="external">mu</a> 的 emacs 客戶端，因此我們真正要安裝的是 <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html" target="_blank" rel="external">mu</a> 這套軟體。</p><p>在 Mac OSX 中可以透過 homebrew 完成這件事情</p><pre class="example">coldnew@osx ~ $ brew install mu --with-emacs --HEAD</pre><p>由於 homebrew 安裝的東西不會在 emacs 的 <code>load-path</code> 中，因此別忘記在你的 emacs 加上以下這段設定</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">when</span> <span style="color: #81d4fa;">(</span>eq system-type 'darwin<span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span>add-to-list 'load-path <span style="color: #aadddd;">"/usr/local/Cellar/mu/HEAD/share/emacs/site-lisp/mu4e"</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>在 Gentoo Linux 安裝就容易多了，也不需要什麼額外的設定，就只要打開 emacs 的 <code>USE flag</code> 即可</p><div class="org-src-container"><pre class="src src-sh">coldnew@gentoo ~ $ sudo <span style="color: #aaccff;">USE</span>=<span style="color: #aadddd;">"emacs"</span> emerge net-mail/mu</pre></div></div></div><div id="outline-container-org462bc97" class="outline-2"><h2 id="org462bc97">安裝 offlineimap</h2><div class="outline-text-2" id="text-org462bc97"><p><a href="http://www.djcbsoftware.nl/code/mu/mu4e.html" target="_blank" rel="external">mu</a> 只負責進行索引，並未內建擷取信件的工具，因此你需要安裝第三方程式來幫忙下載郵件到本地端，常用的有 <a href="http://offlineimap.org/" target="_blank" rel="external">offlineimap</a> 以及 <a href="http://isync.sourceforge.net/" target="_blank" rel="external">mbsync</a> ，在本文中使用 offlinemap 來負責擷取信件。</p><p>要使用 offlineimap，第一步當然是安裝他了，在 Mac OSX 中可以透過 homebrew 完成這件事情</p><pre class="example">coldnew@osx ~ $ brew install offlineimap</pre><p>在我的 Gentoo Linux 則是透過 portage 去安裝</p><pre class="example">coldnew@gentoo ~ $ sudo emerge net-mail/offlineimap</pre></div><div id="outline-container-org250d546" class="outline-3"><h3 id="org250d546">設定 .offlineimaprc</h3><div class="outline-text-3" id="text-org250d546"><p>安裝完成後，我們需要設定 <code>~/.offlineimaprc</code> 這個檔案，這邊以收發 Gmail 為例，我的設定檔是長這個樣子的</p><div class="org-src-container"><pre class="src src-python"><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">-*- mode: python -*-</span><span style="color: #aadddd;">[</span>general<span style="color: #aadddd;">]</span><span style="color: #c6cccc; background-color: #202020;">accounts</span> = Gmail<span style="color: #c6cccc; background-color: #202020;">maxsyncaccounts</span> = <span style="color: #c6cccc; background-color: #202020;">3</span><span style="color: #c6cccc; background-color: #202020;">pythonfile</span> = ~/.offlineimap.py<span style="color: #aadddd;">[</span>Account Gmail<span style="color: #aadddd;">]</span><span style="color: #c6cccc; background-color: #202020;">localrepository</span> = Gmail-Local<span style="color: #c6cccc; background-color: #202020;">remoterepository</span> = Gmail-Remote<span style="color: #aadddd;">[</span>Repository Gmail-Local<span style="color: #aadddd;">]</span><span style="color: #ccaaff;">type</span> = Maildir<span style="color: #c6cccc; background-color: #202020;">localfolders</span> = ~/Maildir/Gmail<span style="color: #aadddd;">[</span>Repository Gmail-Remote<span style="color: #aadddd;">]</span><span style="color: #ccaaff;">type</span> = Gmail<span style="color: #c6cccc; background-color: #202020;">remotehost</span> = imap.gmail.com<span style="color: #c6cccc; background-color: #202020;">remoteuser</span> = YOUR_EMAIL_ACCOUNT <span style="color: #9ac; font-style: italic;"># &lt;---- Change to your account</span><span style="color: #c6cccc; background-color: #202020;">remotepasseval</span> = get_password_emacs<span style="color: #aadddd;">(</span><span style="color: #aadddd;">"imap.gmail.com"</span>, <span style="color: #aadddd;">"993"</span><span style="color: #aadddd;">)</span> <span style="color: #9ac; font-style: italic;"># &lt;---  get password from emacs</span><span style="color: #c6cccc; background-color: #202020;">ssl</span> = true<span style="color: #c6cccc; background-color: #202020;">sslcacertfile</span> = /etc/ssl/certs/ca-certificates.crt<span style="color: #c6cccc; background-color: #202020;">nametrans</span> = <span style="color: #aaffaa;">lambda</span> foldername: foldername.decode<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'imap4-utf-7'</span><span style="color: #aadddd;">)</span>.encode<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'utf-8'</span><span style="color: #aadddd;">)</span><span style="color: #c6cccc; background-color: #202020;">maxconnections</span> = <span style="color: #c6cccc; background-color: #202020;">4</span><span style="color: #c6cccc; background-color: #202020;">realdelete</span> = yes</pre></div><p>在這個設定檔中有幾個地方要解釋一下，首先由於 offlineimap 對中文標籤支持不好，所以我們需要一個 <code>~/.offlineimap.py</code> 腳本來幫忙進行編碼的轉換，並套用到 <code>nametrans</code> 的設定，因此我們必須要告訴 offlineimap 說我們要載入 <code>~/.offlineimap.py</code> 腳本並且套用 <code>nametrans</code> 規則</p><div class="org-src-container"><pre class="src src-python"><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">[general]</span><span style="color: #c6cccc; background-color: #202020;">pythonfile</span> = ~/.offlineimap.py<span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">[Repository Gmail-Remote]</span><span style="color: #c6cccc; background-color: #202020;">nametrans</span> = <span style="color: #aaffaa;">lambda</span> foldername: foldername.decode<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'imap4-utf-7'</span><span style="color: #aadddd;">)</span>.encode<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'utf-8'</span><span style="color: #aadddd;">)</span></pre></div><p>另外，由於我們都要在 emacs 中收發郵件了，在 <code>.offlineimaprc</code> 填上明碼的密碼是很蠢的事情，因此我們告訴 offlineimap 說要密碼請去和 emacs 要，這邊也設定一些規則在 <code>~/.offlineimap.py</code> 中</p><div class="org-src-container"><pre class="src src-python"><span style="color: #c6cccc; background-color: #202020;">remotepasseval</span> = get_password_emacs<span style="color: #aadddd;">(</span><span style="color: #aadddd;">"imap.gmail.com"</span>, <span style="color: #aadddd;">"993"</span><span style="color: #aadddd;">)</span> <span style="color: #9ac; font-style: italic;"># &lt;---  get password from emacs</span></pre></div></div></div><div id="outline-container-org93a6e0e" class="outline-3"><h3 id="org93a6e0e">設定 .offlineimap.py</h3><div class="outline-text-3" id="text-org93a6e0e"><p>於是我們該來看看 <code>~/.offlineimap.py</code> 裡面到底賣什麼膏藥囉～</p></div><div id="outline-container-org4ae55d6" class="outline-4"><h4 id="org4ae55d6">.offlineimap.py - 增加編碼成 UTF-8 功能</h4><div class="outline-text-4" id="text-org4ae55d6"><p>首先我們最需要的就是避免中文信件或是標籤出現問題，因此我們需要將以下這段加入到 <code>~/.offlineimap.py</code> 中。</p><div class="org-src-container"><pre class="src src-python"><span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #9ac; font-style: italic;">!/usr/bin/env python</span><span style="color: #aaffaa;">import</span> binascii<span style="color: #aaffaa;">import</span> codecs<span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">modified_base64</span><span style="color: #aadddd;">(</span>s<span style="color: #aadddd;">)</span>:    <span style="color: #c6cccc; background-color: #202020;">s</span> = s.encode<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'utf-16be'</span><span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">return</span> binascii.b2a_base64<span style="color: #aadddd;">(</span>s<span style="color: #aadddd;">)</span>.rstrip<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'\n='</span><span style="color: #aadddd;">)</span>.replace<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'/'</span>, <span style="color: #aadddd;">','</span><span style="color: #aadddd;">)</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">doB64</span><span style="color: #aadddd;">(</span>_in, r<span style="color: #aadddd;">)</span>:    <span style="color: #aaffaa;">if</span> _in:    r.append<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'&amp;%s-'</span> % modified_base64<span style="color: #81d4fa;">(</span><span style="color: #aadddd;">''</span>.join<span style="color: #aaccff;">(</span>_in<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">del</span> _in<span style="color: #aadddd;">[</span>:<span style="color: #aadddd;">]</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">encoder</span><span style="color: #aadddd;">(</span>s<span style="color: #aadddd;">)</span>:    <span style="color: #c6cccc; background-color: #202020;">r</span> = <span style="color: #aadddd;">[]</span>    <span style="color: #c6cccc; background-color: #202020;">_in</span> = <span style="color: #aadddd;">[]</span>    <span style="color: #aaffaa;">for</span> c <span style="color: #aaffaa;">in</span> s:    <span style="color: #c6cccc; background-color: #202020;">ordC</span> = <span style="color: #ccaaff;">ord</span><span style="color: #aadddd;">(</span>c<span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">if</span> 0x20 &lt;= ordC &lt;= 0x25 <span style="color: #aaffaa;">or</span> 0x27 &lt;= ordC &lt;= 0x7e:        doB64<span style="color: #aadddd;">(</span>_in, r<span style="color: #aadddd;">)</span>        r.append<span style="color: #aadddd;">(</span>c<span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">elif</span> <span style="color: #c6cccc; background-color: #202020;">c</span> == <span style="color: #aadddd;">'&amp;'</span>:        doB64<span style="color: #aadddd;">(</span>_in, r<span style="color: #aadddd;">)</span>        r.append<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'&amp;-'</span><span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">else</span>:        _in.append<span style="color: #aadddd;">(</span>c<span style="color: #aadddd;">)</span>    doB64<span style="color: #aadddd;">(</span>_in, r<span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">return</span> <span style="color: #aadddd;">(</span>str<span style="color: #81d4fa;">(</span><span style="color: #aadddd;">''</span>.join<span style="color: #aaccff;">(</span>r<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span>, <span style="color: #ccaaff;">len</span><span style="color: #81d4fa;">(</span>s<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">decoding</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">modified_unbase64</span><span style="color: #aadddd;">(</span>s<span style="color: #aadddd;">)</span>:    <span style="color: #c6cccc; background-color: #202020;">b</span> = binascii.a2b_base64<span style="color: #aadddd;">(</span>s.replace<span style="color: #81d4fa;">(</span><span style="color: #aadddd;">','</span>, <span style="color: #aadddd;">'/'</span><span style="color: #81d4fa;">)</span> + <span style="color: #aadddd;">'==='</span><span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">return</span> <span style="color: #ccaaff;">unicode</span><span style="color: #aadddd;">(</span>b, <span style="color: #aadddd;">'utf-16be'</span><span style="color: #aadddd;">)</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">decoder</span><span style="color: #aadddd;">(</span>s<span style="color: #aadddd;">)</span>:    <span style="color: #c6cccc; background-color: #202020;">r</span> = <span style="color: #aadddd;">[]</span>    <span style="color: #c6cccc; background-color: #202020;">decode</span> = <span style="color: #aadddd;">[]</span>    <span style="color: #aaffaa;">for</span> c <span style="color: #aaffaa;">in</span> s:    <span style="color: #aaffaa;">if</span> <span style="color: #c6cccc; background-color: #202020;">c</span> == <span style="color: #aadddd;">'&amp;'</span> <span style="color: #aaffaa;">and</span> <span style="color: #aaffaa;">not</span> decode:        decode.append<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'&amp;'</span><span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">elif</span> <span style="color: #c6cccc; background-color: #202020;">c</span> == <span style="color: #aadddd;">'-'</span> <span style="color: #aaffaa;">and</span> decode:        <span style="color: #aaffaa;">if</span> <span style="color: #ccaaff;">len</span><span style="color: #aadddd;">(</span>decode<span style="color: #aadddd;">)</span> == <span style="color: #c6cccc; background-color: #202020;">1</span>:        r.append<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'&amp;'</span><span style="color: #aadddd;">)</span>        <span style="color: #aaffaa;">else</span>:        r.append<span style="color: #aadddd;">(</span>modified_unbase64<span style="color: #81d4fa;">(</span><span style="color: #aadddd;">''</span>.join<span style="color: #aaccff;">(</span>decode<span style="color: #aaeecc;">[</span><span style="color: #c6cccc; background-color: #202020;">1</span>:<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span>        <span style="color: #c6cccc; background-color: #202020;">decode</span> = <span style="color: #aadddd;">[]</span>    <span style="color: #aaffaa;">elif</span> decode:        decode.append<span style="color: #aadddd;">(</span>c<span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">else</span>:        r.append<span style="color: #aadddd;">(</span>c<span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">if</span> decode:    r.append<span style="color: #aadddd;">(</span>modified_unbase64<span style="color: #81d4fa;">(</span><span style="color: #aadddd;">''</span>.join<span style="color: #aaccff;">(</span>decode<span style="color: #aaeecc;">[</span><span style="color: #c6cccc; background-color: #202020;">1</span>:<span style="color: #aaeecc;">]</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span>    <span style="color: #c6cccc; background-color: #202020;">bin_str</span> = <span style="color: #aadddd;">''</span>.join<span style="color: #aadddd;">(</span>r<span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">return</span> <span style="color: #aadddd;">(</span>bin_str, <span style="color: #ccaaff;">len</span><span style="color: #81d4fa;">(</span>s<span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span><span style="color: #aaffaa;">class</span> <span style="color: #fff59d;">StreamReader</span><span style="color: #aadddd;">(</span>codecs.StreamReader<span style="color: #aadddd;">)</span>:    <span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">decode</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">self</span>, s, <span style="color: #c6cccc; background-color: #202020;">errors</span>=<span style="color: #aadddd;">'strict'</span><span style="color: #aadddd;">)</span>:    <span style="color: #aaffaa;">return</span> decoder<span style="color: #aadddd;">(</span>s<span style="color: #aadddd;">)</span><span style="color: #aaffaa;">class</span> <span style="color: #fff59d;">StreamWriter</span><span style="color: #aadddd;">(</span>codecs.StreamWriter<span style="color: #aadddd;">)</span>:    <span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">decode</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">self</span>, s, <span style="color: #c6cccc; background-color: #202020;">errors</span>=<span style="color: #aadddd;">'strict'</span><span style="color: #aadddd;">)</span>:    <span style="color: #aaffaa;">return</span> encoder<span style="color: #aadddd;">(</span>s<span style="color: #aadddd;">)</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">imap4_utf_7</span><span style="color: #aadddd;">(</span>name<span style="color: #aadddd;">)</span>:    <span style="color: #aaffaa;">if</span> <span style="color: #c6cccc; background-color: #202020;">name</span> == <span style="color: #aadddd;">'imap4-utf-7'</span>:    <span style="color: #aaffaa;">return</span> <span style="color: #aadddd;">(</span>encoder, decoder, StreamReader, StreamWriter<span style="color: #aadddd;">)</span>codecs.register<span style="color: #aadddd;">(</span>imap4_utf_7<span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-orge607246" class="outline-4"><h4 id="orge607246">.offlineimap.py - 從 emacs 中獲取密碼</h4><div class="outline-text-4" id="text-orge607246"><p>在我的系統中，emacs 負責進行解密 <code>~/.authinfo.gpg</code> 這個透過 gnupg 加密的設定檔案，並且我的 emacs 是不關掉的，因此就直接啟動一個 emacsclient 去執行 <code>offlineimap-get-password</code> 這個函式 (需定義在你的 ~/.emacs.d/ 裡面)</p><div class="org-src-container"><pre class="src src-python"><span style="color: #aaffaa;">import</span> subprocess<span style="color: #aaffaa;">import</span> re<span style="color: #aaffaa;">import</span> os<span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">pass password from emacs</span><span style="color: #5f5f5f; font-style: italic;">#</span><span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">get_output</span><span style="color: #aadddd;">(</span>cmd<span style="color: #aadddd;">)</span>:    <span style="color: #9ac; font-style: italic;"># Bunch of boilerplate to catch the output of a command:</span>    <span style="color: #c6cccc; background-color: #202020;">pipe</span> = subprocess.Popen<span style="color: #aadddd;">(</span>cmd, <span style="color: #c6cccc; background-color: #202020;">shell</span>=<span style="color: #aaffaa;">True</span>, <span style="color: #c6cccc; background-color: #202020;">stdout</span>=subprocess.PIPE, <span style="color: #c6cccc; background-color: #202020;">stderr</span>=subprocess.STDOUT<span style="color: #aadddd;">)</span>    <span style="color: #aadddd;">(</span>output, errout<span style="color: #aadddd;">)</span> = pipe.communicate<span style="color: #aadddd;">()</span>    <span style="color: #aaffaa;">assert</span> <span style="color: #c6cccc; background-color: #202020;">pipe.returncode</span> == <span style="color: #c6cccc; background-color: #202020;">0</span> <span style="color: #aaffaa;">and</span> <span style="color: #aaffaa;">not</span> errout    <span style="color: #aaffaa;">return</span> output<span style="color: #aaffaa;">def</span> <span style="color: #aaccff;">get_password_emacs</span><span style="color: #aadddd;">(</span>host, port<span style="color: #aadddd;">)</span>:    <span style="color: #c6cccc; background-color: #202020;">cmd</span> = <span style="color: #aadddd;">"emacsclient --eval '(offlineimap-get-password \"%s\" \"%s\")'"</span> % <span style="color: #aadddd;">(</span>host, port<span style="color: #aadddd;">)</span>    <span style="color: #aaffaa;">return</span> get_output<span style="color: #aadddd;">(</span>cmd<span style="color: #aadddd;">)</span>.strip<span style="color: #aadddd;">()</span>.lstrip<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'"'</span><span style="color: #aadddd;">)</span>.rstrip<span style="color: #aadddd;">(</span><span style="color: #aadddd;">'"'</span><span style="color: #aadddd;">)</span></pre></div><p>至於 emacs 中 <code>offlineimap-get-password</code> 這個函式的定義則在後面進行說明。</p></div></div></div><div id="outline-container-org710d617" class="outline-3"><h3 id="org710d617">Mac OSX 下可能遇到的錯誤</h3><div class="outline-text-3" id="text-org710d617"><p>在 Mac OSX 下使用 offlineimap 時候你可能會遇到以下的錯誤</p><pre class="example">OfflineIMAP 6.6.0  Licensed under the GNU GPL v2 or any later version (with an OpenSSL exception)Account sync Gmail: *** Processing account Gmail Establishing connection to imap.gmail.com:993 ERROR: No CA certificates and no server fingerprints configured.  You must configure at least something, otherwise having SSL helps nothing. *** Finished account 'Gmail' in 0:00Account sync Weintek: *** Processing account Weintek Establishing connection to www.hibox.hinet.net:993 ERROR: No CA certificates and no server fingerprints configured.  You must configure at least something, otherwise having SSL helps nothing. *** Finished account 'Weintek' in 0:00ERROR: Exceptions occurred during the run!ERROR: No CA certificates and no server fingerprints configured.  You must configure at least something, otherwise having SSL helps nothing.Traceback:  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/accounts.py", line 263, in syncrunner    self.__sync()  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/accounts.py", line 326, in __sync    remoterepos.getfolders()  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/repository/IMAP.py", line 384, in getfolders    imapobj = self.imapserver.acquireconnection()  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/imapserver.py", line 483, in acquireconnection    tls_level=self.tlslevel,  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/imaplibutil.py", line 186, in __init__    super(WrappedIMAP4_SSL, self).__init__(*args, **kwargs)  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/imaplib2.py", line 2138, in __init__    IMAP4.__init__(self, host, port, debug, debug_file, identifier, timeout, debug_buf_lvl)  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/imaplib2.py", line 357, in __init__    self.open(host, port)  File "/usr/local/Cellar/offline-imap/6.6.0/libexec/offlineimap/imaplibutil.py", line 193, in open    "having SSL helps nothing.", OfflineImapError.ERROR.REPO)</pre><p>這問題是因為 Mac OSX 沒有內建 <code>ca-certificates.crt</code> 這樣的驗證檔案 (!?) ，因此你必須透過 homebrew 去安裝 openssl 來取得這個檔案</p><pre class="example">coldnew@osx ~ $ brew install openssl</pre><p>接著你就可以使用 <code>/usr/local/etc/openssl/cert.pem</code> 作為 sslcacertfile，將你的 .offlineimaprc 修改如下</p><div class="org-src-container"><pre class="src src-python"><span style="color: #c6cccc; background-color: #202020;">sslcacertfile</span> = /usr/local/etc/openssl/cert.pem</pre></div><p>我自己的電腦為了可以讓 <code>.offlineimaprc</code> 可以同時用於 Linux 和 Mac OSX 上，我則是透過軟連結來建立 <code>/etc/ssl/certs/ca-certificates.crt</code> 這個檔案。</p><pre class="example">coldnew@osx ~ $ sudo ln -s /usr/local/etc/openssl/cert.pem /etc/ssl/certs/ca-certificates.crt</pre></div></div></div><div id="outline-container-orgf5791e4" class="outline-2"><h2 id="orgf5791e4">設定 Google 驗證</h2><div class="outline-text-2" id="text-orgf5791e4"><p>最近才發現 Google 換個驗證方式，假如你用 offlineimap 之類的軟體下載 Gmail 遇到這樣的問題，那就是你必須要照 Google 的要求進行新的驗證方式</p><div class="org-src-container"><pre class="src src-org">Warning: Opening nnimap server on gmail...failed: NO (ALERT) Please log in via your web browser:<span style="color: #ccaaff; text-decoration: underline;"><a href="https://support.google.com/mail/accounts/answer/78754" target="_blank" rel="external">https://support.google.com/mail/accounts/answer/78754</a></span> (Failure);Server nnimap+gmail previously determined to be down; not retrying;</pre></div><p>首先連線到 <a href="https://support.google.com/mail/answer/185833?hl=en&amp;rd=1" target="_blank" rel="external">https://support.google.com/mail/answer/185833?hl=en&amp;rd=1</a> 該頁面描述了產生 App password 的方法</p><div class="figure"><p><img src="a1.png"></p></div><p>接著就去進行你的兩步驟驗證，完成後你就可以在個人的設定頁面去設定 <code>應用程式密碼</code> ，首先我們選擇其他應用程式</p><div class="figure"><p><img src="a2.png"></p></div><p>接著設定應用程式名稱為 <code>emacs</code></p><div class="figure"><p><img src="a3.png"></p></div><p>完成以後你就會得到一組 <code>16 字元</code> 的密碼，我們將他填到 <code>~/.authinfo.gpg</code> 的 <code>YOUR_PASSWORD</code> 欄位去。</p><div class="figure"><p><img src="a4.png"></p></div></div></div><div id="outline-container-org0c929bc" class="outline-2"><h2 id="org0c929bc">設定 ~/.authinfo.gpg</h2><div class="outline-text-2" id="text-org0c929bc"><p>設定完 Google 驗證並且取得你的 app 密碼後，就把你的資料填入到 <code>~/.authinfo.gpg</code> 中吧，只要你的 emacs 有進行設定，他會幫你將 <code>.gpg</code> 結尾的檔案加密起來的。</p><div class="org-src-container"><pre class="src src-text">machine imap.gmail.com login YOUR_EMAIL_ACCOUNT port 993 password YOUR_PASSWORD port 993machine smtp.gmail.com login YOUR_EMAIL_ACCOUNT port 587 password YOUR_PASSWORD port 587</pre></div></div></div><div id="outline-container-org06e987d" class="outline-2"><h2 id="org06e987d">設定你的 emacs</h2><div class="outline-text-2" id="text-org06e987d"><p>上述工作都完成後，我們就可以準備來設定我們的 emacs 了~ 首先先加上一個函式讓 emacsclient 可以取得寫在 <code>~/.authinfo.gpg</code> 的密碼</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">defun</span> <span style="color: #aaccff;">offlineimap-get-password</span> <span style="color: #81d4fa;">(</span>host port<span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">require</span> '<span style="color: #ccaaff;">netrc</span><span style="color: #81d4fa;">)</span>  <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">let*</span> <span style="color: #aaccff;">(</span><span style="color: #aaeecc;">(</span>netrc <span style="color: #ccaaff;">(</span>netrc-parse <span style="color: #fff59d;">(</span>expand-file-name <span style="color: #aadddd;">"~/.authinfo.gpg"</span><span style="color: #fff59d;">)</span><span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span>         <span style="color: #aaeecc;">(</span>hostentry <span style="color: #ccaaff;">(</span>netrc-machine netrc host port port<span style="color: #ccaaff;">)</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span>    <span style="color: #aaccff;">(</span><span style="color: #aaffaa;">when</span> hostentry <span style="color: #aaeecc;">(</span>netrc-get hostentry <span style="color: #aadddd;">"password"</span><span style="color: #aaeecc;">)</span><span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>接下來就是我們 mu4e 的設定，我們設定了信件存放位址為 <code>~/Maildir</code> 這個資料夾，並且使用 <a href="http://offlineimap.org/" target="_blank" rel="external">offlineimap</a> 進行信件的擷取功能，每 <code>60 秒</code> 更新一次資訊，值得一提的是由於 <a href="http://offlineimap.org/" target="_blank" rel="external">offlineimap</a> 是外部程式，在擷取信件的時後並不會卡住你的 emacs。</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">require</span> '<span style="color: #ccaaff;">mu4e</span><span style="color: #aadddd;">)</span>                      <span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">load mu4e</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Use mu4e as default mail agent</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mail-user-agent 'mu4e-user-agent<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Mail folder set to ~/Maildir</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-maildir <span style="color: #aadddd;">"~/Maildir"</span><span style="color: #aadddd;">)</span>         <span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">NOTE: should not be symbolic link</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Fetch mail by offlineimap</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-get-mail-command <span style="color: #aadddd;">"offlineimap"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Fetch mail in 60 sec interval</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-update-interval 60<span style="color: #aadddd;">)</span></pre></div><p>接下來要設定寄件夾、草稿夾等位址，注意到我在 <code>~/.offlineimaprc</code> 裡面有這樣的設定</p><div class="org-src-container"><pre class="src src-python"><span style="color: #5f5f5f; font-style: italic;"># </span><span style="color: #9ac; font-style: italic;">[Repository Gmail-Local]</span><span style="color: #c6cccc; background-color: #202020;">localfolders</span> = ~/Maildir/Gmail</pre></div><p>因此在你的 <code>.emacs</code> 這邊要這樣加入設定</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">folder for sent messages</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-sent-folder   <span style="color: #aadddd;">"/Gmail/Sent"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">unfinished messages</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-drafts-folder <span style="color: #aadddd;">"/Gmail/Drafts"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">trashed messages</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-trash-folder  <span style="color: #aadddd;">"/Gmail/Trash"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">saved messages</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-trash-folder  <span style="color: #aadddd;">"/Gmail/Archive"</span><span style="color: #aadddd;">)</span></pre></div><p>在我們收信的時候，有些信件可能是 HTML 的格式，因此我們使用 emacs 內建的 <code>eww</code> 將其轉換為純文字檔好方便閱讀，並用一些 <a href="http://www.djcbsoftware.nl/code/mu/mu4e/Displaying-rich_002dtext-messages.html" target="_blank" rel="external">建議</a> 的按鍵設定</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">require</span> '<span style="color: #ccaaff;">mu4e-contrib</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-html2text-command 'mu4e-shr2text<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">try to emulate some of the eww key-bindings</span><span style="color: #aadddd;">(</span>add-hook 'mu4e-view-mode-hook          <span style="color: #81d4fa;">(</span><span style="color: #aaffaa;">lambda</span> <span style="color: #aaccff;">()</span>            <span style="color: #aaccff;">(</span>local-set-key <span style="color: #aaeecc;">(</span>kbd <span style="color: #aadddd;">"&lt;tab&gt;"</span><span style="color: #aaeecc;">)</span> 'shr-next-link<span style="color: #aaccff;">)</span>            <span style="color: #aaccff;">(</span>local-set-key <span style="color: #aaeecc;">(</span>kbd <span style="color: #aadddd;">"&lt;backtab&gt;"</span><span style="color: #aaeecc;">)</span> 'shr-previous-link<span style="color: #aaccff;">)</span><span style="color: #81d4fa;">)</span><span style="color: #aadddd;">)</span></pre></div><p>當然，在圖形介面下的 emacs 是可以顯示圖像的，因此你可以設定 <code>mu4e-view-show-images</code> 來讓 mu4e 顯示圖片</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-view-show-images t<span style="color: #aadddd;">)</span></pre></div><p>再來就是寄信的設定，這邊實際上用的是 emacs 內建的 smtp 功能，因此照著設定就好</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">SMTP setup</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> message-send-mail-function 'smtpmail-send-it      smtpmail-stream-type 'starttls      starttls-use-gnutls t<span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">Personal info</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> user-full-name <span style="color: #aadddd;">"Yen-Chin, Lee"</span><span style="color: #aadddd;">)</span>          <span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">FIXME: add your info here</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> user-mail-address <span style="color: #aadddd;">"coldnew.tw@gmail.com"</span><span style="color: #aadddd;">)</span><span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">FIXME: add your info here</span><span style="color: #5f5f5f; font-style: italic;">;; </span><span style="color: #9ac; font-style: italic;">gmail setup</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> smtpmail-smtp-server <span style="color: #aadddd;">"smtp.gmail.com"</span><span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> smtpmail-smtp-service 587<span style="color: #aadddd;">)</span><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> smtpmail-smtp-user <span style="color: #aadddd;">"YOUR-GMAIL-ADDRESS"</span><span style="color: #aadddd;">)</span> <span style="color: #5f5f5f; font-style: italic;">; </span><span style="color: #9ac; font-style: italic;">FIXME: add your gmail addr here</span></pre></div><p>如果你想要設定你的簽名檔，則可以設定 <code>mu4e-compose-signature</code> 這個變數</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span><span style="color: #aaffaa;">setq</span> mu4e-compose-signature <span style="color: #aadddd;">"Sent from my emacs."</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-orgacf1185" class="outline-2"><h2 id="orgacf1185">第一次使用的額外設定</h2><div class="outline-text-2" id="text-orgacf1185"><p>第一次進行使用的時候，我們要先透過 <a href="http://offlineimap.org/" target="_blank" rel="external">offlineimap</a> 來收取 Gmail 上的郵件，於是在另外一個終端機上手動執行 offlineimap 這個程式，如果你仿照我的設定，你會看到執行完 offlineimap 後，emacs 會來相你詢問 <code>~/.authinfo.gpg</code> 的密碼，提供給他後 offlineimap 就開始下載郵件了</p><pre class="example">coldnew@osx ~ $ offlineimapOfflineIMAP 6.6.0  Licensed under the GNU GPL v2 or any later version (with an OpenSSL exception)Account sync Gmail: *** Processing account Gmail Establishing connection to imap.gmail.com:993Folder [mailing-list]/linux-input [acc: Gmail]: Copy message 4371 (4369 of 9933) Gmail-Remote:[mailing-list]/linux-input -&gt; Gmail-LocalFolder [mailing-list]/emacs-devel [acc: Gmail]: Copy message 14129 (13112 of 41986) Gmail-Remote:[mailing-list]/emacs-devel -&gt; Gmail-LocalFolder [mailing-list]/Clojure [acc: Gmail]: Copy message 14012 (13123 of 36061) Gmail-Remote:[mailing-list]/Clojure -&gt; Gmail-LocalFolder [mailing-list]/linux-kernel-arm [acc: Gmail]: Copy message 2981 (2981 of 272523) Gmail-Remote:[mailing-list]/linux-kernel-arm -&gt; Gmail-Local</pre><p>郵件取得完成後，我們要讓 <code>mu</code> 索引所有的郵件，這邊這些動作只有第一次設立環境時需要執行，之後透過 emacs 的 <code>mu4e</code> 就會自動進行抓取郵件和索引的動作</p><pre class="example">coldnew@osx ~ $  mu indexindexing messages under /Users/coldnew/Maildir [/Users/coldnew/.mu/xapian]\ processing mail; processed: 12300; updated/new: 12300, cleaned-up: 0| processing mail; processed: 12375; updated/new: 12375, cleaned-up: 0</pre></div></div><div id="outline-container-orge351c26" class="outline-2"><h2 id="orge351c26">在 emacs 下觀看郵件</h2><div class="outline-text-2" id="text-orge351c26"><p>前面的設定都完成後，就可以執行 <code>M-x mu4e</code> 來啟動我們來啟動我們的 mu4e 程式，首先會進到歡迎畫面</p><div class="figure"><p><img src="b1.png"></p></div><p>接下來輸入 <code>j</code> 切換要瀏覽的信件群組</p><div class="figure"><p><img src="b2.png"></p></div><p>然後對你有興趣的信件按下 <code>ENTER</code> 後就可以看到內文囉~</p><div class="figure"><p><img src="b3.png"></p></div><p>更多的操作就不在這邊贅述了，請參考 <a href="http://www.djcbsoftware.nl/code/mu/mu4e/index.html" target="_blank" rel="external">mu4e Manual</a> 。</p></div></div><div id="outline-container-org8677b65" class="outline-2"><h2 id="org8677b65">在 emacs 下寄送信件</h2><div class="outline-text-2" id="text-org8677b65"><p>會收信了以後，讓我們來看看怎樣發送信件，前面說到了 mu4e 實際上是透過 emacs 內建的功能來寄送信件，因此我們只要呼叫 <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Sending-Mail.html" target="_blank" rel="external">compose-mail</a> 這個命令 (<code>C-x m</code>) 即可進入寫信件的視窗</p><div class="figure"><p><img src="c1.png"></p></div><p>填寫完成你的訊息後，只要輸入 <code>C-c C-c</code> 就會將信件寄送出去囉，這邊是我在 gmail 收到的結果</p><div class="figure"><p><img src="c2.png"></p></div></div></div><div id="outline-container-org1eccde6" class="outline-2"><h2 id="org1eccde6">總結</h2><div class="outline-text-2" id="text-org1eccde6"><p>我自己使用 emacs 的習慣是用他來看 mailing-list, 畢竟信件太多用 gmail 或是 app 不見的好瀏覽，私人信件才會使用 APP 或是 thunderbird 來收。對我而言在 emacs 中收信有幾個好處</p><ol class="org-ol"><li><p>高度與 emacs 整合</p><p>我可以自行設定我需要的功能(替 patch 上色)，並且收信時不需要離開 emacs。</p></li><li><p>方便寄信</p><p>除了收信以外，直接在 emacs 中寄信同時代表了我可以用自己設定好的快捷鍵來修改信件，這是非常愉快的事情。</p></li></ol></div></div><div id="outline-container-org9ad9a14" class="outline-2"><h2 id="org9ad9a14">延伸閱讀</h2><div class="outline-text-2" id="text-org9ad9a14"><p><code>[1]</code> <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html" target="_blank" rel="external">http://www.djcbsoftware.nl/code/mu/mu4e.html</a></p><p><code>[2]</code> <a href="http://rudolfochrist.github.io/blog/2015/03/21/offlineimap-with-ssl-files-on-osx/" target="_blank" rel="external">Offlineimap with SSL files on OSX</a></p><p><code>[3]</code> <a href="https://bbs.archlinux.org/viewtopic.php?pid=1588425#p1588425" target="_blank" rel="external">offlineimap stops working after update to 6.6.0</a></p><p><code>[4]</code> <a href="https://gist.github.com/areina/3879626" target="_blank" rel="external">Manage your gmail account in emacs with mu4e</a></p><p><code>[5]</code> <a href="https://productforums.google.com/forum/#!topic/gmail/WUaXHSdI3WM" target="_blank" rel="external">2-step authentication for IMap?</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/6a7aa5c1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在 emacs 下使用 verify-url 檢查不存在的 URL</title>
      <link>https://coldnew.github.io/d761102/</link>
      <guid>https://coldnew.github.io/d761102/</guid>
      <pubDate>Sun, 27 Dec 2015 09:19:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;
在寫文章的時候，常常需要插入一些網頁連結，有時候手誤或是連結已經年久失修，這時候
就需要個好方式來幫忙進行檢查，&lt;a href=&quot;https://github.com/lujun9972/verify-url&quot;&gt;verify-url&lt;/a&gt; 就是一個在 emacs 下幫忙檢查不存在的 URL
的好工具。
&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在寫文章的時候，常常需要插入一些網頁連結，有時候手誤或是連結已經年久失修，這時候就需要個好方式來幫忙進行檢查，<a href="https://github.com/lujun9972/verify-url" target="_blank" rel="external">verify-url</a> 就是一個在 emacs 下幫忙檢查不存在的 URL的好工具。</p><a id="more"></a><div id="outline-container-org2dc007b" class="outline-2"><h2 id="org2dc007b">安裝 verify-url</h2><div class="outline-text-2" id="text-org2dc007b"><p>自從 emacs 整合了 package.el 後，安裝新的套件都非常輕鬆，你可以直接透過以下命令來安裝</p><pre class="example">M-x package-install verify-url</pre><p>如果你有使用 <a href="https://github.com/cask/cask" target="_blank" rel="external">Cask</a> 作為 emacs-lisp 開發工具，則可以在你的 <code>Cask</code> 檔案加入：</p><div class="org-src-container"><pre class="src src-emacs-lisp"><span style="color: #aadddd;">(</span>depends-on <span style="color: #aadddd;">"verify-url"</span><span style="color: #aadddd;">)</span></pre></div></div></div><div id="outline-container-org178333c" class="outline-2"><h2 id="org178333c">如何使用 verify-url</h2><div class="outline-text-2" id="text-org178333c"><p>安裝完後，我們可以用弄個非常簡單的範例來測試，假設我們正在編輯的文件有以下內容:</p><div class="org-src-container"><pre class="src src-text">google's link: http://google.cominvalid url1: http://invalid.urlcoldnew's blog: https://coldnew.github.ioinvalid url2: https://unvaliable.url</pre></div><p>接下來輸入 <code>M-x verify-url</code> 你就會看到有問題的 URL 被上色了:</p><div class="figure"><p><img src="verify-url.png"></p></div></div></div><div id="outline-container-orgb4ab518" class="outline-2"><h2 id="orgb4ab518">快速跳轉到失效的 link</h2><div class="outline-text-2" id="text-orgb4ab518"><p><a href="https://github.com/lujun9972/verify-url" target="_blank" rel="external">verify-url</a> 內建了兩個有用的命令，可以讓我們快速跳轉到錯誤的連結，你也可以透過他們進行快速的跳轉</p><ul class="org-ul"><li>verify-url/next-invalid-url</li><li>verify-url/previous-invalid-url</li></ul></div></div><div id="outline-container-org9b793eb" class="outline-2"><h2 id="org9b793eb">延伸閱讀</h2><div class="outline-text-2" id="text-org9b793eb"><p><code>[1]</code> <a href="https://github.com/lujun9972/verify-url" target="_blank" rel="external">https://github.com/lujun9972/verify-url</a></p><p><code>[2]</code> <a href="http://rubikitch.com/2015/12/24/verify-url/" target="_blank" rel="external">emacs verify-url.el : 【リンク切れ検出】バッファ全體/region 內のURLの存在確認をする</a></p></div></div>]]></content:encoded>
      
      <comments>https://coldnew.github.io/d761102/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
